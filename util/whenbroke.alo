#!/usr/local/bin/alore

-- whenbroke.alo - Help determine when a bug was introduced in revision history
--
-- Copyright (c) 2010-2011 Jukka Lehtosalo
--
-- Alore is licensed under the terms of the MIT license.  See the file
-- LICENSE.txt in the distribution.

import io
import os


def Main(args)
  if args.length() != 3 or not IsFile(args[2])
    Usage()
  end
  
  var r1 = Int(args[0])
  var r2 = Int(args[1])
  
  Iterate(r1, r2, args[2])
end


-- broken in max, unknown in min
def Iterate(min, max, script)
  Msg("Checking r{}..r{}".format(min, max))
  if min == max
    Found(min)
    return
  end
  
  var middle = (min + max) div 2
  if TryBreak(middle, script)
    -- Broken..
    if middle == min
      Found(min)
      return
    end
    Iterate(min, middle, script)
  else
    Iterate(middle + 1, max, script)
  end  
end


const Dir = "tmp.dir.xyz"


def TryBreak(rev, script)
  System("rm -rf " + Dir)
  System(("svn co -r{} svn://leonardo/alore-repos/alore/trunk {} " +
         "> /dev/null").format(rev, Dir))
  ChangeDir("{}/src".format(Dir))
  var mf = "Makefile-linux"
  if not IsFile(mf)
    mf = "Makefile"
  end
  System("make -f {} > /dev/null 2>&1".format(mf))
  ChangeDir("../..")
  var ret = System("{}/src/alore {}".format(Dir, script)) != 0
  System("rm -rf " + Dir)
  return ret
end


def Usage()
  StdErr.writeLn("Usage: whenbroke.alo rev1 rev2 script")
  StdErr.writeLn()
  StdErr.writeLn("Find smallest r such that rev1 <= r <= rev2 for which the script breaks.")
  StdErr.writeLn()
  StdErr.writeLn("Arguments:")
  StdErr.writeLn("  rev1    integer svn revision lower bound")
  StdErr.writeLn("  rev2    integer svn revision upper bound")
  StdErr.writeLn("  script  Alore program to run")
  StdErr.writeLn()
  StdErr.writeLn("Assumption: script breaks in all revisions > x, x < rev2 and works in other")
  StdErr.writeLn("            revisions.")
  Exit(1)
end


def Msg(s)
  WriteLn(s)
end


def Found(x)
  Msg("First broke in r{}.".format(x))
end


def System(cmd)
  WriteLn(cmd)
  return os::System(cmd)
end
