module analyse

-- High-level source code analysis logic. Decides which analyses are performed
-- to which files and in which order, and collects the results.

import parser
import nodes
import semanal
import checker
import errors
import types
import os
import sys
import set


-- Analyse a program represented as a string semantically and optionally type
-- check the program. Return the annotated parse trees (one per file), the 
-- symbol table and the type map.
def Analyse(programText          as Str, 
            programFnam = "main" as Str, 
            useFullStd = True    as Boolean, 
            altLibPath = nil     as Str, 
            isTypeCheck = False  as Boolean) as
                (Array<AloreFile>, SymbolTable, TypeInfoMap, Map<Node, Typ>)
  var path = DefaultLibPath()
  
  if programFnam != "main"
    path.insertAt(0, FixPath(DirName(programFnam)))
  end
  
  if not useFullStd
    -- Use stub std module.
    path.insertAt(0, ModulePath("testchk/data/lib-stub"))
  end
  
  if altLibPath != nil
    path.insertAt(0, altLibPath)
  end
  
  -- InitializeNormalize()
  
  var analysis = Analysis(path, isTypeCheck)
  
  -- Ignore current directory prefix in error messages.
  analysis.errors.setIgnorePrefix(CurrentDir())
  
  return analysis.process(WaitingFile((programFnam, nil, [], analysis), 
                                      programText))
end


-- Return default standard library search paths.
private def DefaultLibPath() as Array<Str>
  -- IDEA: Make this more portable.
  var path = [] as <Str>
  
  -- Add ALOREPATH environment variable to library path, if defined.
  var pathEnv = GetEnv("ALOREPATH")
  if pathEnv != nil
    path.append(pathEnv)
  end
  
  -- Add library stubs directory.
  path.append(ModulePath("../stubs"))
  
  -- Determine the location of the lib directory and add it.
  if IsInstalled()
    -- This copy has been installed.
    if Platform != "windows"
      -- Translate .../share/alore/check -> .../lib/alore.
      path.append(ModulePath("../../../lib/alore"))
    else
      -- Windows: Translate .../share/check -> .../lib.
      path.append(ModulePath("../../lib"))
    end
  else
    -- Running in a build directory.
    path.append(ModulePath("../lib"))
  end
  
  -- Add fallback path that can be used if we have a broken installation.
  if Platform != "windows"
    path.append("/usr/local/lib/alore")
  end

  return path
end


-- Determine whether we are running an installed copy of the checker (as
-- opposed to running in a build directory).
private def IsInstalled() as Boolean
  -- IDEA: Make this more portable.
  
  var pp = NormPath(DirName(sys::ProgramPath))
  
  -- If running in a build directory, the program directory looks like this:
  --   .../check
  -- When installed, it looks like this:
  --   .../share/alore/check
  -- or
  --   .../share/check (Windows)
  
  return pp.endsWith(Join("share", "alore", "check")) or
         pp.endsWith(Join("share", "check"))
end


-- Class for performing semantic analysis and type checking of an Alore 
-- program.
class Analysis
  const isTypeCheck as Boolean      -- Do we perform a type check?
  var libPath       as Array<Str>   -- Library path for looking up modules
  var semAnal       as SemanticAnal -- Semantic analyser
  var checker       as TypeChecker  -- Type checker
  var errors = Errors() as Errors   -- For reporting all errors

  -- States of all individual files that are being processed.
  const states = []         as Array<State>
  -- Map from module name to source files in the module.
  const moduleFiles = Map() as Map<Str, Array<Str>>

  def create(libPath as Array<Str>, isTypeCheck as Boolean)
    self.libPath = libPath
    self.isTypeCheck = isTypeCheck
    self.semAnal = SemanticAnal(libPath, self.errors)
    self.checker = TypeChecker(self.errors, self.semAnal.symtable)
  end
  
  def process(initialState as State) as (Array<AloreFile>, SymbolTable,
                                         TypeInfoMap, Map<Node, Typ>)
    self.states.append(initialState)
    
    while True
      var next = nextAvailableState()
      if next == nil
        break
      end
      
      self.errors.setImportContext(next.importContext)      
      next.process()
    end
    
    self.semAnal.symtable.cleanup()
    
    if self.errors.isErrors()
      self.errors.raiseError()
    end
    
    var trees = [] as <AloreFile>
    for state in self.states
      trees.append((state as ParsedFile).tree)
    end
    
    return trees, self.semAnal.symtable, self.semAnal.types, 
           self.checker.typeMap
  end
  
  def nextAvailableState() as State
    var i = self.states.length() - 1
    while i >= 0
      if self.states[i].isReady()
        return self.states[i]
      end
      i -= 1
    end
    return nil
  end
  
  def hasModule(name as Str) as Boolean
    return self.moduleFiles.hasKey(name)
  end
  
  def fileState(path as Str) as Constant
    for s in self.states
      if s.path == path
        return s.state
      end
    end
    return UnseenState
  end
  
  def moduleState(name as Str) as Constant
    if not hasModule(name)
      return UnseenState
    end
    var state = CheckedState
    for f in self.moduleFiles[name]
      var fs = fileState(f)
      if IsSmallerState(fs, state)
        state = fs
      end
    end
    return state
  end
end


-- Convert a path that is relative to check/ to an absolute path.
private def ModulePath(dir as Str) as Str
  -- IDEA: Detect the base path more reliably.

  -- Assume program is in the check/ directory (e.g. check.alo).
  var basePath = DirName(ProgramPath)
  
  if BaseName(ProgramPath) == "test.alo"
    -- When called by the test runner, the basePath will point to test/.
    -- Convert it to point to check/ instead.
    basePath = Join(DirName(basePath), "check")
  end
  
  return FixPath(NormPath(Join(basePath, dir)))
end


private def FixPath(p as Str) as Str
  var cur = CurrentDir()
  -- Add separator to the end of the path, unless one is already present.
  if BaseName(cur) != ''
    cur += Separator
  end
  -- Remove current directory prefix from the path, if present.
  if p.startsWith(cur)
    p = p[cur.length():]
  end
  -- Avoid returning an empty path; replace that with '.'.
  if p == ""
    p = "."
  end
  return p
end
