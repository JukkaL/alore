module checker

import types
import nodes


-- Type for reporting parsing context in error messages.
interface Context
  bind Node

  def line as Int
end


-- Collection of Instance types of basic types (std::Object, std::Type, etc.).
class BasicTypes
  const object    -- Instance std::Object
  const stdType   -- Instance std::Type
  const tuple     -- Instance std::Tuple
  const function  -- Instance std::Function
end


-- Return a boolean indicating whether a call expression has a (potentially)
-- compatible number of arguments for calling a function. Varargs at caller are
-- not checked.
private def IsValidArgc(nargs as Int, isVarArg as Boolean,
                        callable as Callable) as Boolean
  if isVarArg
    if callable.isVarArg
      return True
    else
      return nargs - 1 <= callable.maxFixedArgs
    end
  elif callable.isVarArg
    return nargs >= callable.minArgs
  else
    -- Neither has varargs.
    return nargs <= callable.argTypes.length() and nargs >= callable.minArgs
  end
end


-- Expand the caller argument types in a varargs call. Fixedargc is the maximum
-- number of fixed arguments that the target function accepts.
--
-- Return (fixed argument types, type of the rest of the arguments). Return
-- (nil, nil) if the last (vararg) argument had an invalid type. If the vararg
-- argument was not an array (nor dynamic), the last item in the returned
-- tuple is nil.
private def ExpandCallerVarArgs(argTypes as Array<Typ>, fixedArgc as Int) as
                                  (Array<Typ>, Typ)
  if argTypes[-1] is TupleType
    return argTypes[:-1] + (argTypes[-1] as TupleType).items, nil
  else
    var itemType as Typ
    if argTypes[-1] is Dynamic
      itemType = Dynamic()
    elif argTypes[-1] is Instance and
         (argTypes[-1] as Instance).type.fullName == "std::Array"
      -- Array.
      itemType = (argTypes[-1] as Instance).args[0]
    else
      return nil, nil
    end

    if argTypes.length() > fixedArgc
      return argTypes[:-1], itemType
    else
      return argTypes[:-1] + [itemType] * (fixedArgc - argTypes.length() + 1),
             itemType
    end
  end
end


private def UpdateCallableImplicitBounds(
                   t as Callable, argTypes as Array<(Int, Typ)>) as Callable
  -- FIX what if there are existing bounds?
  return Callable(t.argTypes,
                  t.minArgs,
                  t.isVarArg,
                  t.retType,
                  t.isTypeObj,
                  t.name,
                  t.variables,
                  argTypes,
                  t.line,
                  t.repr)
end


-- For a non-generic type, return instance type representing the type.
-- For a generic G type with parameters T1, .., Tn, return G<T1, ..., Tn>.
private def SelfType(type as TypeInfo) as Instance
  var tv = [] as <Typ>
  for i in 0 to type.typeVars.length()
    tv.append(TypeVar(type.typeVars[i], i + 1))
  end
  return Instance(type, tv)
end


-- Map type variables in a type defined in a supertype context to be valid
-- in the subtype context. Assume that the type is unique; if more than
-- one type are possible, return one of the alternatives.
--
-- FIX: This functions seems to be unused. Either use it or remove it.
def MapTypeFromSupertype(type as Typ, subInfo as TypeInfo,
                         superInfo as TypeInfo) as Typ
  -- Create the type of self in subtype, of form t<a1, ...>.
  var instType = SelfType(subInfo)
  -- Map the type of self to supertype. This gets us a description of the
  -- supertype type variables in terms of subtype variables, i.e. t<t1, ...>
  -- so that any type variables in tN are to be interpreted in subtype
  -- context.
  var instTypes = MapInstanceToSupertypes(instType, superInfo)
  -- Finally expand the type variables in type with those in the previously
  -- constructed type. Note that both type and instType may have type
  -- variables, but in type they are interpreterd in supertype context while
  -- in instType they are interpreted in subtype context. This works even if
  -- the names of type variables in supertype and subtype overlap.
  return ExpandTypeByInstance(type, instTypes[0])
end


-- Find the original overridden definition of a member (highest type in the
-- subclass hierarchy that defines it). If member was first defined in the
-- specified type, return nil.
def FindOriginalMemberDefinition(type as TypeInfo,
                                 member as Str) as AccessorNode
  var n = nil as AccessorNode
  while type.base != nil
    var nn = type.base.getPublicMethod(member) as AccessorNode
    if nn == nil
      nn = type.base.getPublicVarOrGetter(member)
    end
    if nn == nil
      break
    end
    n = nn
    type = n.info
  end
  return n
end
