module checker

import types


-- Infer the type arguments of a generic function. Return an array of 
-- (lower bound, upper bound) tuples for the type variables -1 (at index 0), 
-- -2 (at index 1), etc.
--
--   calleeType: the target generic function
--   argTypes:   argument types at the call site
--   isVarArg:   is the call a vararg call (if yes, last arg type is vararg)
--   basic:      references to basic types which are needed during inference
private def InferFunctionTypeArguments(
                calleeType as Callable, argTypes as Array<Typ>, 
                isVarArg as Boolean, basic as BasicTypes) as Array<(Typ, Typ)>
  -- Infer constraints.
  var constraints = InferConstraintsForCallable(calleeType, argTypes, isVarArg)
  
  -- Solve constraints.
  var typeVars = calleeType.typeVarIds()
  return SolveConstraints(typeVars, constraints, basic)
end


-- Infer the type arguments of a bound method type with ranges as instances 
-- type variables. Return an array of (lower bound, upper bound) tuples for 
-- the type variables; first for instance type variables and then for function
-- type variables (if any).
--
--   calleeType: the target method type
--   argTypes:   argument types at the call site
--   isVarArg:   is the call a vararg call (if yes, last arg type is vararg)
--   basic:      references to basic types which are needed during inference
private def InferRangeCallableTypeArguments(
                callee as RangeCallable, argTypes as Array<Typ>, 
                isVarArg as Boolean, basic as BasicTypes) as Array<(Typ, Typ)>
  -- Infer constraints for all type variables (both type and function).
  var constraints = InferConstraintsForCallable(callee.callable, argTypes, 
                                                isVarArg)
  
  -- Add constraints from the RangeCallable.
  for i in 0 to callee.numTypeVars()
    constraints.append(Constraint(i + 1, SupertypeOf, callee.bottoms[i]))
    constraints.append(Constraint(i + 1, SubtypeOf, callee.tops[i]))
  end
  
  var typeVars = callee.typeVarIds() + callee.callable.typeVarIds()
  return SolveConstraints(typeVars, constraints, basic)  
end
