module checker

import nodes
import types
import semanal -- for SymbolTable
import errors


-- Flag signifying inverted relational operation (>= or <=).
const Inverted


-- Map from operator id to related method name.
private const OpMethods = Map(
  "+" : "_add",
  "-" : "_sub",
  "*" : "_mul",
  "/" : "_div",
  "mod" : "_mod",
  "div" : "_idiv",
  "**" : "_pow",
  "in" : "_in",
  "<"  : "_lt",
  ">=" : "_lt",
  ">"  : "_gt",
  "<=" : "_gt",
) as Map<Str, Str>


-- Alore type checker. Type check Alore source files that have been 
-- semantically analysed.
class TypeChecker is NodeVisitor<Typ>
  const errors   as Errors          -- Error reporting
  const symtable as SymbolTable     -- Symbol table for the whole program
  const msg      as MessageBuilder  -- Utility for generating messages
  const typeMap  as Map<Node, Typ>  -- Types of type checked nodes
  const exprChecker as ExpressionChecker
  
  const stack = [nil] as Array<Str> -- Stack of local variable definitions; 
                                    -- nil separates nested functions
  const returnTypes = [] as Array<Typ> -- Stack of function return types
  const typeContext = [] as Array<Typ> -- Unused (for type inference??)

  -- Keep track of casts within functions with intersection types to check
  -- if a cast is valid. The keys are CastExpr instances. The values are 
  -- arrays of invalid casts represented as (targetType, sourceType) tuples. 
  -- If a cast is valid for any item of an intersection type, the array for 
  -- that cast is cleared and remains empty (valid) for that cast.
  var castStatus = Map() as Map<Node, Array<(Typ, Typ)>>
  
  -- If True, the current type has invalid subtype relationship (e.g. defines
  -- a type variable that is unrelated to supertype). This is set separately
  -- for each type that is being checked. This is used for getting rid of
  -- misleading duplicate error messages.
  private var isInvalidSubtypeRelationship = False as Boolean
  
  
  -- Construct a type checker. Use errors to report type check errors. Assume
  -- symtable has been populated by the semantic analyser.
  def create(errors as Errors, symtable as SymbolTable)
    self.exprChecker
    self.errors = errors
    self.symtable = symtable
    self.msg = MessageBuilder(errors)
    self.typeMap = Map()
    self.exprChecker = ExpressionChecker(self, self.msg)
  end

  -- Type check an Alore file with the given path.
  def visitFile(fileNode as AloreFile, path as Str)
    self.errors.setFile(path)
    for d in fileNode.defs
      accept(d)
    end
  end
  
  
  -- Definitions
  --------------
  
  
  -- Type a variable definition (of any kind: local, member or local).
  def visitVarDef(defn as VarDef) as Typ
    -- Type check initializer.
    if defn.init != nil
      var initType = accept(defn.init)
      if defn.type != nil
        var target = defn.type.type
        if defn.names.length() == 1
          checkAssignment(target, nil, initType, defn.init)
        elif target is TupleType
          -- Note that if the target type is not a tuple, the error will be
          -- reported elsewhere.
          var ttarget = (target as TupleType)
          checkMultiAssignment(ttarget.items, [nil] * ttarget.items.length(),
                               initType, defn.init)
        end
      elif defn.kind == Ldef
        inferLocalVariableType(defn.names, initType, defn)
      end
    elif defn.kind == Gdef and defn.type != nil and defn.isConst
      for n in defn.names
        if n.type != nil
          checkTypeEquivalency(n.type.type, namedType("std::Constant"), n,
                               TypeConstantExpected)
        end
      end
    elif defn.kind == Ldef and defn.type == nil
      fail(NeedAnnotationForLocalVar, defn)
    end
    
    if defn.kind == Mdef
      checkMemberVarImplementation(defn)
    end
    
    if defn.kind == Ldef
      for v in defn.names
        addVar(v, Ldef)
      end
    end
  end
  
  -- Infer the type of initialized local variables from the type of the 
  -- initializer expression. The initializer type does not have to be 
  -- collapsed.
  def inferLocalVariableType(names as Array<Var>, initType as Typ, 
                             context as Context)
    -- Collapse the rvalue type to get rid of ranges.
    initType = CollapseType(initType)
    
    if initType is Void
      checkNotVoid(initType, context)
    elif not isValidInferredType(initType)
      -- We cannot use the type of the initialization expression for type
      -- inference (it's not specific enough).
      fail(NeedAnnotationForLocalVar, context)
    else
      -- Infer type of the target.

      -- Make the type more general (strip away function names etc.).
      initType = stripType(initType)

      if names.length() > 1
        if initType is TupleType
          var tinitType = (initType as TupleType)
          -- Initializer with a tuple type.
          if tinitType.items.length() == names.length()
            for i in 0 to names.length()
              names[i].type = Annotation(tinitType.items[i], -1)
            end
          else
            fail(IncompatibleTypesInAssignment, context)
          end
        elif initType is Instance and 
             (initType as Instance).type.fullName == "std::Array"
          -- Initializer with an array type.
          var itemType = (initType as Instance).args[0]
          for i in 0 to names.length()
            names[i].type = Annotation(itemType, -1)
          end
        elif initType is Dynamic
          for i in 0 to names.length()
            names[i].type = Annotation(Dynamic(), -1)
          end
        else
          fail(IncompatibleTypesInAssignment, context)
        end
      else
        for v in names
          v.type = Annotation(initType, -1)
        end
      end
    end
  end
      
  -- Is an inferred type invalid (e.g. the nil type or a type with a nil 
  -- component)?
  private def isValidInferredType(type as Typ) as Boolean
    if IsSameType(type, NilType())
      return False
    elif type is Instance
      for arg in (type as Instance).args
        if not isValidInferredType(arg)
          return False
        end
      end
    elif type is TupleType
      for item in (type as TupleType).items
        if not isValidInferredType(item)
          return False
        end
      end
    end
    return True
  end 
  
  -- Remove a copy of type with all "debugging information" (e.g. name of 
  -- function) removed.
  private def stripType(type as Typ) as Typ
    if type is Callable
      var ctyp = (type as Callable)
      return Callable(ctyp.argTypes, ctyp.minArgs, ctyp.isVarArg, ctyp.retType,
                      ctyp.isTypeObj, nil, ctyp.variables)
    else
      return type
    end
  end
  
  -- Check that a member variable is compatible with implemented interfaces.
  def checkMemberVarImplementation(defn as VarDef)
    if defn.type != nil
      for iface in defn.info().interfaces
        checkMemberVarImplementationInInterface(defn, iface)
      end
    end
  end
  
  -- Check that a member variable is compatible with an implemented interface.
  def checkMemberVarImplementationInInterface(defn as VarDef, 
                                              iface as TypeInfo)
    for v in defn.names
      var getter = iface.getPublicVarOrGetter(v.name)
      if getter != nil
        -- As we query an interface, we always have a getter method.
        var fgetter = (getter as FuncDef)
        checkVarOverride(v.type.type, accessorType(fgetter), v.name, v.info,
                         fgetter.info, v)
      end
      var setter = iface.getPublicVarOrSetter(v.name)
      if setter != nil
        -- As we query an interface, we always have a setter method.
        var fsetter = (setter as FuncDef)
        checkVarOverride(v.type.type, accessorType(fsetter), v.name, v.info,
                         fsetter.info, v)
      end
    end
    
    -- Also check superinterface, since a definition much be compatible with
    -- all supertypes.
    if iface.base != nil
      checkMemberVarImplementationInInterface(defn, iface.base)
    end
  end
  
  -- Check that an accessor that overrides a variable or an accessor is
  -- compatible with the supertype.
  def checkVarOverride(override as Typ, original as Typ, name as Str, 
                       subtype as TypeInfo, supertype as TypeInfo, 
                       context as Context)
    for mapped in mapAllTypesFromSupertype(original, subtype, supertype)
      if not IsEquivalent(override, mapped)
        self.msg.typeIncompatibleWithSupertype(name, supertype, context)
      end
    end
  end
  
  -- Type check a function definition.
  def visitFuncDef(defn as FuncBase) as Typ
    -- We may be checking a function definition or an anonymous function. In
    -- the first case, set up another reference with the precise type.
    var fdef = nil as FuncDef
    if defn is FuncDef
      fdef = defn as FuncDef
    end
  
    if fdef != nil and fdef.isGetter
      -- Verify compatible types for getter and setter. We do this even if 
      -- there is no type signature, since the setter may have a type 
      -- signature.
      var n = fdef.info.getVarOrSetter(fdef.name)
      if n is FuncDef
        self.errors.setFunction(fdef.name)
        checkTypeSameness(accessorType(fdef), accessorType(n as FuncDef), defn,
                          GetterTypeIncompatibleWithSetter)
        self.errors.setFunction(nil)
      end
    end
    
    -- Omit the rest of type checking if function has no type signature.
    if defn.type == nil
      return nil
    end
    
    if fdef != nil
      self.errors.setFunction(fdef.name)
    end
    
    var type = defn.type.type
    if type is Callable or defn.isAccessor()
      checkFuncDefOnce(defn, type)
    else
      -- Check if the intersection type is overlapping.
      CheckIntersectionType(type as Intersection, self.msg, basicTypes(), defn)
      
      -- Must be an intersection type. Type check body once for each 
      -- intersection type item.
      for t in (type as Intersection).items()
        checkFuncDefOnce(defn, t)
      end
      
      if not isWithinFunction()
        checkCasts()
      end
    end
    
    if fdef != nil
      self.errors.setFunction(nil)    
    end
  end
  
  -- Check the body of a function once for a particular ordinary type signature
  -- (no intersection type). Intersection types can be checked by calling this
  -- method repeatedly.
  private def checkFuncDefOnce(defn as FuncBase, type as Typ)
    -- We may be checking a function definition or an anonymous function. In
    -- the first case, set up another reference with the precise type.
    var fdef = nil as FuncDef
    if defn is FuncDef
      fdef = defn as FuncDef
    end
    
    enter()
    
    if fdef != nil
      if fdef.info != nil
        checkMethodOrAccessorOverride(fdef)
      end
      -- The cast below will work since non-method create will cause semantic
      -- analysis to fail, and type checking won't be done.
      if fdef.info != nil and fdef.name =="create" and 
           not (type as Callable).retType is Void
        fail(CreateMustNotHaveReturnType, defn.type)
      end
    end
    
    -- Push return type.
    if defn.isAccessor()
      if fdef.isGetter
        self.returnTypes.append(type)
      elif fdef.isSetter
        self.returnTypes.append(Void(nil))
      end
    else    
      self.returnTypes.append((type as Callable).retType)
    end
    
    -- Add arguments to symbol table.
    if not defn.isAccessor()
      var ctype = (type as Callable)
      var nargs = defn.args.length()
      for i in 0 to ctype.argTypes.length()
        var argType = ctype.argTypes[i]
        if defn.isVarArg and i == nargs - 1
          argType = namedGenericType("std::Array", [argType])
        end
        addVar(defn.args[i], Ldef, argType)
      end
      
      -- Some arguments may have been omitted, if the function has an 
      -- intersection type with different argument counts. Add the rest of
      -- the arguments with nil types.
      for i in ctype.argTypes.length() to nargs
        addVar(defn.args[i], Ldef, NilType())
      end
    elif fdef.isSetter
      addVar(defn.args[0], Ldef, type)
    end
    
    -- Type check initialization expressions.
    for i in 0 to defn.init.length()
      if defn.init[i] != nil
        accept(defn.init[i])
      end
    end
    
    -- Type check body.
    for s in defn.body
      accept(s)
    end
    
    -- Pop return type.
    self.returnTypes.removeAt(-1)

    leave()
  end
  
  -- Report any invalid casts. Analyse casts that have been collected when 
  -- type checking a function.
  private def checkCasts() as void
    for node, errors in self.castStatus
      for targetType, sourceType in errors
        self.msg.invalidCast(targetType, sourceType, node)
      end
    end
  
    -- Clear cast status.
    self.castStatus = Map()
  end
  
  -- Type check a type definition (class or interface).
  def visitTypeDef(defn as TypeDef) as Typ
    enter()
    
    var type = lookup(defn.fullName, Gdef).node
    addMembersToSymbolTable(type as TypeInfo)
    
    self.errors.setType(defn.name, defn.isInterface)
    
    checkSubtypeRelationships(type as TypeInfo)
    
    for d in defn.defs
      accept(d)
    end
    
    self.errors.setType(nil, False)
    
    leave()
  end
  
  -- Check that the subtype relationship between a type and its supertypes
  -- is valid. Also update the isInvalidSubtypeRelationship member variable.
  def checkSubtypeRelationships(type as TypeInfo)
    self.isInvalidSubtypeRelationship = False
  
    -- Nothing to do if the type is not generic.
    if type.typeVars == []
      return
    end
  
    -- Check if the type defines additional type variables that are not mapped
    -- to any supertype type variable (unless supertype is Object). 
    -- 
    -- Report this as an error, since the runtime type checker cannot deal 
    -- with this case. When calling a method via a supertype reference, 
    -- runtime values for type variables defined in subtype, but which are 
    -- independent of supertype variables, cannot be determined.
    if type.base != nil and type.base.fullName != 'std::Object'
      if type.base.typeVars == []
        self.msg.genericTypeInheritsNonGeneric(type.base, type)
        self.isInvalidSubtypeRelationship = True
        return
      end
      
      -- Stop if invalid number of arguments; the error will be reported by
      -- someone else.
      if type.bases == [] or type.bases[0] == nil
        self.isInvalidSubtypeRelationship = True
        return
      end
      
      for tvi in 0 to type.typeVars.length()
        -- If we cannot map to type variable from a supertype type variable,
        -- report an error. Note that this applies only overriding; thus 
        -- interfaces need not be checked.
        if GetSupertypeToSubtypeTvarRelation(type.base, type, tvi + 1) == nil
          self.isInvalidSubtypeRelationship = True
          self.msg.typeVariableIsNotMappedToSupertype(
            type.typeVars[tvi], type.base, type)
        end
      end
    end
  end
  
  -- Check that function definition is compatible with any overridden 
  -- definitions defined in superclasses or implemented interfaces.
  def checkMethodOrAccessorOverride(defn as FuncDef)
    checkMethodOrAccessorOverrideForBase(defn, defn.info.base)
    for iface in defn.info.interfaces
      checkMethodOrAccessorOverrideForBase(defn, iface)
    end
    if defn.type != nil
      checkPartialTypeVarMatchesInOverride(defn.name, defn.type.type, 
                                           defn.info, defn)
    end
  end
  
  -- Check that function definition is compatible with any overridden 
  -- definition in the specified supertype.
  def checkMethodOrAccessorOverrideForBase(defn as FuncDef, base as TypeInfo)
    if base != nil
      if defn.isAccessor()
        -- Check accessor override.
        var n as AccessorNode
        if defn.isGetter
          n = base.getPublicVarOrGetter(defn.name)
        else
          n = base.getPublicVarOrSetter(defn.name)
        end
        if n != nil and n.info == base
          checkAccessorType(defn, accessorType(n), n.info as TypeInfo)
        end
      elif defn.name != "create"
        -- Check method override (create is special).
        var baseMethod = base.getPublicMethod(defn.name)
        if baseMethod != nil and baseMethod.info == base
          -- There is an overridden method in the supertype.
          
          -- Construct the type of the overriding method.
          var type = functionType(defn)
          -- Map the overridden method type to subtype context so that it
          -- can be checked for compatibility. Note that multiple types from
          -- multiple implemented interface instances may be present.
          for originalType in mapAllTypesFromSupertype(
                                functionType(baseMethod), defn.info, base)
            -- Check that the types are compatible.
            checkOverride(type, originalType as FunctionLike, defn.name, 
                          baseMethod.info.name, defn)
          end
        end
      end
      
      -- Also check interface implementations.
      for iface in base.interfaces
        checkMethodOrAccessorOverrideForBase(defn, iface)
      end
      
      -- We have to check that the member is compatible with all supertypes
      -- due to the dynamic type. Otherwise we could first override with 
      -- dynamic and then with an arbitary type.
      checkMethodOrAccessorOverrideForBase(defn, base.base)
    end
  end
  
  -- Check that the type of accessor defn is compatible with type baseType
  -- defined in the given base class.
  def checkAccessorType(defn as FuncDef, baseType as Typ, baseNode as TypeInfo)
    -- Map the type of the overridden variable to subtype context so that it
    -- can be checked for compatibility.
    for originalType in mapAllTypesFromSupertype(baseType, defn.info, baseNode)
      if not IsEquivalent(defn.type.type, originalType)
        self.msg.typeIncompatibleWithSupertype(defn.name, baseNode, defn.type)
      end
    end
  end
  
  -- Check a method override with given signatures. 
  --
  --  override:  The signature of the overriding method.
  --  original:  The signature of the original supertype method.
  --  name:      The name of the subtype. This and the next argument are 
  --             only used for generating error messages.
  --  supertype: The name of the supertype. 
  def checkOverride(override as FunctionLike, original as FunctionLike, 
                    name as Str, supertype as Str, node as Context)
    if override is Intersection or original is Intersection or
       (override as Callable).argTypes.length() != 
         (original as Callable).argTypes.length() or
       (override as Callable).minArgs != (original as Callable).minArgs
      if not IsSubtype(override, original)
        self.msg.signatureIncompatibleWithSupertype(name, supertype, node)
      end
      return
    else
      -- Give more detailed messages for the common case of both signatures 
      -- having the same number of arguments and no intersection types.
      
      var coverride = (override as Callable)
      var coriginal = (original as Callable)
      
      for i in 0 to coverride.argTypes.length()
        if not IsSubtype(coriginal.argTypes[i], coverride.argTypes[i])
          self.msg.argumentIncompatibleWithSupertype(i + 1, name, supertype,
                                                     node)
        end
      end
      
      if not IsSubtype(coverride.retType, coriginal.retType)
        self.msg.returnTypeIncompatibleWithSupertype(name, supertype, node)
      end
    end
  end
  
  -- Check that a type of an override doesn't have partial matches to 
  -- supertype type variables. For example, if A<T> inherits B<X<T>>, just T 
  -- in the signature of a method override is not valid: it must be X<T>. This
  -- limitation simplifies runtime type checking; otherwise this would not be 
  -- necessary.
  def checkPartialTypeVarMatchesInOverride(
                             member as Str, type as Typ, 
                             info as TypeInfo, context as Context)
    -- Skip if the current type has an invalid subtype relationship. This is
    -- done to avoid duplicate error messages in some cases.
    if isInvalidSubtypeRelationship
      return
    end
    
    -- A partial type variable match is only relevant if a generic class 
    -- inherits another class (other than Object).
    if info.typeVars != [] and info.base != nil and 
       info.base.fullName != "std::Object"
      -- Need to perform the check if this is an override. 
      var n = FindOriginalMemberDefinition(info, member)
      if n != nil
        -- Yes, it's an override. Now perform the check by trying to translate
        -- the type to supertypes, up to and including the type containing the
        -- overridden definition.
        try
          MapTypeToSupertype(type, info, n.info)
        except SupertypeMapError
          self.msg.incompleteTypeVarMatch(member, context)
        end
      end
      -- This does not affect interfaces, since interfaces don't have 
      -- implementations and thus their definitions cannot be properly 
      -- overridden.
    end
  end
  
  -- Add all the members of a type to the symbol table (including inherited
  -- members). 
  def addMembersToSymbolTable(type as TypeInfo)
    for n in type.vars.values() + type.methods.values() + 
             type.getters.values() + type.setters.values()
      addVar(n, Mdef)
    end
    while type.base != nil
      type = type.base
      for n in type.vars.values() + type.methods.values() +
               type.getters.values() + type.setters.values()
        if not n.isPrivate
          addVar(n, Mdef)
        end
      end
    end
  end
  
  
  -- Statements
  -------------
  
  
  -- Type check an assignment statement. Handle all kinds of assignment 
  -- statements (simple, indexed, multiple).
  def visitAssignmentStmt(s as AssignmentStmt) as Typ
    -- Collect lvalue types. Index lvalue require special consideration, since
    -- we cannot typecheck them until we known the rvalue type.
    var lvalueTypes = [] as <Typ>    -- May be nil
    var indexLvalueTypes = [] as <(Typ, Typ)> -- Base and index types (or nil)
    
    for lv in s.lvalues
      if lv is IndexLvalue
        var ilv = (lv as IndexLvalue)
        lvalueTypes.append(nil)
        indexLvalueTypes.append((accept(ilv.base), accept(ilv.index)))
      else
        lvalueTypes.append(accept(lv))
        indexLvalueTypes.append(nil)
      end
    end
    
    var rvalueType = accept(s.rvalue)
    
    if not s.isExpand
      -- Single lvalue.
      checkAssignment(lvalueTypes[0], indexLvalueTypes[0], rvalueType,
                      s.rvalue)
    else
      checkMultiAssignment(lvalueTypes, indexLvalueTypes, rvalueType, s.rvalue)
    end
  end
  
  -- Type check multiple assignment. For each separate sub-assignment i, 
  -- exactly one of lvaluesTypes[i] and indexLvalueTypes[i] must be non-nil;
  -- this determines whether that particular assignment is an ordinary 
  -- assignment or an indexed assignment. See checkIndexedAssignment for a 
  -- description of the indexLvalueTypes argument.
  private def checkMultiAssignment(lvalueTypes as Array<Typ>, 
                                   indexLvalueTypes as Array<(Typ, Typ)>, 
                                   rvalueType as Typ,
                                   context as Context,
                                   msg = IncompatibleTypesInAssignment as Str)
    -- Try to expand rvalue to lvalue(s).
    if rvalueType is Dynamic
      -- Rvalue with dynamic type. Always succeed.
    elif rvalueType is TupleType
      -- Rvalue with tuple type.
      var trvalue = (rvalueType as TupleType)
      if trvalue.items.length() != lvalueTypes.length()
        self.msg.incompatibleValueCountInAssignment(
          lvalueTypes.length(), trvalue.items.length(), context)
      else
        -- The number of values is compatible. Check their types.
        for i in 0 to lvalueTypes.length()
          checkAssignment(lvalueTypes[i], indexLvalueTypes[i], 
                          trvalue.items[i], context, msg)
        end
      end    
    elif rvalueType is Instance and 
         (rvalueType as Instance).type.fullName == "std::Array"
      -- Rvalue with Array type.
      var itemType = (rvalueType as Instance).args[0]
      for i in 0 to lvalueTypes.length()
        checkAssignment(lvalueTypes[i], indexLvalueTypes[i], itemType, context,
                        msg)
      end
    else
      fail(msg, context)
    end
  end
  
  -- Type check an assignment. Exactly one of lvalueType and indexLvalueType
  -- must be non-nil; this determines whether to check an ordinary assignment
  -- or an indexed assignment. See checkIndexedAssignment for a description of
  -- the indexLvalueType argument.
  private def checkAssignment(lvalueType as Typ, 
                              indexLvalueType as (Typ, Typ), 
                              rvalueType as Typ, context as Context,
                              msg = IncompatibleTypesInAssignment as Str)
    if lvalueType != nil
      checkSubtype(rvalueType, lvalueType, context, msg)
    else
      checkIndexedAssignment(indexLvalueType, rvalueType, context)
    end
  end
  
  -- Type check indexed assignment base[index] = rvalue. The lvalueTypes 
  -- argument is the tuple (base type, index type), the rvaluaType is the type
  -- of the rvalue. None of the types should be collapsed (?).
  private def checkIndexedAssignment(
                  lvalueTypes as (Typ, Typ), 
                  rvalueType as Typ, context as Context) as Typ
    var methodType = self.exprChecker.analyseExternalMemberAccess(
                       "_set", lvalueTypes[0], context)
    return self.exprChecker.checkCall(methodType, [lvalueTypes[1], rvalueType],
                                      context)
  end
  
  -- Type check an expression statement.
  def visitExpressionStmt(s as ExpressionStmt) as Typ
    accept(s.expr)
  end
  
  -- Type check an operator assignment statement, e.g. x += 1.
  def visitOperatorAssignmentStmt(s as OperatorAssignmentStmt) as Typ
    var rightType = accept(s.rvalue)
    var lvalueType = accept(s.lvalue)
    var rvalueType = self.exprChecker.checkOp(OpMethods[s.op], 
                                              lvalueType, rightType, s)
    
    if s.lvalue is IndexLvalue
      var lv = (s.lvalue as IndexLvalue)
      checkAssignment(nil, (accept(lv.base), accept(lv.index)), rvalueType,
                      s.rvalue)
    else
      if not IsSubtype(rvalueType, lvalueType)
        self.msg.incompatibleOperatorAssignment(s.op, s)
      end
    end
  end
  
  -- Type check a return statement.
  def visitReturnStmt(s as ReturnStmt) as Typ
    if isWithinFunction()
      if s.expr != nil
        -- Return with a value.
        var type = accept(s.expr)
        -- Returning a value of type dynamic is always fine.
        if not type is Dynamic
          if self.returnTypes[-1] is Void
            fail(NoReturnValueExpected, s)
          else
            checkSubtype(type, self.returnTypes[-1], s, 
                         IncompatibleReturnValueType)
          end
        end
      else
        -- Return without a value.
        if not self.returnTypes[-1] is Void
          fail(ReturnValueExpected, s)
        end
      end
    end
  end
  
  -- Type check an if statement.
  def visitIfStmt(s as IfStmt) as Typ
    for e in s.expr
      var type = accept(e)
      checkBoolean(type, e, BooleanExpectedForIf)
    end
    for b in s.body
      acceptBlock(b)
    end
    acceptBlock(s.elseBody)
  end
  
  -- Type check a while statement.
  def visitWhileStmt(s as WhileStmt) as Typ
    var type = accept(s.expr)
    checkBoolean(type, s.expr, BooleanExpectedForWhile)
    acceptBlock(s.body)
  end
  
  -- Type check a repeat statement.
  def visitRepeatStmt(s as RepeatStmt) as Typ
    var type = accept(s.expr)
    checkBoolean(type, s.expr, BooleanExpectedForUntil)
    acceptBlock(s.body)
  end
  
  -- Type check a raise statement.
  def visitRaiseStmt(s as RaiseStmt) as Typ
    var type = accept(s.expr)
    checkSubtype(type, namedType("std::Exception"), s, InvalidExceptionType)
  end
  
  -- Type check a try-except statement.
  def visitTryExceptStmt(s as TryExceptStmt) as Typ
    acceptBlock(s.body)
    for i in 0 to s.handlers.length()
      enter()
      if s.vars[i] != nil
        addVar(s.vars[i], Ldef)
      end
      acceptBlock(s.handlers[i])
      leave()
    end
  end
  
  -- Type check a try-finally statement.
  def visitTryFinallyStmt(s as TryFinallyStmt) as Typ
    acceptBlock(s.body)
    acceptBlock(s.finallyBody)
  end
  
  -- Type check a switch statement.
  def visitSwitchStmt(s as SwitchStmt) as Typ
    checkNotVoid(accept(s.expr), s)
    for c in s.cases
      for e in c
        checkNotVoid(accept(e), e)
      end
    end
    for b in s.bodies
      acceptBlock(b)
    end
  end
  
  -- Type check a for statement.
  def visitForStmt(s as ForStmt) as Typ
    var iterable = accept(s.expr)
    
    checkNotVoid(iterable, s.expr)
    checkSubtype(iterable, namedGenericType("std::Iterable", [Dynamic()]), 
                 s.expr, IterableExpected)
    
    var method as Typ
    
    var echk = self.exprChecker
    method = echk.analyseExternalMemberAccess("iterator", iterable, s.expr)
    var iterator = echk.checkCall(method, [], s.expr)
    method = echk.analyseExternalMemberAccess("next", iterator, s.expr)
    var item = echk.checkCall(method, [], s.expr)
    
    enter()
    
    for i in 0 to s.index.length()
      addVar(s.index[i], Ldef)
    end
    
    if not s.isAnnotated()
      inferLocalVariableType(s.index, item, s)
    end
    
    if s.index.length() == 1
      if s.index[0].type != nil
        checkAssignment(s.index[0].type.type, nil, item, s, 
                        IncompatibleTypesInFor)
      end
    else
      var t = [] as <Typ>
      for index in s.index
        if index.type != nil
          t.append(index.type.type)
        else
          t.append(Dynamic())
        end
      end
      checkMultiAssignment(t, [nil] * s.types.length(), item, s.expr,
                           IncompatibleTypesInFor)
    end
    
    acceptBlock(s.body)
    
    leave()
  end
  
  
  -- Expressions
  --------------
  
  
  -- Expresion type checking is handled by ExpressionChecker.
  
  
  def visitNameLvalue(n as NameLvalue) as Typ
    return self.exprChecker.visitNameLvalue(n)
  end
  
  def visitNameExpr(e as NameExpr) as Typ
    return self.exprChecker.visitNameExpr(e)
  end
  
  def visitMemberLvalue(e as MemberLvalue) as Typ
    return self.exprChecker.visitMemberLvalue(e)
  end
  
  def visitMemberExpr(e as MemberExpr) as Typ
    return self.exprChecker.visitMemberExpr(e)
  end
  
  def visitSelfExpr(e as SelfExpr) as Typ
    return self.exprChecker.visitSelfExpr(e)
  end
  
  def visitParenExpr(e as ParenExpr) as Typ
    return self.exprChecker.visitParenExpr(e)
  end
  
  def visitNilExpr(e as NilExpr) as Typ
    return self.exprChecker.visitNilExpr(e)
  end
  
  def visitIntExpr(e as IntExpr) as Typ
    return self.exprChecker.visitIntExpr(e)
  end
  
  def visitStrExpr(e as StrExpr) as Typ
    return self.exprChecker.visitStrExpr(e)
  end
  
  def visitFloatExpr(e as FloatExpr) as Typ
    return self.exprChecker.visitFloatExpr(e)
  end
  
  def visitCallExpr(e as CallExpr) as Typ
    return self.exprChecker.visitCallExpr(e)
  end
  
  def visitOpExpr(e as OpExpr) as Typ
    return self.exprChecker.visitOpExpr(e)
  end
  
  def visitCastExpr(e as CastExpr) as Typ
    return self.exprChecker.visitCastExpr(e)
  end
  
  def visitUnaryExpr(e as UnaryExpr) as Typ
    return self.exprChecker.visitUnaryExpr(e)
  end
  
  def visitIndexLvalue(e as IndexLvalue) as Typ
    return self.exprChecker.visitIndexLvalue(e)
  end
  
  def visitIndexExpr(e as IndexExpr) as Typ
    return self.exprChecker.visitIndexExpr(e)
  end
  
  def visitArrayExpr(e as ArrayExpr) as Typ
    return self.exprChecker.visitArrayExpr(e)
  end
  
  def visitTupleExpr(e as TupleExpr) as Typ
    return self.exprChecker.visitTupleExpr(e)
  end
  
  def visitSuperLvalue(e as SuperLvalue) as Typ
    return self.exprChecker.visitSuperLvalue(e)
  end
  
  def visitSuperExpr(e as SuperExpr) as Typ
    return self.exprChecker.visitSuperExpr(e)
  end
  
  def visitFuncExpr(e as FuncExpr) as Typ
    return self.exprChecker.visitFuncExpr(e)
  end
  
  def visitTypeApplication(e as TypeApplication) as Typ
    return self.exprChecker.visitTypeApplication(e)
  end  
  
  
  -- Helpers
  ----------
  
  
  -- Return the signature of a function.
  def functionType(func as FuncBase) as FunctionLike
    if func.type != nil
      return func.type.type as FunctionLike
    else
      -- Implicit type signature with dynamic types.
      return Callable([Dynamic()] * func.args.length(),
                      func.minArgs,
                      False,     -- Not vararg
                      Dynamic(), -- Return type
                      False,     -- Not a type object
                      nil)       -- Name
    end    
  end
  
  -- Return the type of a getter, a setter or a variable.
  def accessorType(acc as AccessorNode) as Typ
    if acc.type != nil
      return acc.type.type
    else
      -- Implicit dynamic type.
      return Dynamic()
    end
  end  
  
  -- Generate an error if the subtype is not compatible with supertype.
  def checkSubtype(subtype as Typ, supertype as Typ, context as Context, 
                   msg = IncompatibleTypes as Str)
    if not IsSubtype(subtype, supertype)
      if subtype is Void
        self.msg.doesNotReturnValue(subtype, context)
      else
        fail(msg, context) 
      end
    end
  end
  
  -- Generate an error if the type is not compatible with std::Boolean.
  def checkBoolean(type as Typ, context as Context, 
                   msg = BooleanValueExpected as Str)
    checkSubtype(type, booleanType(), context, msg)
  end
  
  -- Generate an error if the type is Void.
  def checkNotVoid(type as Typ, context as Context)
    if type is Void
      self.msg.doesNotReturnValue(type, context)
    end
  end
  
  -- Return instance type std::Object.
  def objectType() as Instance
    return namedType("std::Object")
  end
  
  -- Return instance type std::Boolean.
  def booleanType() as Instance
    return namedType("std::Boolean")
  end
  
  -- Return instance type std::Int.
  def intType() as Instance
    return namedType("std::Int")
  end
  
  -- Return instance type std::Type.
  def typeType() as Instance
    return namedType("std::Type")
  end
  
  -- Return instance type std::Tuple.
  def tupleType() as Instance
    return namedType("std::Tuple")
  end
  
  -- Return a BasicTypes instance that contains primitive types that are
  -- needed for certain type operations (joins, for example).
  def basicTypes() as BasicTypes
    return BasicTypes(objectType(), typeType(), 
                      namedTypeIfExists("std::Tuple"),
                      namedTypeIfExists("std::Function"))
  end
  
  -- Generate an error if the types are not equivalent. The dynamic type is
  -- equivalent with all types.
  def checkTypeEquivalency(t1 as Typ, t2 as Typ, node as Context, 
                           msg = IncompatibleTypes as Str)
    if not IsEquivalent(t1, t2)
      fail(msg, node)
    end
  end
  
  -- Generate an error if the types are not the same. The dynamic type is only
  -- the same as dynamic, unlike with equivalency.
  def checkTypeSameness(t1 as Typ, t2 as Typ, node as Context, 
                        msg = IncompatibleTypes as Str)
    if not IsSameType(t1, t2)
      fail(msg, node)
    end
  end
  
  -- Are we currently type checking within a function (i.e. not at class body
  -- or at the top level)?
  def isWithinFunction() as Boolean
    return self.returnTypes != []
  end
  
  -- Like MapTypeFromSupertype, but return all the possible types. More than
  -- one type can only be returned if a generic interface is implemented 
  -- multiple times.
  def mapAllTypesFromSupertype(type as Typ, subInfo as TypeInfo, 
                               superInfo as TypeInfo) as Array<Typ>
    var instType = SelfType(subInfo)
    var result = [] as <Typ>
    for mappedType in MapInstanceToSupertypes(instType, superInfo)
      result.append(ExpandTypeByInstance(type, mappedType))
    end
    return result
  end
  
  -- Store the type of a node in the type map.
  def storeType(node as Node, type as Typ)
    self.typeMap[node] = type
  end
  
  -- Type check a node. The context argument is not used currently.
  def accept(node as Node, context = nil as Typ) as Typ
    self.typeContext.append(context)
    var type = node.accept(self)
    self.typeContext.removeAt(-1)
    storeType(node, type)
    return type
  end
  
  -- Type check a block. Enter and leave a new scope implicitly.
  def acceptBlock(block as Array<Node>)
    if block != nil
      enter()
      for stmt in block
        accept(stmt)
      end
      leave()
    end
  end
  
  -- Return an instance type with type given by the name and no type arguments.
  -- For example, namedType("std::Object") produces the Object type.
  def namedType(name as Str) as Instance
    -- Assume that the name refers to a type.
    var sym = lookup(name, Gdef)
    return Instance(sym.node as TypeInfo, [])
  end
  
  -- Return named instance type, or UnboundType if the type was not defined.
  --
  -- This is used to simplify test cases by avoiding the need to define basic 
  -- types not needed in specific test cases (std::Function etc.).
  def namedTypeIfExists(name as Str) as Typ
    try
      -- Assume that the name refers to a type.
      var sym = lookup(name, Gdef)
      return Instance(sym.node as TypeInfo, [])
    except KeyError
      return UnboundType(name)
    end
  end
  
  -- Return an instance with the given name and type arguments. Assume that
  -- the number of arguments is correct.
  def namedGenericType(name as Str, args as Array<Typ>, 
                       tops = nil as Array<Typ>) as Instance
    -- Assume that the name refers to a compatible generic type.
    var sym = lookup(name, Gdef)
    return Instance(sym.node as TypeInfo, args, tops)
  end
  
  -- Look up a definition from the symbol table with the given name and kind.
  -- If multiple definitions with the name are present, find the one with the
  -- requested kind.
  def lookup(fullName as Str, kind as Constant) as SymbolTableNode
    var name = fullName.split("::")[-1]
    var syms = self.symtable[name]
    for sym in syms
      if sym.kind == kind
        if sym.modId != nil and sym.modId + "::" + name == fullName
          return sym
        elif sym.modId == nil and name == fullName
          return sym
        end
      end
    end
    raise KeyError("Failed lookup: {}".format(fullName))
  end
  
  -- Enter a new block scope.
  def enter() as void
    -- Add a marker
    self.stack.append(nil)
  end
  
  -- Leave a block scope. Remove any local variables defined in the current
  -- scope from the symbol table.
  def leave() as void
    while self.stack[-1] != nil
      var name = self.stack.removeAt(-1)
      self.symtable[name].removeAt(-1)
    end
    self.stack.removeAt(-1)
  end
  
  -- Add a variable to symbol table. Kind is Ldef/...
  def addVar(node as Var, kind as Constant, type = nil as Typ)
    var name = node.name
    self.stack.append(name)
    self.symtable.add(name, SymbolTableNode(kind, node, nil, type))
  end
  
  
  -- Error messages
  -----------------
  
  
  -- Produce an error message.
  def fail(msg as Str, context as Context)
    self.msg.fail(msg, context)
  end
end
