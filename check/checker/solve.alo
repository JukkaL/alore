module checker

-- Type inference constraint solver

import types


-- Solve type constraints. Return tuple (lower bound, upper bound) for each
-- type variable or nil if the variable could not be solved.
def SolveConstraints(vars as Array<Int>, constraints as Array<Constraint>,
                     basic as BasicTypes) as Array<(Typ, Typ)>
  -- Collect a list of constraints for each type variable.
  var cmap = Map() as <Int, Array<Constraint>>
  for c in constraints
    var a = cmap.get(c.typeVar, [])
    a.append(c)
    cmap[c.typeVar] = a
  end
  
  var res = [] as <(Typ, Typ)>
  
  -- Solve each type variable separately.
  for tvar in vars
    var bottom = nil as Typ
    var top = nil    as Typ
    
    -- Process each contraint separely, and calculate the lower and upper
    -- bounds based on constraints. Note that we assume that the contraint
    -- targets do not have contraint references.
    for c in cmap.get(tvar, [])
      if c.op == SupertypeOf
        if bottom == nil
          bottom = c.target
        else
          bottom = JoinTypes(bottom, c.target, basic)
        end
      else
        if top == nil
          top = c.target
        else
          top = MeetTypes(top, c.target, basic)
        end
      end
    end
    
    if top == nil
      if bottom is Void
        top = Void()
      else
        top = basic.object
      end
    end
      
    if bottom == nil
      if top is Void
        bottom = Void()
      else
        bottom = NilType()
      end
    end
    
    if top is Dynamic or bottom is Dynamic
      top = Dynamic()
      bottom = Dynamic()
    end
    
    -- Pick the most specific type if it satisfies the constraints.
    if (top == nil or bottom == nil or IsSubtype(bottom, top)) and
       not top is ErrorType and not bottom is ErrorType
      res.append((bottom, top))
    else
      res.append(nil)
    end
  end
  
  return res
end
