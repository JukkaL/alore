module nodes


-- A parse tree visitor that traverses the parse tree during visiting, but does
-- not peform any actions outside the travelsal. Subclasses should override
-- visit methods to perform actions during travelsal. Calling the superclass 
-- method allows reusing the travelsal implementation. 
class TraverserVisitor is NodeVisitor
  -- Helper methods
  
  def acceptBlock(block)
    visitBlock(block)
    for s in block
      s.accept(self)
    end
  end
  
  -- Visit methods

  def visitAloreFile(o)
    for d in o.defs
      d.accept(self)
    end
  end
  
  def visitEncoding(o)
  end
  
  def visitHeader(o)
  end
  
  def visitImport(o)
  end
  
  private def visitFunc(o)
    for i in o.init
      if i != nil
        i.accept(self)
      end
    end
    for v in o.args
      visitVar(v)
    end
    acceptBlock(o.body)
  end
  
  def visitFuncDef(o)
    visitFunc(o)
  end
  
  def visitTypeDef(o)
    for d in o.defs
      d.accept(self)
    end
  end
  
  def visitVarDef(o)
    if o.init != nil
      o.init.accept(self)
    end
    for v in o.names
      visitVar(v)
    end
  end
  
  def visitVar(o)
  end
  
  def visitAnnotation(o)
  end
  
  def visitBlock(o)
  end
  
  def visitExpressionStmt(o)
    o.expr.accept(self)
  end
  
  def visitAssignmentStmt(o)
    o.rvalue.accept(self)
    for l in o.lvalues
      l.accept(self)
    end
  end
  
  def visitOperatorAssignmentStmt(o)
    o.rvalue.accept(self)
    o.lvalue.accept(self)
  end
  
  def visitWhileStmt(o)
    o.expr.accept(self)
    acceptBlock(o.body)
  end
  
  def visitRepeatStmt(o)
    o.expr.accept(self)
    acceptBlock(o.body)
  end
  
  def visitForStmt(o)
    for ind in o.index
      ind.accept(self)
    end
    o.expr.accept(self)
    acceptBlock(o.body)
  end
  
  def visitReturnStmt(o)
    if o.expr != nil
      o.expr.accept(self)
    end
  end
  
  def visitIfStmt(o)
    for e in o.expr
      e.accept(self)
    end
    for b in o.body
      acceptBlock(b)
    end
    if o.elseBody != nil
      acceptBlock(o.elseBody)
    end
  end
  
  def visitBreakStmt(o)
  end
  
  def visitRaiseStmt(o)
    o.expr.accept(self)
  end
  
  def visitTryExceptStmt(o)
    acceptBlock(o.body)
    for i in 0 to o.types.length()
      o.types[i].accept(self)
      acceptBlock(o.handlers[i])
    end
  end
  
  def visitTryFinallyStmt(o)
    acceptBlock(o.body)
    acceptBlock(o.finallyBody)
  end
  
  def visitSwitchStmt(o)
    o.expr.accept(self)
    for c in o.cases
      for e in c
        e.accept(self)
      end
    end
    for b in o.bodies
      acceptBlock(b)
    end
  end
  
  -- Lvalue expressions.
  def visitNameLvalue(o)
  end
  
  def visitMemberLvalue(o)
    o.expr.accept(self)
  end
  
  def visitIndexLvalue(o)
    o.base.accept(self)
    o.index.accept(self)
  end
  
  def visitSuperLvalue(o)
  end
  
  -- This is called before and in addition to one of the following methods.
  def visitExpression(o)
  end
  def visitIntExpr(o)
  end
  def visitStrExpr(o)
  end
  def visitFloatExpr(o)
  end
  def visitNilExpr(o)
  end
  def visitSelfExpr(o)
  end
  def visitNameExpr(o)
  end
  
  def visitParenExpr(o)
    o.expr.accept(self)
  end
  
  def visitMemberExpr(o)
    o.expr.accept(self)
  end
  
  def visitCallExpr(o)
    for a in o.args
      a.accept(self)
    end
    o.callee.accept(self)
  end
  
  def visitOpExpr(o)
    o.left.accept(self)
    o.right.accept(self)
  end
  
  def visitCastExpr(o)
    o.expr.accept(self)
    o.typeName.accept(self)
  end
  
  def visitUnaryExpr(o)
    o.expr.accept(self)
  end
  
  def visitArrayExpr(o)
    for item in o.items
      item.accept(self)
    end
  end
  
  def visitTupleExpr(o)
    for item in o.items
      item.accept(self)
    end
  end
  
  def visitIndexExpr(o)
    o.base.accept(self)
    o.index.accept(self)
  end
  
  def visitSuperExpr(o)
  end
  
  def visitTypeApplication(o)
    o.expr.accept(self)
  end
  
  def visitFuncExpr(o)
    visitFunc(o)
  end

  -- These are for convenience. These node types are not defined in the parser 
  -- module.
  def visitFilterNode(o)
  end
end