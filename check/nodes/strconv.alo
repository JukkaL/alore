module nodes

import util
import os


-- Visitor for converting a Node to a human-readable string.
--
-- For example, an AloreFile node from program "var x" is converted into
-- something like this:
--   AloreFile:1(
--     fnam
--     VarDef:1(
--       Var(x)))
private class StrConv is NodeVisitor<Str>
  -- Convert an array of items to a multiline pretty-printed string. The tag
  -- is produced from the type name of obj and its line number. See 
  -- util::DumpTagged for a description of the nodes argument. 
  private def dump(nodes, obj)
    return DumpTagged(nodes, TypeName(obj) + ":" + Str(obj.line))
  end
  
  -- Return an array in a format suitable for dump() that represents the
  -- arguments and the body of a function. The caller can then decorate the
  -- array with information specific to methods, global functions or 
  -- anonymous functions.
  private def funcHelper(o)
    var a = []
    if o.args != []
      a.append("Args" : o.args)
    end
    if o.type != nil
      a.append(o.type)
    end
    for i in o.init
      if i != nil
        a.append("Init" : o.init)
        break
      end
    end
    if o.isVarArg
      a.append("VarArg")
    end
    if o.body != []
      a.append("Body" : o.body)
    end
    return a
  end
  
  
  -- Top-level structures
  -----------------------
  

  def visitAloreFile(o)
    var a = [o.defs]
    if o.imports != []
      a.insertAt(0, o.imports)
    end
    if o.header != nil
      a.insertAt(0, o.header)
    end
    if o.enc != nil
      a.insertAt(0, o.enc)
    end
    if o.isBom
      a.insertAt(0, "BOM")
    end
    -- Omit path to special file with name "main". This is used to simplify
    -- test case descriptions; the file "main" is used by default in many test
    -- cases. 
    if o.path != nil and o.path != "main"
      -- Insert path. Normalize directory separators to / to unify test case
      -- output in all platforms.
      a.insertAt(0, o.path.replace(Separator, '/'))
    end
    return dump(a, o)
  end
  
  def visitEncoding(o)
    return "Encoding({})".format(o.id)
  end
  
  def visitHeader(o)
    return "Header(" + o.id + ")"
  end
  
  def visitImport(o)
    return "Import(" + o.id + ")"
  end
  
  
  -- Definitions
  --------------
  
  
  def visitFuncDef(o)
    var a = funcHelper(o)
    a.insertAt(0, o.name)
    if o.isPrivate
      a.insertAt(1, "Private")
    end
    if o.isGetter
      a.insertAt(1, "Getter")
    end
    if o.isSetter
      a.insertAt(1, "Setter")
    end
    return dump(a, o)
  end
  
  def visitTypeDef(o)
    var a = [o.name, o.defs]
    if o.isPrivate
      a.insertAt(1, "Private")
    end
    if o.binds != []
      a.insertAt(1, "Bind" : o.binds)
    end
    if o.implement != []
      a.insertAt(1, "Implements" : o.implement)
    end
    if o.baseTypes != [nil] * o.baseTypes.length()
      a.insertAt(1, "BaseType" : o.baseTypes)
    end
    if o.typeVars != nil
      a.insertAt(1, "TypeVars" : o.typeVars.items)
    end
    if o.base != nil and o.base.fullName != "std::Object"
      a.insertAt(1, o.base)
    end
    if o.isInterface
      a.insertAt(1, "Interface")
    end
    return dump(a, o)
  end
  
  def visitVarDef(o)
    var a = [o.names]
    if o.init != nil
      a.append(o.init)
    end
    if o.type != nil
      a.append(o.type)
    end
    if o.isConst
      a.append("Const")
    end
    if o.isPrivate
      a.append("Private")
    end
    return dump(a, o)
  end
  
  def visitVar(o)
    var l = ""
    -- Add :nil line number tag if no line number is specified to remain
    -- compatible with old test case descriptions that assume this.
    if o.line < 0
      l = ":nil"
    end
    return "Var" + l + "(" + o.name + ")"
  end
  
  def visitAnnotation(o)
    return "Type:{}({})".format(o.line, o.type)
  end
  
  
  -- Statements
  -------------
  
  
  def visitBlock(o)
  end
  
  def visitExpressionStmt(o)
    return dump([o.expr], o)
  end
  
  def visitAssignmentStmt(o)
    return dump(["Lvalues" : o.lvalues, o.rvalue], o)
  end
  
  def visitOperatorAssignmentStmt(o)
    return dump([o.op, o.lvalue, o.rvalue], o)
  end
  
  def visitWhileStmt(o)
    return dump([o.expr, "Body" : o.body], o)
  end
  
  def visitRepeatStmt(o)
    return dump([o.expr, "Body" : o.body], o)
  end
  
  def visitForStmt(o)
    var a = [o.index]
    if o.types != [nil] * o.types.length()
      a += o.types
    end
    return dump(a + [o.expr, "Body" : o.body], o)
  end
  
  def visitReturnStmt(o)
    return dump([o.expr], o)
  end
  
  def visitIfStmt(o)
    var a = []
    for i in 0 to o.expr.length()
      a.append("If" : [o.expr[i]])
      a.append("Then" : o.body[i])
    end
  
    if o.elseBody == nil
      return dump(a, o)
    else
      return dump([a, "Else" : o.elseBody], o)
    end
  end
  
  def visitBreakStmt(o)
    return dump([], o)
  end
  
  def visitRaiseStmt(o)
    return dump([o.expr], o)
  end
  
  def visitTryExceptStmt(o)
    var a = ["Body" : o.body]
    
    for i in 0 to o.vars.length()
      a.append(o.types[i])
      if o.vars[i] != nil
        a.append(o.vars[i])
      end
      a.append("Body" : o.handlers[i])
    end
    
    return dump(a, o)
  end
  
  def visitTryFinallyStmt(o)
    return dump([o.body, o.finallyBody], o)
  end
  
  def visitSwitchStmt(o)
    var a = [o.expr]
    for i in 0 to o.cases.length()
      a.append("Case" : o.cases[i])
      a.append("Body" : o.bodies[i])
    end
    if o.bodies.length() > o.cases.length()
      a.append("Else" : o.bodies[-1])
    end
    return dump(a, o)
  end
  
  
  -- Expressions
  --------------
  
  
  -- Lvalue expressions
  
  def visitNameLvalue(o)
    return visitNameExpr(o)
  end
  
  def visitMemberLvalue(o)
    return dump([o.expr, o.name], o)
  end
  
  def visitIndexLvalue(o)
    return dump([o.base, o.index], o)
  end
  
  def visitSuperLvalue(o)
    return dump([o.name], o)
  end
  
  -- This is called before and in addition to one of the following methods.
  def visitExpression(o)
  end
  
  -- Simple expressions
  
  def visitIntExpr(o)
    return "IntExpr({})".format(o.value)
  end
  def visitStrExpr(o)
    return "StrExpr({})".format(o.value)
  end
  def visitFloatExpr(o)
    return "FloatExpr({})".format(o.value)
  end
  def visitNilExpr(o)
    return "NilExpr()"
  end
  def visitSelfExpr(o)
    return "SelfExpr()"
  end
  
  def visitParenExpr(o)
    return dump([o.expr], o)
  end
  
  def visitNameExpr(o)
    var n = o.name
    if o.kind == Gdef or (o.fullName != o.name and 
                          o.fullName != nil)
      -- Append fully qualified name for global references.
      n += " [{}]".format(o.fullName)
    elif o.kind == Ldef
      -- Add tag to signify a local reference.
      n += " [l]"
    elif o.kind == Mdef
      -- Add tag to signify a member reference.
      n += " [m]"
    end
    return TypeName(o) + "(" + n + ")"
  end
  
  def visitMemberExpr(o)
    return dump([o.expr, o.name], o)
  end
  
  def visitCallExpr(o)
    var a = [o.callee, "Args" : o.args]
    if o.isVarArg
      a.append("VarArg")
    end
    return dump(a, o)
  end
  
  def visitOpExpr(o)
    return dump([o.op, o.left, o.right], o)
  end
  
  def visitCastExpr(o)
    return dump([o.expr, o.typeName], o)
  end
  
  def visitUnaryExpr(o)
    return dump([o.op, o.expr], o)
  end
  
  def visitArrayExpr(o)
    return dump(o.items, o)
  end
  
  def visitTupleExpr(o)
    return dump(o.items, o)
  end
  
  def visitIndexExpr(o)
    return dump([o.base, o.index], o)
  end
  
  def visitSuperExpr(o)
    return dump([o.name], o)
  end
  
  def visitTypeApplication(o)
    return dump([o.expr, "Types" : o.types], o)
  end
  
  def visitFuncExpr(o)
    var a = funcHelper(o)
    return dump(a, o)
  end
  
  def visitCoerceExpr(o)
    return dump([o.expr, "Types" : [o.targetType, o.sourceType]], o)
  end
  
  def visitTypeExpr(o)
    return dump([Str(o.type)], o)
  end

  -- These are for convenience. These node types are not defined in the parser 
  -- module.
  def visitFilterNode(o)
  end
end
