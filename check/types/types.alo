module types

import nodes


-- Abstract base class for all types.
class Typ
  const line as Int
  const repr as dynamic

  def create(line = -1, repr = nil)
    self.line = line
    self.repr = repr
  end

  def accept<T>(visitor as TypeVisitor<T>) as T
    raise RuntimeError("Not implemented")
  end

  def _str() as Str
    return accept(TypeStrVisitor())
  end
end


-- Instance type that has not been bound during semantic analysis.
class UnboundType is Typ
  const name as Str
  const args as Array<Typ>

  def create(name as Str,
             args = [] as Array<Typ>,
             line = -1 as Int,
             repr = nil)
    self.name = name
    self.args = args
    super.create(line, repr)
  end

  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitUnboundType(self)
  end
end


-- The error type is only used as a result of join and meet operations, when
-- the result is undefined.
class ErrorType is Typ
  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitErrorType(self)
  end
end


-- The type "dynamic".
class Dynamic is Typ
  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitDynamic(self)
  end
end


-- The return type "void". This can only be used as the return type in a
-- callable type and as the result type of calling such callable.
class Void is Typ
  const source as Str   -- May be nil; function that generated this value

  def create(source = nil as Str, line = -1 as Int, repr = nil)
    self.source = source
    super.create(line, repr)
  end

  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitVoid(self)
  end

  def withSource(source as Str) as Void
    return Void(source, self.line, self.repr)
  end
end


-- The type of "nil". This is only used internally during type inference.
-- Programs cannot declare a variable of this type, and the type checker
-- refuses to infer this type for a variable. However, subexpressions often
-- have this type. Note that this is not used as the result type when calling
-- a function with a void type, even though semantically such a function
-- returns a nil value; the void type is used instead so that we can report an
-- error if the caller tries to do anything with the return value.
class NilType is Typ
  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitNilType(self)
  end
end


-- An instance type of form C<T1, ..., Tn>. Type variables Tn may be empty, and
-- each type variables can also be a range lower..upper (+ range id). If some
-- variables are ranges and others are collapsed, the collapsed types can be
-- represented by nils in argTops/rangeIds arrays.
class Instance is Typ
  const type as TypeInfo
  const args as Array<Typ>     -- Lower bounds
  const argTops as Array<Typ>  -- Upper bounds (or nil if collapsed)
  const rangeIds as Array<Int> -- Range ids (or nil if collapsed)

  def create(type as TypeInfo,
             args as Array<Typ>,
             argTops = nil as Array<Typ>,
             rangeIds = nil as Array<Int>,
             line = -1 as Int,
             repr = nil)
    self.type = type
    self.args = args
    self.argTops = argTops
    self.rangeIds = rangeIds
    super.create(line, repr)
  end

  def top(i as Int) as Typ
    if self.argTops != nil
      return self.argTops[i]
    else
      return self.args[i]
    end
  end

  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitInstance(self)
  end
end


-- A type variable type. This refers to either a class/interface type variable
-- (id > 0) or a function type variable (id < 0).
class TypeVar is Typ
  const name as Str -- Name of the type variable (for messages and debugging)
  const id   as Int -- 1, 2, ... for type-related, -1, ... for function-related

  -- True if refers to the value of the type variable stored in a generic
  -- instance wrapper. This is only relevant for generic class wrappers. If
  -- False (default), this refers to the type variable value(s) given as the
  -- implicit type variable argument.
  const isWrapperVar as Boolean

  def create(name as Str, id as Int, isWrapperVar = False as Boolean,
             line = -1 as Int, repr = nil)
    self.name = name
    self.id = id
    self.isWrapperVar = isWrapperVar
    super.create(line, repr)
  end

  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitTypeVar(self)
  end
end


-- Abstract base class for function types (Callable and Intersection).
class FunctionLike is Typ
  def isTypeObj as Boolean -- Abstract
  end

  def items() as Array<Callable> -- Abstract
  end

  def withName(name as Str) as Typ -- Abstract
  end
end


-- Type of a callable object (function). But see also Intersection below.
class Callable is FunctionLike
  const argTypes  as Array<Typ> -- Types of function arguments
  const minArgs   as Int        -- Minimum number of arguments
  const isVarArg  as Boolean    -- Is it a varargs function?
  const retType   as Typ        -- Return value type
  const name      as Str        -- Name (may be nil; for error messages)
  const variables as TypeVars   -- Type variables for a generic function

  -- Implicit bound values of type variables. These can be either for
  -- class/interfaces type variables or for generic function type variables.
  -- For example, the method 'append' of Array<Int> has implicit value Int for
  -- the Array type variable; the explicit method type is just
  -- 'def append(Int)', without any type variable. Implicit values are needed
  -- for runtime type checking, but they do not affect static type checking.
  --
  -- All class/interface type arguments must be stored first, ordered by id,
  -- and function type arguments must be stored next, again ordered by id
  -- (absolute value this time).
  --
  -- Stored as tuples (id, type).
  const boundVars as Array<(Int, Typ)>

  private const _isTypeObj as Boolean -- Does this represent a type object?

  def create(argTypes   as Array<Typ>,
             minArgs    as Int,
             isVarArg   as Boolean,
             retType    as Typ,
             isTypeObj  as Boolean,
             name = nil as Str,
             variables = TypeVars([]) as TypeVars,
             boundVars = [] as Array<(Int, Typ)>,
             line = -1      as Int,
             repr = nil)
    self.argTypes = argTypes
    self.minArgs = minArgs
    self.isVarArg = isVarArg
    self.retType = retType
    self._isTypeObj = isTypeObj
    self.name = name
    self.variables = variables
    self.boundVars = boundVars
    super.create(line, repr)
  end

  def isTypeObj as Boolean
    return self._isTypeObj
  end

  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitCallable(self)
  end

  -- Return a copy of this type with the specified name.
  def withName(name as Str) as Callable
    var ret = self.retType
    if ret is Void
      ret = (ret as Void).withSource(name)
    end
    return Callable(self.argTypes, self.minArgs, self.isVarArg, ret,
                    self.isTypeObj, name, self.variables, self.boundVars,
                    self.line, self.repr)
  end

  def maxFixedArgs as Int
    var n = self.argTypes.length()
    if isVarArg
      n -= 1
    end
    return n
  end

  def items() as Array<Callable>
    return [self]
  end

  def isGeneric() as Boolean
    return self.variables.items != []
  end

  def typeVarIds() as Array<Int>
    var a = [] as <Int>
    for tv in self.variables.items
      a.append(tv.id)
    end
    return a
  end
end


-- The tuple type (T1, ..., Tn).
class TupleType is Typ
  const items as Array<Typ>

  def create(items as Array<Typ>, line = -1 as Int, repr = nil)
    self.items = items
    super.create(line, repr)
  end

  def length() as Int
    return self.items.length()
  end

  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitTupleType(self)
  end
end


-- The intersection type T1 /\ T2. Both operands must be function-like types.
-- Note that the syntax for intersection types uses "or" instead of /\, since
-- that somehow feels more natural.
--
-- Note that there is some potential for confusion, since symbols associated
-- with "or" have been used by others (including obsolete development versions
-- of Alore) for union types. Since Alore only has intersection types, no
-- union types, this is unlikely to be a problem.
class Intersection is FunctionLike
  const item1 as FunctionLike
  const item2 as FunctionLike
  const name as Str  -- May be nil

  def create(item1 as FunctionLike,
             item2 as FunctionLike,
             name = nil as Str,
             line = -1 as Int,
             repr = nil)
    self.item1 = item1
    self.item2 = item2
    self.name = name
    super.create(line, repr)
  end

  def items() as Array<Callable>
    var a = [] as <Callable>
    for item in [self.item1, self.item2]
      if item is Intersection
        a += item.items()
      else
        a.append(item as Callable)
      end
    end
    return a
  end

  def isTypeObj as Boolean
    -- Both items must have the type object status, so it's sufficient to
    -- query only one of them.
    return self.item1.isTypeObj
  end

  def withName(name as Str) as Intersection
    return Intersection(self.item1, self.item2, name, self.line, self.repr)
  end

  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitIntersection(self)
  end
end


-- Representation of type variables of a function or type (i.e.
-- <T1 [is B1], ..., Tn [is Bn]>).
class TypeVars
  const items as Array<TypeVarDef>
  const repr

  def create(items as Array<TypeVarDef>, repr = nil)
    self.items = items
    self.repr = repr
  end

  def _str() as Str
    if self.items == []
      return ""
    end
    var a = [] as <Str>
    for v in self.items
      a.append(Str(v))
    end
    return "<{}>".format(", ".join(a))
  end
end


-- Definition of a single type variable, with an optional bound (for bounded
-- polymorphism).
class TypeVarDef
  const name  as Str
  const id    as Int
  const bound as Typ  -- May be nil
  const line  as Int
  const repr

  def create(name as Str, id as Int, bound = nil as Typ, line = -1 as Int,
             repr = nil)
    self.name = name
    self.id = id
    self.bound = bound
    self.line = line
    self.repr = repr
  end

  def _str() as Str
    if self.bound == nil
      return Str(self.name)
    else
      return "{} is {}".format(self.name, self.bound)
    end
  end
end


-- Reference to a runtime variable that represents the value of a type
-- variable. The reference can must be a expression node, but only some
-- node types are properly supported (NameExpr, SelfExpr, MemberExpr and
-- IndexExpr mainly).
class RuntimeTypeVar is Typ
  const node as Node

  def create(node as Node)
    self.node = node
    super.create(-1, nil)
  end

  def accept<T>(visitor as TypeVisitor<T>) as T
    return visitor.visitRuntimeTypeVar(self)
  end
end
