module types


-- Is "left" the same type as "right"?
def IsSameType(left as Typ, right as Typ) as Boolean
  if right is UnboundType
    -- Make unbound types same as anything else to reduce the number of
    -- generated spurious error messages.
    return True
  else
    return left.accept(SameTypeVisitor(right))
  end
end


private def IsSameTypes(a1 as Array<Typ>, a2 as Array<Typ>) as Boolean
  if a1.length() != a2.length()
    return False
  end
  for i in 0 to a1.length()
    if not IsSameType(a1[i], a2[i])
      return False
    end
  end
  return True
end


-- Visitor for checking whether two types are the "same" type.
private class SameTypeVisitor is TypeVisitor<Boolean>
  private var right as Typ

  def create(right as Typ)
    self.right = right
  end

  -- visitX(left) means: is left (which is an instance of X) the same type as
  -- right?

  def visitUnboundType(left as UnboundType) as Boolean
    return True
  end

  def visitErrorType(left as ErrorType) as Boolean
    return False
  end

  def visitDynamic(left as Dynamic) as Boolean
    return right is Dynamic
  end

  def visitVoid(left as Void) as Boolean
    return right is Void
  end

  def visitNilType(left as NilType) as Boolean
    return right is NilType
  end

  def visitInstance(left as Instance) as Boolean
    return right is Instance and left.type == (right as Instance).type and
           IsSameTypes(left.args, (right as Instance).args)
  end

  def visitTypeVar(left as TypeVar) as Boolean
    return right is TypeVar and left.id == (right as TypeVar).id and
           left.isWrapperVar == (right as TypeVar).isWrapperVar
  end

  def visitCallable(left as Callable) as Boolean
    -- FIX generics
    if right is Callable
      var cright = (right as Callable)
      return IsSameType(left.retType, cright.retType) and
             IsSameTypes(left.argTypes, cright.argTypes) and
             left.minArgs == cright.minArgs and
             left.isVarArg == cright.isVarArg and
             left.isTypeObj == cright.isTypeObj
    else
      return False
    end
  end

  def visitTupleType(left as TupleType) as Boolean
    if right is TupleType
      return IsSameTypes(left.items, (right as TupleType).items)
    else
      return False
    end
  end

  def visitIntersection(left as Intersection) as Boolean
    if right is Intersection
      return IsSameType(left.item1, (right as Intersection).item1) and
             IsSameType(left.item2, (right as Intersection).item2)
    else
      return False
    end
  end
end
