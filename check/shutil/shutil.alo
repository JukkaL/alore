module shutil

import os
import io
import time


private const BlockSize = 65536


const FileTarget,  -- Target must be a file, not a directory.
      Timestamps,  -- Preserve timestamps when copying.
      NoPerm       -- Do not preserve permissions when copying.


-- Copy a file.
def CopyFile(path, target, *flags)
  if IsDir(target) and not FileTarget in flags
    target = Join(target, BaseName(path))
  end
  
  var src = File(path, Unbuffered)
  try
    var dst = File(target, Output, Unbuffered)
    try
      while True
        var block = src.read(BlockSize)
        if block == ''
          break
        end
        dst.write(block)
      end
    finally
      dst.close()
    end
  finally
    src.close()
  end
  
  CopyStat(path, target, *flags)
end


-- Copy a directory recursively.
def CopyTree(source, target, *flags)
  var errors = []

  var names = ListDir(source)

  MakeDir(target)
  
  for name in names
    var sourcePath = Join(source, name)
    var targetPath = Join(target, name)
    try
      if IsLink(sourcePath)
        MakeSymLink(ReadSymLink(sourcePath), targetPath)
      elif IsDir(sourcePath)
        CopyTree(sourcePath, targetPath, *flags)
      else
        CopyFile(sourcePath, targetPath, FileTarget, *flags)
      end
    except e is Error
      errors.extend(e.errors)
    except e is IoError
      errors.append((sourcePath, targetPath, e))
    end
  end
  
  try
    CopyStat(source, target, *flags)
  except e is IoError
    errors.append((source, target, e))
  end
  
  if errors != []
    raise Error(errors)
  end
end


-- Remove a file or a directory recursively.
def RemoveTree(path)
  var errors = []

  try
    if IsDir(path) and not IsLink(path)
      var names = ListDir(path)
      for name in names
        var name2 = Join(path, name)
        try
          RemoveTree(name2)
        except e is Error
          errors.extend(e.errors)
        except e is IoError
          errors.append((nil, name2, e))
        end
      end
      Remove(path)
    else
      Remove(path)
    end
  except e is IoError
    errors.append((nil, path, e))
  end
  
  if errors != []
    raise Error(errors)
  end
end


-- Exception raised by tree operations that represents one or more IoError
-- instances.
class Error is IoError
  const errors
 
  def create(errors)
    self.errors = errors
    var msg = errors[0][2].message
    if errors.length() > 1
      var s = ""
      if errors.length() > 2
        s = "s"
      end
      msg += " (and {} additional error{})".format(errors.length() - 1, s)
    end
    super.create(msg)
  end
end


-- Copy file permissions and/or timestamps.
private def CopyStat(path, target, *flags)
  if not NoPerm in flags or Timestamps in flags
    var st = Stat(path)
    var stt = Stat(target)
    if not NoPerm in flags
      SetPerm(target,
              JoinPerm(st.ownerPerm, stt.ownerPerm),
              JoinPerm(st.otherPerm, stt.otherPerm),
              JoinPerm(st.groupPerm, stt.groupPerm))
    end
    if Timestamps in flags
      SetModificationTime(target, DateTime(st.modificationTime))
      SetAccessTime(target, DateTime(st.accessTime))
    end
  end
end


-- Calculate the intersection of two file permission strings.
private def JoinPerm(p, q)
  var res = ''
  for ch in p
    if q in q
      res += ch
    end
  end
  return res
end
