-- Test cases for runtime checking source-to-source transformation.

module testchk

import unittest
import analyse
import errors
import testchk::helpers
import dyncheck
import output
import re, os
import shutil


-- The std module stub used during transformation in test cases (note that 
-- evaluation uses the full std module).
private const TransformStdModule = 'fixtures/std-transform.alo'


class DyncheckTransformSuite is Suite
  const testCaseFiles = ['dyncheck-trans-basic.test',
                         'dyncheck-trans-generics.test',
                         'dyncheck-trans-generic-inheritance.test']

  def cases()
    var c = []
    for f in testCaseFiles
      c += ParseTestCases(Join(TestDataPrefix, f), 
                          StdWrapper(TestTransform, 
                                    Join(TestDataPrefix, TransformStdModule)), 
                          TestTempDir, True)
    end
    return c
  end
end


-- Perform a runtime checking transformation test case.
private def TestTransform(testcase)
  var a
  var expected = RemoveCommentLines(testcase.output)
  try
    -- Construct input as a single single.
    var src = LF.join(testcase.input)
    -- Parse and type check the input program.
    var trees, symtable, infos, types = 
                 Analyse(src, "main", False, TestTempDir, True)
    a = []
    var first = True
    -- Transform each file separately.
    for t in trees
      -- Skip the std module and files with '-skip.' in the path.
      if not t.path.endsWith("/std.alo") and not "-skip." in t.path
        if not first
          -- Display path for files other than the first.
          a.append("{}:".format(RemovePrefix(t.path, TestTempDir)))
        end
        
        -- Transform parse tree and produce pretty-printed output.
        var v = DyncheckTransformVisitor(types, True)
        t.accept(v)
        -- Pretty print the transformed tree.
        var v2 = PrettyPrintVisitor()
        t.accept(v2)
        var s = v2.output()
        if s != ""
          a += s.split(LF)
        end
      end
      first = False
    end
  except e is CompileError
    a = e.messages
  end
  AssertStringArraysEqualWildcards(expected, a, 
                          "Invalid source code output ({}, line {})".format(
                            testcase.file, testcase.line))
end


-- Return a copy of array with comment lines starting with '--' (but not with
-- '---') removed.
private def RemoveCommentLines(a)
  var r = []
  for s in a
    if s.strip().startsWith('--') and not s.strip().startsWith('---')
      -- Ignore
    else
      r.append(s)
    end
  end
  return r
end


-- Decorate a function that implements a data-driven test case to copy an
-- alternative std module implementation in place before performing the test 
-- case. Clean up after executing the test case.
private def StdWrapper(func, path)
  return def (testcase)
    var dir = Join(TestTempDir, 'std')
    var newDir = not IsDir(dir)
    MakeDirs(dir)
    try
      if newDir
        CopyFile(path, Join(dir, 'std.alo'))
      end
      func(testcase)
    finally
      -- Note that if the test case used a custom std module, the std 
      -- directory might be handled by the test case (setUp and tearDown). 
      -- Therefore only remove the directory if we created it ourselves.
      if newDir
        RemoveTree(dir)
      end
    end
  end
end
