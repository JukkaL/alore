module testchk

-- Test cases for identity source code transformation (roundtrip source -> 
-- parse tree -> source). The test cases verify (by default, if no explicit
-- output is given) that the result is identical to the original source code.

import unittest
import analyse
import errors
import testchk::helpers
import output
import re, os


-- Files which contain test case descriptions.
const RoundtripFiles = ["roundtrip.test"]


class RoundtripSuite is Suite
  def cases()
    var c = []
    for f in RoundtripFiles
      c += ParseTestCases(Join(TestDataPrefix, f), TestRoundtrip, 
                          TestTempDir, True)
    end
    return c
  end
end


-- Perform an identity source code transformation test case.
private def TestRoundtrip(testcase)
  var a
  var expected = testcase.output
  if expected == []
    expected = testcase.input
  end
  try
    var src = LF.join(testcase.input)
    -- Parse and analyse the source program.
    var trees, symtable, infos, types = 
                 Analyse(src, "main", False, TestTempDir)
    a = []
    var first = True
    -- Produce an output containing the pretty-printed forms (with original
    -- formatting) of all the relevant source files.
    for t in trees
      -- Omit the std module and files marked for omission.
      if not t.path.endsWith("/std.alo") and not "-skip." in t.path
        -- Add file name + colon for files other than the first.
        if not first
          a.append("{}:".format(RemovePrefix(t.path, TestTempDir)))
        end
      
        var v = OutputVisitor()
        t.accept(v)
        var s = v.output()
        if s != ""
          a += s.split(Newline)
        end
      end
      first = False
    end
  except e is CompileError
    a = e.messages
  end
  AssertStringArraysEqual(expected, a, 
                          "Invalid source code output ({}, line {})".format(
                            testcase.file, testcase.line))
end


private def RemovePrefix(path, prefix)
  var np = Subst(path, "^" + prefix, "")
  if np.startsWith(Separator)
    np = np[1:]
  end
  return np
end