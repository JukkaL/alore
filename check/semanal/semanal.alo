module semanal

import nodes
import set
import types
import reflect
import errors


-- Primitive types (cannot be subclassed)
const PrimitiveTypes = Set(["std::Int", "std::Str", "std::Float", "std::Type",
                            "std::Function", "std::Constant", "std::Pair",
                            "std::Range", "std::Boolean",
                            "std::Tuple"]) as Set<Str>
-- Supported source file encodings
const Encodings = ["ascii", "latin1", "utf8"] as Array<Str>


-- Alore semantic analyser. Bind names to definitions and perform many basic
-- consistency checks (member definitions are compatible with supertypes,
-- variables are defined before used, etc.). Also semantically analyse type
-- annotations, but do not perform any actual type checking.
class SemanticAnal is NodeVisitor
  var libPath  as Array<Str>      -- Library search paths
  var symtable as SymbolTable     -- Map from name to list of SymbolTableNode
  var types = TypeInfoMap() as TypeInfoMap -- All classes, from name to info
  var stack = [nil] as Array<Str> -- Function local/type variable stack
  var type = nil    as TypeInfo   -- TypeInfo of enclosing class (or nil)
  var isCreate      as Boolean    -- Are we now analysing the create method?
  var isFunction    as Boolean    -- Are we now analysing a function/method?
  var isLocalCtx    as Boolean    -- Are we now analysing a block (not at the
                                  -- top level or at class body)?
  var loopDepth = 0 as Int        -- Depth of breakable loops
  var curModId      as Str        -- Current module id (or nil) (phase 2)
  var imports = Set() as Set<Str> -- Imported modules (during phase 2 analysis)
  var errors        as Errors     -- Keep track of generated errors

  -- Create semantic analyser. Use libPath to search for modules, and report
  -- compile errors using the Errors instance.
  def create(libPath as Array<Str>, errors as Errors)
    self.libPath = libPath
    self.errors = errors
    
    self.symtable = SymbolTable()
    
    self.isCreate = False
    self.isFunction = False
    self.isLocalCtx = False
  end
  
  -- First pass of semantic analysis
  ----------------------------------
  
  -- Populate symbol table and build TypeInfo objects for defined types.
  -- Related TypeInfos (via subtyping) will remain unconnected after the first
  -- pass.
  
  def analMainHeader(tree as AloreFile, fnam as Str)
    self.errors.setFile(fnam)
    
    if tree.header != nil
      fail("Unexpected module header", tree.header)
    end

    if tree.enc != nil and not tree.enc.id in Encodings
      fail("Invalid encoding", tree.enc)
    end
  end
  
  def analModuleHeader(tree as AloreFile, fnam as Str, id as Str)
    self.errors.setFile(fnam)
    
    if tree.header == nil
      fail("Module header expected", tree)
      tree.header = Header(id)
    elif tree.header.id != id
      fail("Invalid module header", tree.header)
      tree.header = Header(id)
    end
  end
  
  -- Perform the first analysis pass. Resolve the full names of definitions
  -- and construct type info structures, but do not resolve inter-definition
  -- references such as supertypes.
  def analDefs(defs as Array<Node>, fnam as Str, modId as Str)
    self.curModId = modId
    self.errors.setFile(fnam)
    for d in defs
      if d is FuncDef
        analFuncDef(d as FuncDef, modId)
      elif d is VarDef
        analVarDef(d as VarDef, modId)
      elif d is TypeDef
        analTypeDef(d as TypeDef, modId)
      else
        -- Ignore statements.
      end
   end
  end
  
  def analFuncDef(defn as FuncDef, modId as Str)
    defn.fullName = qualified(defn.name, modId)
    addSymTable(defn.name, SymbolTableNode(Gdef, defn, modId), defn)
  end
  
  def analVarDef(defn as VarDef, modId as Str)
    for n in defn.names
      n.fullName = qualified(n.name, modId)
      addSymTable(n.name, SymbolTableNode(Gdef, n, modId), defn)
    end
  end
  
  -- Perform the first analysis pass for a type.
  def analTypeDef(defn as TypeDef, modId as Str)
    var vars = Map() as <Str, Var>
    var methods = Map() as <Str, FuncDef>
    var getters = Map() as <Str, FuncDef>
    var setters = Map() as <Str, FuncDef>
    var hasImplicitCreate = False
    
    defn.fullName = qualified(defn.name, modId)
    
    try
      self.errors.setType(defn.name, defn.isInterface)
      
      vars, methods, getters, setters = analTypeMembers(defn.defs, modId)

      -- Add implicit create, if required.
      if not methods.hasKey("create") and defn.base == nil
        -- Report an error if there is an incompatible definition of create.
        if vars.hasKey("create") or getters.hasKey("create") or
           setters.hasKey("create")
          var node as Context
          if vars.hasKey("create")
            node = vars["create"]
          elif getters.hasKey("create")
            node = getters["create"]
          else
            node = setters["create"]
          end
          fail("""create"" must be a method", node)
        end
      
        var fdef = CreateImplicitCreate(defn)
        if fdef != nil
          defn.defs.append(fdef)
          methods["create"] = fdef
          hasImplicitCreate = True
        end
      end
      
      -- Verify that create is not private.
      if methods.hasKey("create") and methods["create"].isPrivate
        fail("""create"" must be public", methods["create"])
      end
    finally
      self.errors.setType(nil, False)
    end

    var type = TypeInfo(vars, methods, getters, setters, defn,
                        hasImplicitCreate)
    type.line = defn.line
    addSymTable(defn.name, SymbolTableNode(Gdef, type, modId), defn)
    
    self.types[qualified(defn.name)] = type
  end

  def analTypeMembers(defs as Array<Node>, modId as Str) as
                          (Map<Str, Var>, Map<Str, FuncDef>,
                           Map<Str, FuncDef>, Map<Str, FuncDef>)
    var vars = Map() as <Str, Var>
    var methods = Map() as <Str, FuncDef>
    var getters = Map() as <Str, FuncDef>
    var setters = Map() as <Str, FuncDef>
    
    for d in defs
      if d is VarDef
        for n in (d as VarDef).names
          if vars.hasKey(n.name) or methods.hasKey(n.name)
            failMultipleDef(n.name, d)
          end
          vars[n.name] = n
          n.fullName = n.name
        end
      elif d is FuncDef
        var fd = (d as FuncDef)
        var name = fd.name
        if fd.isSetter
          -- Analyse setter definition.
          if vars.hasKey(name) or methods.hasKey(name) or
             setters.hasKey(name)
            failMultipleDef(name, d)
          end
          setters[name] = fd
        elif fd.isGetter
          -- Analyse getter definition.
          if vars.hasKey(name) or methods.hasKey(name) or
             getters.hasKey(name)
            failMultipleDef(name, d)
          end
          getters[name] = fd
        else
          -- Analyse method definition.
          if vars.hasKey(name) or methods.hasKey(name) or
             getters.hasKey(name) or setters.hasKey(name)
            failMultipleDef(name, d)
          end
          methods[name] = fd
        end
        fd.fullName = name
      end
    end
    
    return vars, methods, getters, setters
  end
  
  -- Middle pass of semantic analysis
  -----------------------------------
  
  -- Add supertype references to TypeInfos now that the symbol table contains
  -- all visible global definitions.
  
  def bindSupertypes(fileNode as AloreFile, fnam as Str)
    self.errors.setFile(fnam)
    self.imports = GetImports(fileNode)
    setCurModId(fileNode)
    
    for d in fileNode.defs
      if d is TypeDef
        var td = (d as TypeDef)
        
        -- Inherit from Object implicitly, if the superclass of a class is
        -- not given explicitly.
        if not td.isInterface and td.base == nil and
             td.fullName != "std::Object"
          td.base = NameExpr("std::Object")
        end
        var done as Boolean
        repeat
          done = True
          if td.base != nil
            if analyseBase(td, td.base, False)
              self.types[qualified(td.name)].setBase(
                self.types[td.base.fullName])
            elif not td.isInterface
              -- Use std::Object as a dummy base and try again.
              td.base = NameExpr("std::Object")
              done = False
            end
          end
        until done
        -- Semantically analyse implemented interfaces.
        for iface in td.implement
          if not analyseBase(td, iface, True)
            iface.fullName = nil
          end
          if iface.fullName != nil
            self.types[qualified(td.name)].addInterface(
              self.types[iface.fullName], False)
          end
        end
      end
    end
  end

  private def analyseBase(typeDef as TypeDef, baseExpr as NameExpr,
                          isImplements as Boolean) as Boolean
    visitNameExpr(baseExpr)
    if baseExpr.fullName != nil
      if not baseExpr.node is TypeInfo
        fail("Invalid supertype", typeDef)
        return False
      end
      if not isImplements
        if baseExpr.fullName in PrimitiveTypes
          fail("Cannot inherit from a primitive type", typeDef)
          return False
        elif not typeDef.isInterface and baseExpr.typeNode().isInterface
          fail("""{}"" is an interface; use ""implements"" instead of ""is""".
               format(baseExpr.name), typeDef)
          return False
        elif typeDef.isInterface and not baseExpr.typeNode().isInterface
          fail("Interface cannot extend a class", typeDef)
          return False
        else
          return True
        end
      else
        if not baseExpr.typeNode().isInterface
          fail("""implements"" cannot be used to extend a class", typeDef)
          return False
        else
          return True
        end
      end
    end
    return False
  end
  
  -- Final pass of semantic analysis
  ----------------------------------
  
  -- Do the bulk of semantic analysis in this third and final semantic analysis
  -- pass.
  
  def visitFile(fileNode as AloreFile, fnam as Str)
    self.errors.setFile(fnam)
    self.imports = GetImports(fileNode)
    setCurModId(fileNode)
    
    var defs = fileNode.defs
    for d in defs
      d.accept(self)
    end
  end
  
  -- Analyse a function or method definition.
  def visitFuncDef(defn as FuncDef)
    if self.type != nil and defn.name == "create"
      self.isCreate = True
    end
    
    if self.type != nil
      defn.info = self.type
    end
    
    self.errors.setFunction(defn.name)
    
    analyseFunction(defn)
    
    self.errors.setFunction(nil)
    
    self.isCreate = False
  end
    
  -- Analyse a function or method definition or an anonymous function.
  def analyseFunction(defn as FuncBase)
    var wasFunction = self.isFunction
    self.isFunction = True
    
    -- Fdef is a reference to FuncDef unless defn is an anonymous function.
    var fdef = nil as FuncDef
    if defn is FuncDef
      fdef = defn as FuncDef
    end
    
    var isNotAccessor = defn is FuncExpr or
                        (not fdef.isGetter and not fdef.isSetter)
    
    if defn.type != nil
      defn.type.accept(self)
      if isNotAccessor
        verifyFunctionType(defn)
      end
      if defn is FuncDef
        if self.type != nil and not fdef.isGetter and not fdef.isSetter
          defn.type.type = (defn.type.type as FunctionLike).withName(
            "method ""{}"" of ""{}""".format(fdef.name, self.type.name))
        elif self.type == nil
          defn.type.type = (defn.type.type as FunctionLike).withName(
                                                 """{}""".format(fdef.name))
        end
      end
    end
    
    enter()
    if isNotAccessor
      addFuncTypeVariablesToSymbolTable(defn)
    end
    -- Analyse arguments and initialisation expressions.
    for i in 0 to defn.args.length()
      if defn.init[i] != nil
        defn.init[i].rvalue.accept(self)
      end
      addVar(defn.args[i], Ldef)
      if defn.init[i] != nil
        defn.init[i].lvalues[0].accept(self)
      end
    end
    visitBlock(defn.body)
    leave()
    
    self.isFunction = wasFunction
  end
  
  def verifyFunctionType(defn as FuncBase)
    var t = defn.type.type
    if t is Callable
      var ct = (t as Callable)
      -- If there is only a single type signature, it must match the function
      -- definition with respect to number of arguments and the presence of
      -- default arguments and varargs.
      if ct.argTypes.length() != defn.args.length() or
           ct.minArgs != defn.minArgs or ct.isVarArg != defn.isVarArg
        if ct.argTypes.length() > defn.args.length()
          fail("Too many argument types in type signature", t)
        elif ct.argTypes.length() < defn.args.length()
          fail("Missing argument type for ""{}"" in type signature".format(
            defn.args[ct.argTypes.length()].name), t)
        else
          fail("Type signature incompatible with function", ct)
        end
      end
    elif t is Intersection
      -- Intersection types must include an item that accepts the minimum
      -- number of possible arguments and an item that accepts the maximum
      -- number of possible arguments, and fixed arguments and varargs must be
      -- matched with equivalent arguments, but otherwise there is more
      -- flexibility.
      
      -- Collect a list of all the items in the intersection type.
      var items = (t as Intersection).items()
      
      -- Verify that all items are compatible with the function.
      for item in items
        -- We know that the item is a Callable.
        
        if item.argTypes.length() < defn.minArgs
          fail("Missing argument type for ""{}"" in type signature".format(
            defn.args[item.argTypes.length()].name), item)
        elif item.argTypes.length() > defn.args.length()
          fail("Too many argument types in type signature", item)
        elif (defn.isVarArg and
              item.argTypes.length() == defn.args.length() and
              not item.isVarArg) or
             (item.isVarArg and (not defn.isVarArg or item.argTypes.length() !=
                                 defn.args.length())) or
             item.minArgs < defn.minArgs
          fail("Type signature incompatible with function", item)
        end
      end
      
      -- Verify that there is an item that has the minimum number of arguments.
      var isMinItem = False
      for item in items
        if item.minArgs == defn.minArgs
          isMinItem = True
        end
      end
      
      if not isMinItem
        fail("No signature accepts the argument count of {}".format(
          defn.minArgs), defn.type)
      end
      
      -- Verify that there is an item that has the maximum number of arguments.
      var isMaxItem = False
      for item in items
        if item.argTypes.length() >= defn.args.length()
          isMaxItem = True
        end
      end
      
      if not isMaxItem and isMinItem
        fail("No signature accepts the maximum argument count", defn.type)
      end
    else
      raise RuntimeError("Invalid function type {}".format(t))
    end
  end
  
  def visitVarDef(d as VarDef)
    if d.init != nil
      d.init.accept(self)
    end
    if d.type != nil
      -- Analyse type.
      d.type.accept(self)
      -- Assing declared type(s) to Var node(s).
      var type = d.type.type
      if d.names.length() == 1
        d.names[0].type = Annotation(type, d.type.line)
      elif type is TupleType
        var ttype = (type as TupleType)
        if d.names.length() != ttype.items.length()
          fail("Incompatible type in annotation", d)
        else
          for i in 0 to d.names.length()
            if i < ttype.items.length()
              d.names[i].type = Annotation(ttype.items[i], d.type.line)
            end
          end
        end
      else
        fail("Tuple type expected in annotation", d)
      end
    end
    if self.isLocalCtx
      for name in d.names
        addVar(name, Ldef)
      end
    else
      for name in d.names
        name.info = self.type
      end
    end
  end
  
  def visitTypeDef(defn as TypeDef)
    self.errors.setType(defn.name, defn.isInterface)
    self.type = self.types[qualified(defn.name)]
    
    defn.info = self.type
    
    if IsInheritanceCycle(self.type)
      fail("Cycle in inheritance chain", defn)
      return
    end
    
    for n, o, sup in GetInvalidOverrides(self.type)
      fail("""{}"" incompatible with definition in ""{}""".format(n, sup), o)
    end
    
    for msg, o in GetInvalidAccessors(self.type)
      fail(msg, o)
    end
    
    for msg, o in GetInterfaceErrors(self.type)
      fail(msg, o)
    end
    
    enter()
    
    -- Populate symbol table.
    addTypeVariablesToSymbolTable(self.type)
    addMembersToSymbolTable(self.type)
    
    if defn.typeVars != nil
      analTypeArgs(defn, self.type)
      self.type.setTypeBounds(defn.typeVars.items)
    end
    
    analyseBaseTypes(defn, self.type)
    analyseBindings(defn, self.type)
    
    -- Analyse definitions within the type.
    for d in defn.defs
      if d is FuncDef
        visitFuncDef(d as FuncDef)
      elif d is VarDef
        visitVarDef(d as VarDef)
      elif d is AssignmentStmt
        visitAssignmentStmt(d as AssignmentStmt)
      else
        fail("Unknown definition", d)
      end
    end
    
    if self.type.hasImplicitCreate
      InferImplicitCreateSignature(self.type, self.type.getMethod("create"))
    end
    
    leave()
    
    self.type = nil
    self.errors.setType(nil, False)
  end
  
  def analTypeArgs(defn as TypeDef, type as TypeInfo)
    var names = Set() as <Str>
    var items = defn.typeVars.items
    for i in 0 to items.length()
      var vd = analTypeVarDef(items[i], defn)
      items[i] = vd
      if vd.name in names
        failMultipleDef(vd.name, vd)
      end
      names.add(vd.name)
      
      if type.hasReadableMember(vd.name)
        fail("Type variable ""{}"" shadows a member".format(vd.name), defn)
      end
    end
  end
  
  def analTypeVarDef(vd as TypeVarDef, context as Context) as TypeVarDef
    vd = TypeVarDef(vd.name, vd.id, analType(vd.bound), vd.line, vd.repr)
    if vd.bound is Dynamic
      fail("Invalid bound ""dynamic""", context)
    end
    return vd
  end
  
  def analyseBaseTypes(defn as TypeDef, type as TypeInfo)
    -- If no base types are provided and the type is not generic, assume that
    -- we inherit them with dynamic types as type arguments.
    if defn.baseTypes == [nil] * defn.baseTypes.length() and
       type.typeVars == []
      return
    end
  
    -- Analyse base type references.
    for i in 0 to defn.baseTypes.length()
      defn.baseTypes[i] = analType(defn.baseTypes[i])
      type.bases.append(defn.baseTypes[i])
    end
    
    -- Verify that base types are instances.
    for t in type.bases
      if t != nil and not t is Instance and not t is UnboundType
        fail("Invalid supertype ""{}""".format(t), t)
      end
    end
    
    -- Collect a list of generic supertypes.
    var allSupers = [type.base] + type.interfaces
    var genericSupers = [] as <TypeInfo>
    for t in allSupers
      if t != nil and t.typeVars != []
        genericSupers.append(t)
      end
    end
    
    -- Verify that each generic supertype is represented.
    for t in genericSupers
      var found = False
      for tt in type.bases
        if tt is Instance and (tt as Instance).type == t
          found = True
          break
        end
      end
      if not found
        fail("Type arguments for supertype ""{}"" not specified".format(
             t.fullName), defn)
      end
    end
    
    -- Verify that each type represents a valid generic supertype.
    for tt in type.bases
      if tt is Instance
        var found = False
        for t in genericSupers
          if (tt as Instance).type == t
            found = True
            break
          end
        end
        if not found
          if (tt as Instance).args != []
            fail("Invalid supertype annotation ""{}""".format(tt), defn)
          else
            fail("Non-generic supertype annotation ""{}""".format(tt), defn)
          end
        end
      end
    end
    
    -- Verify that superclass is represented only once.
    if type.base != nil
      var numFound = 0
      for t in type.bases
        if t is Instance and (t as Instance).type == type.base
          numFound += 1
        end
      end
      if numFound > 1
        fail("Multiple annotations for supertype ""{}""".format(
               type.base.fullName), defn)
      end
    end
  end
  
  def analyseBindings(defn as TypeDef, type as TypeInfo)
    for b in defn.binds
      if type.base != nil
        fail("Bind used in an interface with a superinterface", b)
      end
    
      visitNameExpr(b)
      if b.fullName != nil
        if not b.node is TypeInfo
          fail("Invalid bind target ""{}""".format(b.fullName), b)
        elif b.typeNode().isInterface
          fail("Cannot bind an interface", b)
        else
          b.typeNode().addInterface(type, True)
          for msg, o in GetInterfaceErrors(b.typeNode(), [type])
            fail(msg, b)
          end
          for n, o, sup in GetInvalidOverridesForBase(b.typeNode(), type)
            fail("Definition of ""{}"" in ""{}"" incompatible with ""{}""".
              format(n, b.typeNode().name, sup), b)
          end
        end
      end
    end
  end
  
  def addMembersToSymbolTable(type as TypeInfo)
    for n in type.vars.values() + type.methods.values() +
             type.getters.values() + type.setters.values()
      addVar(n, Mdef)
    end
    while type.base != nil
      type = type.base
      for n in type.vars.values() + type.methods.values() +
               type.getters.values() + type.setters.values()
        if not n.isPrivate
          addVar(n, Mdef)
        end
      end
    end
  end
  
  def addTypeVariablesToSymbolTable(info as TypeInfo)
    var vars = info.typeVars
    for i in 0 to vars.length()
      pushTypeVar(vars[i], i + 1)
    end
  end
  
  def addFuncTypeVariablesToSymbolTable(defn as FuncBase)
    if defn.type != nil
      var t = defn.type.type
      var types as Array<Callable>
      if t is Callable
        types = [t as Callable]
      else
        types = (t as Intersection).items()
      end
      
      for tt in types
        var names = typeVarNames()
        var items = tt.variables.items
        for i in 0 to items.length()
          var name = items[i].name
          if name in names
            failMultipleDef(name, defn)
          end
          pushTypeVar(name, -i - 1)
          names.add(name)
        end
      end
    end
  end
  
  private def typeVarNames() as Set<Str>
    if self.type == nil
      return Set()
    else
      return Set(self.type.typeVars)
    end
  end
  
  -- Statements
  -------------
  
  def visitBlock(block as Array<Node>)
    var prevCtx = self.isLocalCtx
    self.isLocalCtx = True
    enter()
    for s in block
      s.accept(self)
    end
    leave()
    self.isLocalCtx = prevCtx
  end
  
  def visitExpressionStmt(s as ExpressionStmt)
    s.expr.accept(self)
  end
  
  def visitAssignmentStmt(s as AssignmentStmt)
    s.rvalue.accept(self)
    for i in 0 to s.lvalues.length()
      s.lvalues[i].accept(self)
      
      var lvalue = s.lvalues[i]
      if not s.isInit and not isLvalueExpr(lvalue, self.isCreate)
        fail("Invalid lvalue in assignment", lvalue)
      end
    end
  end
  
  def visitOperatorAssignmentStmt(s as OperatorAssignmentStmt)
    s.lvalue.accept(self)
    s.rvalue.accept(self)
      
    if not isLvalueExpr(s.lvalue, self.isCreate)
      fail("Invalid lvalue in assignment", s.lvalue)
    end
  end
  
  def visitWhileStmt(s as LoopStmt)
    s.expr.accept(self)
    self.loopDepth += 1
    visitBlock(s.body)
    self.loopDepth -= 1
  end
  
  def visitRepeatStmt(s as RepeatStmt)
    visitWhileStmt(s)
  end
  
  def visitForStmt(s as ForStmt)
    for i in 0 to s.types.length()
      var t = s.types[i]
      if t != nil
        t.accept(self)
        s.index[i].type = t
      end
    end
    
    -- Report error if only some of the loop variables have annotations.
    if s.types != [nil] * s.types.length() and nil in s.types
      fail("Cannot mix unannotated and annotated loop variables", s)
    end
    
    enter()
    s.expr.accept(self)
    for ind in s.index
      addVar(ind, Ldef)
    end
    self.loopDepth += 1
    visitBlock(s.body)
    self.loopDepth -= 1
    leave()
  end
  
  def visitIfStmt(s as IfStmt)
    for i in 0 to s.expr.length()
      s.expr[i].accept(self)
      visitBlock(s.body[i])
    end
    if s.elseBody != nil
      visitBlock(s.elseBody)
    end
  end
  
  def visitSwitchStmt(s as SwitchStmt)
    s.expr.accept(self)
    for c in s.cases
      for e in c
        e.accept(self)
      end
    end
    for b in s.bodies
      visitBlock(b)
    end
  end
  
  def visitTryFinallyStmt(s as TryFinallyStmt)
    visitBlock(s.body)
    visitBlock(s.finallyBody)
  end
  
  def visitTryExceptStmt(s as TryExceptStmt)
    visitBlock(s.body)
    for i in 0 to s.types.length()
      enter()
      visitNameExpr(s.types[i])
      if s.vars[i] != nil
        if s.types[i].node is TypeInfo
          var etype = Instance(s.types[i].typeNode(), [])
          s.vars[i].type = Annotation(etype, -1)
        end
        addVar(s.vars[i], Ldef)
      end
      if not s.types[i].node is TypeInfo or
          not s.types[i].typeNode().hasBase("std::Exception")
        fail("Invalid exception type", s.types[i])
      end
      visitBlock(s.handlers[i])
      leave()
    end
  end
  
  def visitReturnStmt(s as ReturnStmt)
    if not self.isFunction
      fail("Return statement outside function", s)
    end
    if s.expr != nil
      s.expr.accept(self)
    end
  end
  
  def visitBreakStmt(s as BreakStmt)
    if self.loopDepth == 0
      fail("Break statement outside loop", s)
    end
  end
  
  def visitRaiseStmt(s as RaiseStmt)
    s.expr.accept(self)
  end
  
  -- Expressions
  ---------------
  
  def visitParenExpr(expr as ParenExpr)
    expr.expr.accept(self)
  end
  
  def visitNameExpr(expr as NameExpr)
    var sym = lookupName(expr.name, expr)
    if sym != nil
      if sym.kind != Tvar
        expr.kind = sym.kind
        expr.node = sym.node
        expr.fullName = sym.fullName
        expr.info = self.type
        if sym.kind == Mdef and expr.name == "create"
          fail("Cannot access ""create""", expr)
        end
      else
        fail("""{}"" is a type variable".format(expr.name), expr)
        expr.fullName = nil
      end
    else
      expr.fullName = nil
    end
  end
  
  def visitNameLvalue(expr as NameLvalue)
    visitNameExpr(expr)
  end
  
  def visitOpExpr(expr as OpExpr)
    expr.left.accept(self)
    expr.right.accept(self)
  end
  
  def visitCastExpr(expr as CastExpr)
    expr.expr.accept(self)
    if expr.typeName.name != "dynamic"
      expr.typeName.accept(self)
      if not expr.typeName.node is TypeInfo and
             expr.typeName.node != nil
        fail("Type expected as the right operand of ""as""", expr)
      end
    end
  end
  
  def visitUnaryExpr(expr as UnaryExpr)
    expr.expr.accept(self)
  end
  
  def visitCallExpr(expr as CallExpr)
    expr.callee.accept(self)
    for a in expr.args
      a.accept(self)
    end
    
    -- Verify the number of arguments if the callee is a direct reference to
    -- a global function or a type.
    if expr.callee is NameExpr and (expr.callee as NameExpr).kind == Gdef
      var node = (expr.callee as NameExpr).node
      if node is FuncDef and not IsValidArgc(expr, node as FuncDef)
        var fnode = (node as FuncDef)
        var msg = InvalidArgcMessage(expr, fnode)
        fail("{} for ""{}""".format(msg, fnode.name), expr)
      elif node is TypeInfo
        var tnode = (node as TypeInfo)
        var create = tnode.getMethod("create")
        if create != nil and not IsValidArgc(expr, create)
          var msg = InvalidArgcMessage(expr, create)
          fail("{} for ""{}""".format(msg, tnode.name), expr)
        end
      end
    end
  end
  
  def visitSelfExpr(expr as SelfExpr)
    if self.type == nil
      fail("""self"" used outside class", expr)
      return
    end
    expr.type = self.type
  end
  
  def visitMemberExpr(expr as MemberExpr)
    expr.expr.accept(self)
    
    -- "create" cannot be accessed. Do not report error if line number is
    -- undefined, since this means that the expression is within the implicit
    -- create method ("create" is a member variable in this case, and this
    -- will be reported as an error elsewhere).
    if expr.name == "create" and expr.line != -1
      fail("Cannot access ""create""", expr)
    end
  end
  
  def visitMemberLvalue(expr as MemberLvalue)
    visitMemberExpr(expr)
    -- Verify that self.x refers to a member in the current class.
    if isSelfExpr(expr.expr) and self.type != nil and
         self.type.hasReadableMember(expr.name) and
         not self.type.hasWritableMember(expr.name)
      if not (self.isCreate and self.type.hasConst(expr.name))
        fail("""{}"" not assignable".format(expr.name), expr)
      else
        expr.isInit = True
      end
    end
  end
  
  private def isSelfExpr(e as Node) as Boolean
    if e is SelfExpr
      return True
    elif e is ParenExpr
      return isSelfExpr((e as ParenExpr).expr)
    else
      return False
    end
  end
  
  def visitIndexExpr(expr as IndexExpr)
    expr.base.accept(self)
    expr.index.accept(self)
  end
  
  def visitIndexLvalue(expr as IndexLvalue)
    visitIndexExpr(expr)
  end
  
  def visitArrayExpr(expr as ArrayExpr)
    for item in expr.items
      item.accept(self)
    end
  end
  
  def visitTupleExpr(expr as TupleExpr)
    for item in expr.items
      item.accept(self)
    end
  end
  
  def visitFuncExpr(expr as FuncExpr)
    analyseFunction(expr)
  end
  
  def visitSuperExpr(expr as SuperExpr)
    if self.type == nil
      fail("""super"" used outside class", expr)
      return
    end
    if self.type.base == nil or
       not self.type.base.hasPublicReadableMember(expr.name)
      fail("""{}"" undefined in superclass".format(expr.name), expr)
      return
    end
    expr.info = self.type
  end
  
  def visitSuperLvalue(expr as SuperLvalue)
    visitSuperExpr(expr)
    if self.type != nil and self.type.base != nil and
       not self.type.base.hasPublicWritableMember(expr.name)
      fail("Invalid lvalue ""{}""".format(expr.name), expr)
    end
  end
  
  def visitTypeApplication(app as TypeApplication)
    for i in 0 to app.types.length()
      app.types[i] = analType(app.types[i])
    end
    app.expr.accept(self)
  end
  
  -- Types
  --------
  
  def visitAnnotation(ann as Annotation)
    ann.type = analType(ann.type)
  end
  
  -- Helper methods
  -----------------
  
  def analType(t as Typ) as Typ
    if t != nil
      var a = TypeAnalyser(lookupName, fail, pushTypeVar, popTypeVar)
      return t.accept(a)
    else
      return nil
    end
  end
  
  def pushTypeVar(name as Str, id as Int)
    self.stack.append(name)
    addSymTable(name, SymbolTableNode(Tvar, nil, nil, nil, id), nil)
  end
  
  def popTypeVar() as void
    var name = self.stack[-1]
    self.symtable[name].removeAt(-1)
    self.stack.removeAt(-1)
  end
  
  def enter() as void
    -- Add a marker
    self.stack.append(nil)
  end
  
  def leave() as void
    while self.stack[-1] != nil
      var name = self.stack[-1]
      self.symtable[name].removeAt(-1)
      self.stack.removeAt(-1)
    end
    self.stack.removeAt(-1)
  end
  
  -- Add a variable to symbol table. node is Var and kind is Ldef/Gdef/...
  def addVar(node as Var, kind as Constant, name = node.name as Str)
    if kind == Ldef
      node.fullName = node.name
    end
    if kind == Ldef and isDefined(name)
      var k = self.symtable[name][-1].kind
      if k == Ldef
        failAlreadyDefined(name, node)
      elif k == Tvar and node.line >= 0
        fail("Cannot redefine type variable ""{}""".format(name), node)
      end
    end
    self.stack.append(name)
    addSymTable(name, SymbolTableNode(kind, node), nil)
  end
  
  -- Add a definition to symbol table. Defn is the parse tree node
  -- representing the name definition.
  def addSymTable(name as Str, node as SymbolTableNode, defn as Node)
    if node.kind == Gdef and isDefined(name)
      failMultipleDef(name, defn)
    end
    self.symtable.add(name, node)
  end
  
  def lookupName(name, node)
    var syms = matchingNames(name)
    if syms.length() > 1
      fail("""{}"" ambiguous".format(name), node)
      return nil
    elif syms.length() == 0
      fail("""{}"" undefined".format(name), node)
      return nil
    end
    return syms[0]
  end
  
  def isDefined(name)
    if self.symtable.hasKey(name) and
       self.symtable[name].length() > 0
      -- There is at least one definition with the name. Check if one of them
      -- is visible in this context.
      var syms = self.symtable[name]
      var isDef = False
      for sym in syms
        if sym.kind != Gdef or sym.modId == self.curModId or
             (sym.modId in self.imports and not sym.node.isPrivate)
          isDef = True
          break
        end
      end
      return isDef
    elif ":" in name
      return isDefinedQualified(name)
    else
      return False
    end
  end
  
  def isDefinedQualified(name as Str) as Boolean
    return matchingNames(name) != []
  end
  
  def matchingNames(name as Str) as Array<SymbolTableNode>
    return MatchingNames(name, self.symtable, self.imports, self.curModId)
  end
  
  def fail(msg as Str, node as Context)
    self.errors.report(node.line, msg)
  end
  
  def failMultipleDef(name as Str, node as Context)
    fail("""{}"" multiply defined".format(name), node)
  end
  
  def failAlreadyDefined(name as Str, node as Context)
    fail("""{}"" already defined".format(name), node)
  end
  
  def isLvalueExpr(expr as Node, isCreate as Boolean) as Boolean
    -- IDEA: Move the NameLvalue logic to analNameLvalue?
    if expr is NameLvalue
      var node = (expr as NameLvalue).node
      if node is Var
        if not (node as Var).isConst
          return True
        elif isCreate and lookupName((expr as NameLvalue).name,
                                     expr).kind == Mdef
          return True
        else
          return False
        end
      elif node is FuncDef and (node as FuncDef).isSetter
        return True
      else
        return False
      end
    else
      return TypeOf(expr) in (MemberLvalue, IndexLvalue, SuperLvalue)
    end
  end
  
  def setCurModId(tree as AloreFile)
    self.curModId = tree.modId()
  end
  
  def qualified(name, modId = self.curModId)
    if modId == nil
      return name
    else
      return modId + "::" + name
    end
  end
end


def IsInheritanceCycle(type as TypeInfo) as Boolean
  var set = Set([type])
  while type.base != nil
    type = type.base
    if type in set
      return True
    end
    set.add(type)
  end
  return False
end


def GetInvalidOverrides(inf as TypeInfo) as Array<(Str, Node, Str)>
  var errors = [] as <(Str, Node, Str)>
  if inf.base != nil
    errors += GetInvalidOverridesForBase(inf, inf.base)
  end
  for iface in inf.directlyImplementedInterfaces()
    errors += GetInvalidOverridesForBase(inf, iface)
    
    -- Go through superclasses and check for invalid overrides for inherited
    -- members.
    var b = inf.base
    while b != nil
      for n, o, sup in GetInvalidOverridesForBase(b, iface)
        errors.append((n, inf.defn, sup))
      end
      b = b.base
    end
  end
  return errors
end


def GetInvalidOverridesForBase(inf as TypeInfo, base as TypeInfo) as
                                 Array<(Str, Node, Str)>
  var errors = [] as <(Str, Node, Str)>
  for n, o in inf.vars
    if (not base.isInterface and base.hasPublicReadableMember(n)) or
       (base.isInterface and base.hasPublicMethod(n))
      errors.append((n, o, base.name))
    end
  end
  for n, o in inf.methods
    if base.hasPublicVar(n) or base.hasPublicGetter(n)
      errors.append((n, o, base.name))
    end
    if inf.methods[n].isPrivate and base.hasPublicMethod(n)
      errors.append((n, o, base.name))
    end
  end
  for n, o in inf.getters
    if base.hasPublicMethod(n)
      errors.append((n, o, base.name))
    end
    if inf.getters[n].isPrivate and base.hasPublicReadableMember(n)
      errors.append((n, o, base.name))
    end
  end
  for n, o in inf.setters
    if base.hasPublicMethod(n)
      errors.append((n, o, base.name))
    end
    if inf.setters[n].isPrivate and base.hasPublicReadableMember(n)
      errors.append((n, o, base.name))
    end
  end
  return errors
end


-- Return an array of (message, node) pairs for all setters without a
-- getter or setters and getters with incompatible visibility.
def GetInvalidAccessors(inf as TypeInfo) as Array<(Str, Node)>
  var errors = [] as <(Str, Node)>
  for n, o in inf.setters
    if not inf.hasReadableMember(n)
      errors.append(("""{}"" write-only".format(n), o))
    end
    if inf.setters[n].isPrivate and inf.hasPublicReadableMember(n)
      errors.append(("Incompatible visibility for ""{}""".format(n), o))
    end
  end
  for n, o in inf.getters
    if inf.getters[n].isPrivate and inf.hasPublicWritableMember(n)
      errors.append(("Incompatbile visibility for ""{}""".format(n), o))
    end
  end
  return errors
end


-- Return an array of (message, node) pairs for all interface members that are
-- missing in a type.
def GetInterfaceErrors(type as TypeInfo,
                       interfaces = type.allDirectlyImplementedInterfaces() as
                         Array<TypeInfo>) as Array<(Str, Node)>
  var errors = [] as <(Str, Node)>
  for iface in interfaces
    for n in iface.methods.keys()
      if not type.hasPublicMethod(n) and not type.hasPublicGetter(n)
        var msg = NotImplementMsg(type, iface, n)
        errors.append((msg, type.defn))
      end
    end
    for n in iface.getters.keys()
      if not type.hasPublicReadableMember(n)
        var msg = NotImplementMsg(type, iface, n, " getter")
        errors.append((msg, type.defn))
      end
    end
    for n in iface.setters.keys()
      if not type.hasPublicMethod(n) and not type.hasPublicSetter(n) and
         (not type.hasVar(n) or type.getVar(n).isConst)
        var msg = NotImplementMsg(type, iface, n, " setter")
        errors.append((msg, type.defn))
      end
    end
  end
  return errors
end


private def NotImplementMsg(type as TypeInfo, iface as TypeInfo, n as Str,
                            defType = "" as Str) as Str
  return """{}"" does not implement{} ""{}"" defined in ""{}""".format(
          type.defn.name, defType, n, iface.defn.name)
end
