module semanal

import types
import nodes


-- Semantic analyser for types.
class TypeAnalyser is TypeVisitor<Typ>
  private const lookup  as def (Str, Context) as SymbolTableNode
  private const fail    as def (Str, Context)
  private const pushVar as def (Str, Int)
  private const popVar  as def ()

  def create(lookupFunc  as def (Str, Context) as SymbolTableNode,
             failFunc    as def (Str, Context),
             pushVarFunc as def (Str, Int),
             popVarFunc  as def ())
    self.lookup = lookupFunc
    self.fail = failFunc
    self.pushVar = pushVarFunc
    self.popVar = popVarFunc
  end

  def visitUnboundType(t as UnboundType) as Typ
    var sym = lookup(t.name, t)
    if sym != nil
      if sym.kind == Tvar
        if t.args.length() > 0
          fail("Type variable ""{}"" used with arguments".format(t.name), t)
        end
        return TypeVar(t.name, sym.tvarId, False, t.line,
                       TypeVarRepr(t.repr.components[0]))
      elif sym.kind != Gdef or not sym.node is TypeInfo
        var name = sym.fullName
        if name == nil
          name = sym.node.name
        end
        fail("Invalid type ""{}""".format(name), t)
        return t
      elif t.args.length() != (sym.node as TypeInfo).typeVars.length()
        -- Invalid number of type parameters.
        var n = (sym.node as TypeInfo).typeVars.length()
        var s = "{} type arguments".format(n)
        if n == 0
          s = "no type arguments"
        elif n == 1
          s = "1 type argument"
        end
        var act = Str(t.args.length())
        if act == "0"
          act = "none"
        end
        fail("""{}"" expects {}, but {} given".format(
               (sym.node as TypeInfo).name, s, act), t)
        return t
      else
        -- Ok; analyse arguments and construct Instance type. Upper bounds are
        -- never present at this stage, as they are only used during type
        -- inference.
        return Instance(sym.node as TypeInfo,
                        analArray(t.args), nil, nil, t.line, t.repr)
      end
    else
      return t
    end
  end

  def visitDynamic(t as Dynamic) as Typ
    return t
  end

  def visitVoid(t as Void) as Typ
    return t
  end

  def visitInstance(t as Instance) as Typ
    raise RuntimeError("Instance is already analysed")
  end

  def visitTypeVar(t as TypeVar) as Typ
    raise RuntimeError("TypeVar is already analysed")
  end

  def visitCallable(t as Callable) as Typ
    var items = t.variables.items
    for i in 0 to items.length()
      pushVar(items[i].name, -i - 1)
    end

    var res = Callable(analArray(t.argTypes), t.minArgs, t.isVarArg,
                       t.retType.accept(self), t.isTypeObj, t.name,
                       analVarDefs(t.variables), analBoundVars(t.boundVars),
                       t.line, t.repr)

    for v in t.variables.items
      popVar()
    end

    return res
  end

  def visitTupleType(t as TupleType) as Typ
    return TupleType(analArray(t.items), t.line, t.repr)
  end

  def visitIntersection(t as Intersection) as Typ
    return Intersection(t.item1.accept(self) as FunctionLike,
                        t.item2.accept(self) as FunctionLike,
                        t.name, t.line, t.repr)
  end

  private def analArray(a as Array<Typ>) as Array<Typ>
    var res = [] as <Typ>
    for t in a
      res.append(t.accept(self))
    end
    return res
  end

  private def analBoundVars(a as Array<(Int, Typ)>) as Array<(Int, Typ)>
    var res = [] as <(Int, Typ)>
    for id, t in a
      res.append((id, t.accept(self)))
    end
    return res
  end

  private def analVarDefs(varDefs as TypeVars) as TypeVars
    var a = [] as <TypeVarDef>
    for vd in varDefs.items
      var bound = nil as Typ
      if vd.bound != nil
        bound = vd.bound.accept(self)
      end
      a.append(TypeVarDef(vd.name, vd.id, bound, vd.line, vd.repr))
    end
    return TypeVars(a, varDefs.repr)
  end
end
