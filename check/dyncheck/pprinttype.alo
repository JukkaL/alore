module dyncheck

import output
import types


-- Visitor for pretty-printing types using original formatting whenever 
-- possible.
class TypePrettyPrintVisitor is TypeOutputVisitor
  def visitDynamic(t)
    -- Dynamic types do not always have explicit formatting.
    if t.repr == nil
      str(' dynamic')
    else
      super.visitDynamic(t)
    end
  end
end


-- Translate a type to source code, with or without pretty printing. Always
-- use automatic formatting.
class PrettyTypeStrVisitor is TypeStrVisitor
  -- Pretty formatting is designed to be human-readable, while the default
  -- formatting is suitable for evaluation (it's valid Alore).
  private const isPretty

  def create(isPretty)
    self.isPretty = isPretty
    super.create()
  end
  
  def visitInstance(t)
    if t.args == [] or self.isPretty
      return super.visitInstance(t)
    else
      -- Generate a type constructor for a generic instance type.
      var a = []
      for at in t.args
        a.append(at.accept(self))
      end
      return '__Gen({}, [{}])'.format(t.type.fullName, ', '.join(a))
    end
  end
  
  def visitTypeVar(t)
    -- FIX function type variables
    -- FIX __tv vs. self.__tv?
    return '__tv[{}]'.format(t.id - 1)
  end
  
  def visitRuntimeTypeVar(t)
    var v = PrettyPrintVisitor()
    t.node.accept(v)
    return v.output()
  end
  
  def visitDynamic(t)
    if self.isPretty
      return "dyn"
    else
      return "__Dyn"
    end
  end
end
