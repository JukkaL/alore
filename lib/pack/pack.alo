-- pack.alo - Binary data packing and unpacking
--
-- Copyright (c) 2010-2011 Jukka Lehtosalo
--
-- Alore is licensed under the terms of the MIT license.  See the file
-- LICENSE.txt in the distribution.

module pack

import string
import bitop
import __pack


-- FIX: Initialize correctly based on the byte order of the system.
const HostByteOrderPacker = LittleEndianPacker as def () as PackerBase


class PackerBase
  def packByte(i as Int) as Str
    if i >= 0 and i < 256
      return Chr(i)
    else
      raise PackError("Byte out of range")
    end
  end
  
  def unpackByte(s as Str) as Int
    if s.length() != 1
      raise PackError()
    end
    return Ord(s)
  end
  
  def packBytes(a as Array<Int>) as Str
    return PackMulti(a, self.packByte)
  end
  
  def unpackBytes(s as Str) as Array<Int>
    return UnpackMulti(s, 1, self.unpackByte)
  end
  
  def packInt8(i as Int) as Str
    if i > 127 or i < -128
      raise PackError()
    end
    return Chr(And(i, 255))
  end
  
  def unpackInt8(s as Str) as Int
    if s.length() != 1
      raise PackError()
    end
    var x = Ord(s)
    if x >= 128
      x -= 256
    end
    return x
  end
  
  def packStr(s as Str, n as Int) as Str
    if s.length() < n
      return s + (n - s.length()) * " "
    elif s.length() == n
      return s
    else
      raise PackError()
    end
  end
  
  def unpackStr(s as Str) as Str
    return s
  end
  
  def packInts8(a as Array<Int>) as Str
    return PackMulti(a, self.packInt8)
  end
  
  def unpackInts8(s as Str) as Array<Int>
    return UnpackMulti(s, 1, self.unpackInt8)
  end
  
  def packWords16(a as Array<Int>) as Str
    return PackMulti(a, self.packWord16)
  end
  
  def unpackWords16(s as Str) as Array<Int>
    return UnpackMulti(s, 2, self.unpackWord16)
  end
  
  def packInts16(a as Array<Int>) as Str
    return PackMulti(a, self.packInt16)
  end
  
  def unpackInts16(s as Str) as Array<Int>
    return UnpackMulti(s, 2, self.unpackInt16)
  end
  
  def packWords32(a as Array<Int>) as Str
    return PackMulti(a, self.packWord32)
  end
  
  def unpackWords32(s as Str) as Array<Int>
    return UnpackMulti(s, 4, self.unpackWord32)
  end
  
  def packInts32(a as Array<Int>) as Str
    return PackMulti(a, self.packInt32)
  end
  
  def unpackInts32(s as Str) as Array<Int>
    return UnpackMulti(s, 4, self.unpackInt32)
  end
  
  def packWords64(a as Array<Int>) as Str
    return PackMulti(a, self.packWord64)
  end
  
  def unpackWords64(s as Str) as Array<Int>
    return UnpackMulti(s, 8, self.unpackWord64)
  end
  
  def packInts64(a as Array<Int>) as Str
    return PackMulti(a, self.packInt64)
  end
  
  def unpackInts64(s as Str) as Array<Int>
    return UnpackMulti(s, 8, self.unpackInt64)
  end
  
  def packFloats32(a as Array<Float>) as Str
    return PackMulti(a, self.packFloat32)
  end
  
  def unpackFloats32(s as Str) as Array<Float>
    return UnpackMulti(s, 4, self.unpackFloat32)
  end
  
  def packFloats64(a as Array<Float>) as Str
    return PackMulti(a, self.packFloat64)
  end
  
  def unpackFloats64(s as Str) as Array<Float>
    return UnpackMulti(s, 8, self.unpackFloat64)
  end
  
  def packStrs(a as Array<Str>, n as Int) as Str
    var r = [] as <Str>
    for s in a
      r.append(packStr(s, n))
    end
    return "".join(r)
  end
  
  def unpackStrs(s as Str, n as Int) as Array<Str>
    return UnpackMulti(s, n, unpackStr)
  end
  
  -- Abstract methods (IDEA: mark them as abstract?)
  
  def packWord16(i as Int) as Str
  end
  
  def unpackWord16(s as Str) as Int
  end
  
  def packInt16(i as Int) as Str
  end
  
  def unpackInt16(s as Str) as Int
  end
  
  def packWord32(i as Int) as Str
  end
  
  def unpackWord32(s as Str) as Int
  end
  
  def packInt32(i as Int) as Str
  end
  
  def unpackInt32(s as Str) as Int
  end
  
  def packWord64(i as Int) as Str
  end
  
  def unpackWord64(s as Str) as Int
  end
  
  def packInt64(i as Int) as Str
  end
  
  def unpackInt64(s as Str) as Int
  end
  
  def packFloat32(f as Float) as Str
  end
  
  def unpackFloat32(s as Str) as Float
  end
  
  def packFloat64(f as Float) as Str
  end
  
  def unpackFloat64(s as Str) as Float
  end
end


class Packer is PackerBase
  def packWord16(i as Int) as Str
    return PackHalfword(i, False)
  end
  
  def unpackWord16(s as Str) as Int
    return UnpackHalfword(s, False)
  end
  
  def packInt16(i as Int) as Str
    return PackHalfword(i, True)
  end
  
  def unpackInt16(s as Str) as Int
    return UnpackHalfword(s, True)
  end

  def packWord32(i as Int) as Str
    return PackWord(i, False)
  end

  def unpackWord32(s as Str) as Int
    return UnpackWord(s, False)
  end
  
  def packInt32(i as Int) as Str
    return PackWord(i, True)
  end
  
  def unpackInt32(s as Str) as Int
    return UnpackWord(s, True)
  end
  
  def packWord64(i as Int) as Str
    return PackDword(i, False)
  end

  def unpackWord64(s as Str) as Int
    return UnpackDword(s, False)
  end
  
  def packInt64(i as Int) as Str
    return PackDword(i, True)
  end

  def unpackInt64(s as Str) as Int
    return UnpackDword(s, True)
  end
  
  def packFloat32(f as Float) as Str
    return Reverse(PackFloat32_LE(f))
  end
  
  def unpackFloat32(s as Str) as Float
    if s.length() != 4
      raise PackError()
    end
    return UnpackFloat32_LE(Reverse(s))
  end
  
  def packFloat64(f as Float) as Str
    return Reverse(PackFloat64_LE(f))
  end
  
  def unpackFloat64(s as Str) as Float
    if s.length() != 8
      raise PackError()
    end
    return UnpackFloat64_LE(Reverse(s))    
  end
end


class LittleEndianPacker is PackerBase
  def packWord16(i as Int) as Str
    return Reverse(PackHalfword(i, False))
  end
  
  def unpackWord16(s as Str) as Int
    return UnpackHalfword(Reverse(s), False)
  end
  
  def packInt16(i as Int) as Str
    return Reverse(PackHalfword(i, True))
  end
  
  def unpackInt16(s as Str) as Int
    return UnpackHalfword(Reverse(s), True)
  end

  def packWord32(i as Int) as Str
    return Reverse(PackWord(i, False))
  end

  def unpackWord32(s as Str) as Int
    return UnpackWord(Reverse(s), False)
  end
  
  def packInt32(i as Int) as Str
    return Reverse(PackWord(i, True))
  end
  
  def unpackInt32(s as Str) as Int
    return UnpackWord(Reverse(s), True)
  end
  
  def packWord64(i as Int) as Str
    return Reverse(PackDword(i, False))
  end

  def unpackWord64(s as Str) as Int
    return UnpackDword(Reverse(s), False)
  end
  
  def packInt64(i as Int) as Str
    return Reverse(PackDword(i, True))
  end

  def unpackInt64(s as Str) as Int
    return UnpackDword(Reverse(s), True)
  end
  
  def packFloat32(f as Float) as Str
    return PackFloat32_LE(f)
  end
  
  def unpackFloat32(s as Str) as Float
    if s.length() != 4
      raise PackError()
    end
    return UnpackFloat32_LE(s)    
  end
  
  def packFloat64(f as Float) as Str
    return PackFloat64_LE(f)
  end
  
  def unpackFloat64(s as Str) as Float
    if s.length() != 8
      raise PackError()
    end
    return UnpackFloat64_LE(s)
  end
end


private def AssertRange(x as Int, lo as Int, hi as Int)
  if x < lo or x > hi
    raise PackError()
  end
end


private def PackWord(x as Int, signed as Boolean) as Str
  if signed
    AssertRange(x, -2**31, 2**31 - 1)
  else
    AssertRange(x, 0, 2**32 - 1)
  end
  return Chr(And(Shr(x, 24), 255)) + Chr(And(Shr(x, 16), 255)) +
         Chr(And(Shr(x, 8), 255))  + Chr(And(x, 255))
end


private def PackHalfword(x as Int, signed as Boolean) as Str
  if signed
    AssertRange(x, -32768, 32767)
  else
    AssertRange(x, 0, 65535)
  end
  return Chr(And(Shr(x, 8), 255)) + Chr(And(x, 255))
end


private def PackDword(x as Int, signed as Boolean) as Str
  if signed
    AssertRange(x, -2**63, 2**63 - 1)
  else
    AssertRange(x, 0, 2**64 - 1)
  end
  return PackWord(And(Shr(x, 32), 2**32-1), False) + 
         PackWord(And(x, 2**32-1), False)
end


private def UnpackWord(s as Str, signed as Boolean) as Int
  if s.length() != 4
    raise PackError()
  end
  var x = Shl(Ord(s[0]), 24) + Shl(Ord(s[1]), 16) +
          Shl(Ord(s[2]), 8) +  Ord(s[3])
  if signed and x > 2147483647
    x -= 4294967296
  end
  return x
end


private def UnpackHalfword(s as Str, signed as Boolean) as Int
  if s.length() != 2
    raise PackError()
  end
  var x = Shl(Ord(s[0]), 8) + Ord(s[1])
  if signed and x > 32767
    x -= 65536
  end
  return x
end


private const DwordSignedMax = 2**63 - 1 as Int

private def UnpackDword(s as Str, signed as Boolean) as Int
  if s.length() != 8
    raise PackError()
  end
  var x = Shl(UnpackWord(s[0:4], False), 32) + UnpackWord(s[4:8], False)
  if signed and x > DwordSignedMax
    x -= 2**64
  end
  return x
end


private def PackMulti<T>(a as Array<T>, f as def (T) as Str) as Str
  var r = [] as <Str>
  for i in a
    r.append(f(i))
  end
  return "".join(r)
end


private def UnpackMulti<T>(s as Str, n as Int, f as def (Str) as T) as Array<T>
  if s.length() mod n != 0
    raise PackError("Invalid string length")
  end
  var r = [] as <T>
  for i in 0 to s.length() div n
    r.append(f(s[i * n:(i + 1) * n]))
  end
  return r
end


class PackError is ValueError
end


-- FIX this is just a dummy (SLOW)
def Reverse(s as Str) as Str
  return "".join(std::Reversed(s))
end
