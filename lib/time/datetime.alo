-- datetime.alo - DateTime class
--
-- Copyright (c) 2010-2011 Jukka Lehtosalo
--
-- Alore is licensed under the terms of the MIT license.  See the file
-- LICENSE.txt in the distribution.

module time

import __time


private interface IDateTime
  def year as Int
  def month as Int
  def weekday as Int
  def day as Int
  def hour as Int
  def minute as Int
  def second as Float
end


private interface X
end


class DateTime implements IDateTime, Comparable<DateTime>,
                          Addable<Time, DateTime>
  -- Supported calling conventions:
  --   create()
  --   create(year, month, day, hour, minute, second)
  --   create(str)
  --   create(str, format)
  -- IDEA replace the last two with (Date, Time)
  def create(arg1 = nil as Str, arg2 = nil as Str, arg3 = nil as X,
             arg4 = nil as X, arg5 = nil as X, arg6 = nil as X) or
             (arg1 as Int, arg2 as Int, arg3 as Int, arg4 as Int, arg5 as Int,
              arg6 as Int) or
             (arg1 as Int, arg2 as Int, arg3 as Int, arg4 as Int, arg5 as Int,
              arg6 as Float)
    -- FIX proper argument count checks
    if arg1 is Int
      if arg2 is Int
        date, time = NormalizeDateTime(
                       Date(arg1 as Int, arg2 as Int, arg3 as Int),
                       Time(0, arg4 as Int, arg5 as Int, arg6 as dynamic))
      else
        raise TypeError("Invalid argument type")
      end
    elif arg1 is Str
      var tuple as (Int, Int, Int, Int, Int, Int, Float)
      if arg2 == nil
        tuple = ParseDateTime(DateTime, arg1 as Str, "YYYY-MM-DD hh:mm:ss.s")
      elif arg2 is Str
        tuple = ParseDateTime(DateTime, arg1 as Str, arg2 as Str)
      else
        raise TypeError("Invalid argument type")
      end
      self.date = Date(tuple[0], tuple[1], tuple[2])
      self.time = Time(0, tuple[4], tuple[5], tuple[6])
    elif arg1 == nil
      var a = Now()
      date = Date(a[0], a[1], a[2])
      time = Time(0, a[3], a[4], a[5] + a[6] / 1000000)
    else
      raise ValueError("Invalid number of arguments")
    end
  end
  
  def _str() as Str
    return format("YYYY-MM-DD hh:mm:ss")
  end
  
  def format(f as Str) as Str
    return FormatDateTime(DateTime, self, f)
  end
  
  def year as Int
    return date.year
  end
  
  def month as Int
    return date.month
  end
  
  def day as Int
    return date.day
  end
  
  def hour as Int
    return time.hour
  end
  
  def minute as Int
    return time.minute
  end
  
  def second as Float
    return time.second
  end
  
  def weekday as Int
    return date.weekday
  end
  
  def week(rule = FirstFourDayWeek as Constant) as Int
    return date.week(rule)
  end
  
  def _eq(x as Object) as Boolean
    if x is DateTime
      var dt = (x as DateTime)
      return dt.year == year and dt.month == month and
             dt.day == day and dt.hour == hour and dt.minute == minute and
             dt.second == second
    else
      return False
    end
  end
  
  def _lt(x as DateTime) as Boolean
    return (year, month, day, hour, minute, second) <
           (x.year, x.month, x.day, x.hour, x.minute, x.second)
  end
  
  def _gt(x as DateTime) as Boolean
    return (year, month, day, hour, minute, second) >
           (x.year, x.month, x.day, x.hour, x.minute, x.second)
  end
  
  def _add(x as Time) as DateTime
    if not x is DateTime
      return DateTime(year, month, day + x.day, hour + x.hour,
                      minute + x.minute, second + x.second)
    else
      raise TypeError("Time value expected")
    end
  end
  
  def _sub(x as DateTime) as Time or
          (x as Time) as DateTime
    if x is DateTime
      var d = (x as DateTime)
      return Time(date - Date(d.year, d.month, d.day), hour - d.hour,
                  minute - d.minute, second - d.second) as dynamic
    else
      return self + -(x as Time) as dynamic
    end
  end
  
  def _hash() as Int
    return Hash((date, time))
  end
  
  private const date as Date
  private const time as Time
end


private def NormalizeDateTime(d as Date, t as Time) as (Date, Time)
  if t.day >= 1
    d += t.day
    t = Time(0, t.hour, t.minute, t.second)
  elif t < Time(0)
    d = d - 1 + t.day
    t = Time(1, t.hour, t.minute, t.second)
  end
  return d, t
end
