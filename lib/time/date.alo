-- date.alo - Date class
--
-- Copyright (c) 2010-2011 Jukka Lehtosalo
--
-- Alore is licensed under the terms of the MIT license.  See the file
-- LICENSE.txt in the distribution.

module time

import __time
import string


-- Rules for determining the first week of a year
const FirstWeek
const FirstFourDayWeek
const FirstFullWeek


class Date implements Comparable<Date>, Addable<Int, Date>
  -- Supported calling conventions:
  --   create()
  --   create(year, month, day)
  --   create(str)
  --   create(str, format)
  def create(arg1 = nil as Str, arg2 = nil as Str, arg3 = nil as X) or
            (arg1 as Int, arg2 as Int, arg3 as Int)
    -- FIX proper argument count checks
    if arg1 is Str
      var tuple as (Int, Int, Int, Int, Int, Int, Float)
      if arg2 is Str
        tuple = ParseDateTime(Date, arg1 as Str, arg2 as Str)
      else
        tuple = ParseDateTime(Date, arg1 as Str, "YYYY-MM-DD")
      end
      self.year, self.month, self.day = tuple[0], tuple[1], tuple[2]
    elif arg1 != nil
      if arg2 is Int
        self.year, self.month, self.day =
          NormalizeDate(arg1 as Int, arg2 as Int, arg3 as Int)
      else
        raise ValueError("Invalid types")
      end
    else
      self.year, self.month, self.day = Now()[:3]
    end
    if self.year < 1
      raise ValueError("Year must be at least 1 (given {})".format(year))
    end
  end

  def _str() as Str
    return "{0000}-{00}-{00}".format(year, month, day)
  end

  def format(f as Str) as Str
    return FormatDateTime(Date, DateFormatWrapper(self), f)
  end

  const day as Int
  const month as Int
  const year as Int

  def weekday as Int
    var y = year
    var n = y * 365 + day + (y - 1) div 4 - (y - 1) div 100 + (y - 1) div 400
    for m in 1 to month
      n += DaysInMonth(year, m)
    end
    return (n - 2) mod 7 + 1
  end

  def week(rule = FirstFourDayWeek as Constant) as Int
    var d = Date(year, 1, 1)
    var wday = d.weekday
    var w as Int
    switch rule
      case FirstFourDayWeek
        if wday > 4
          -- The next week is the first week
          w = 0
        else
          w = 1
        end
      case FirstWeek
        w = 1
        d -= w - 1
      case FirstFullWeek
        if wday == 1
          w = 1
        else
          w = 0
        end
      else
        raise ValueError("Invalid week rule")
    end
    d += (7 - wday)
    while self > d
      d += 7
      w += 1
    end
    if w == 0
      w = Date(year, month, day - 7).week(rule) + 1
    else
      var weekLast = d + (7 - d.weekday)
      if weekLast.year > year
        w = weekLast.week(rule)
      end
    end
    return w
  end

  def _add(x as Int) as Date
    return Date(year, month, day + x)
  end

  def _sub(x as Date) as Int or
          (x as Int) as Date
    if x is Int
      return Date(year, month, day - (x as Int)) as dynamic
    else
      var d = (x as Date)
      if self < d
        return -(d - self) as dynamic
      end
      var dd = self
      var n = 0
      while dd.year - 1 > d.year
        dd -= 365
        n += 365
      end
      while dd.year > d.year or dd.month > d.month
        n += dd.day
        dd -= dd.day
      end
      return n + dd.day - d.day as dynamic
    end
  end

  --def _eq(x as Object) as Boolean
  def _eq(x)
    if x is Date
      var d = (x as Date)
      return day == d.day and month == d.month and year == d.year
    else
      return False
    end
  end

  def _lt(d as Date) as Boolean
    return year < d.year or (year == d.year and
      (month < d.month or (month == d.month and day < d.day)))
  end

  def _gt(d as Date) as Boolean
    return year > d.year or (year == d.year and
      (month > d.month or (month == d.month and day > d.day)))
  end

  def _hash() as Int
    return Hash((year, month, day))
  end
end


private const MonthShortNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"] as Array<Str>

private const MonthNames = ["January", "February", "March", "April", "May",
  "June", "July", "August", "September", "October", "November",
  "December"] as Array<Str>

private const WeekdayShortNames = [
  "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] as Array<Str>

private const WeekdayNames = [
  "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday",
  "Sunday"] as Array<Str>


private def NormalizeDate(year as Int, month as Int, day as Int) as
                                                           (Int, Int, Int)
  while month > 12
    year += 1
    month -= 12
  end
  while month < 1
    year -= 1
    month += 12
  end
  while day > DaysInMonth(year, month)
    day -= DaysInMonth(year, month)
    month += 1
    if month == 13
      month = 1
      year += 1
    end
  end
  while day < 1
    month -= 1
    if month == 0
      month = 12
      year -= 1
    end
    day += DaysInMonth(year, month)
  end
  return year, month, day
end


private const MonthDays = Map(
  1 : 31, 3 : 31, 4 : 30, 5 : 31, 6 : 30, 7 : 31, 8 : 31, 9 : 30, 10 : 31,
  11 : 30, 12 : 31) as Map<Int, Int>


def DaysInMonth(year as Int, month as Int) as Int
  if month < 1 or month > 12
    raise ValueError("Invalid month ({})".format(month))
  end
  if month == 2
    if year mod 4 == 0 and (year mod 100 != 0 or year mod 400 == 0)
      return 29
    else
      return 28
    end
  else
    return MonthDays[month]
  end
end


private class DateFormatWrapper implements IDateTime
  const date as Date

  def year as Int
    return self.date.year
  end

  def month as Int
    return self.date.month
  end

  def weekday as Int
    return self.date.weekday
  end

  def day as Int
    return self.date.day
  end

  def hour as Int
    raise ValueError()
  end

  def minute as Int
    raise ValueError()
  end

  def second as Float
    raise ValueError()
  end
end
