-- time.alo - Time class
--
-- Copyright (c) 2010-2011 Jukka Lehtosalo
--
-- Alore is licensed under the terms of the MIT license.  See the file
-- LICENSE.txt in the distribution.

module time

import __time
import string
import math


class Time implements Comparable<Time>, Addable<Time, Time>, 
                      Addable<DateTime, DateTime>, Multipliable<Int, Time>, 
                      Multipliable<Float, Time>
  -- Supported calling conventions:
  --   create()
  --   create(str)
  --   create(str, format)
  --   create(days, hours, minutes, seconds)
  --   create(seconds)
  def create(arg1 = nil as Str, arg2 = nil as Str, arg3 = nil as X, 
             arg4 = nil as X) or
            (arg1 as Int, arg2 as Int, arg3 as Int, arg4 as Int) or
            (arg1 as Int, arg2 as Int, arg3 as Int, arg4 as Float) or
            (arg1 as Int) or
            (arg1 as Float)
    -- FIX proper argument count checks
    if arg1 is Str
      var tuple as (Int, Int, Int, Int, Int, Int, Float)
      if arg2 == nil
        var fmt = "-d\d h:mm:ss.s"
        if not "d" in (arg1 as Str)
          fmt = "-h:mm:ss.s"
        end
        tuple = ParseDateTime(Time, arg1 as Str, fmt)
      elif arg2 is Str
        tuple = ParseDateTime(Time, arg1 as Str, arg2 as Str)
      else
        raise ValueError("Invalid argument type")
      end
      var y, m, md, days, mins, hours, sec = tuple
      secs, nsecs = NormalizeTime(days, mins, hours, sec)
    elif arg1 != nil
      if arg2 != nil
        secs, nsecs = NormalizeTime(arg1 as Int, arg2 as Int, arg3 as Int, 
                                    Float(arg4))
      else
        secs, nsecs = NormalizeTime(0, 0, 0, Float(arg1))
      end
    else
      -- Empty arguments.
      var h, m, s, us = Now()[3:7]
      secs, nsecs = NormalizeTime(0, h, m, s + us / 1e6)
    end
  end
  
  def _str() as Str
    if day == 0
      return format("-hh:mm:ss.ss")
    else
      return format("-d\d hh:mm:ss.ss")
    end
  end
  
  def format(f as Str) as Str
    return FormatDateTime(Time, TimeFormatWrapper(self), f)
  end
  
  def day as Int
    if nonNegative()
      return secs div 86400
    else
      return -(-secs div 86400)
    end
  end
  
  def hour as Int
    if nonNegative()
      return secs div 3600 mod 24
    else
      return -(-secs div 3600 mod 24)
    end
  end
  
  def minute as Int
    if nonNegative()
      return secs div 60 mod 60
    else
      return -(-secs div 60 mod 60)
    end
  end
  
  def second as Float
    if nonNegative()
      return secs mod 60 + nsecs / 1e9
    else
      return -(-secs mod 60 - nsecs / 1e9)
    end
  end
  
  def toSeconds() as Float
    return secs + nsecs / 1e9
  end
  
  def toNanoSeconds() as Int
    return secs * 10**9 + nsecs
  end
  
  def _float() as Float
    return self.toSeconds()
  end
  
  def _eq(x as Object) as Boolean
    if x is Time
      var t = (x as Time)
      return t.day == day and t.hour == hour and t.minute == minute and 
             t.second == second
    else
      return False
    end
  end
  
  def _lt(x as Time) as Boolean
    return (day, hour, minute, second) < (x.day, x.hour, x.minute, x.second)
  end
  
  def _gt(x as Time) as Boolean
    return (day, hour, minute, second) > (x.day, x.hour, x.minute, x.second)
  end
  
  def _add(x as DateTime) as DateTime or
          (x as Time) as Time
    if x is DateTime
      return x + self as dynamic
    else
      return Time(x.day, x.hour, x.minute, 
                  x.second + secs + nsecs / 1e9) as dynamic               
    end
  end
  
  def _sub(x as Time) as Time
    return Time(-x.day, -x.hour, -x.minute, secs + nsecs / 1e9 - x.second)
  end
  
  def _neg() as Time
    return Time(-day, -hour, -minute, -second)
  end
  
  def _mul(x as Int) as Time or
          (x as Float) as Time
    return Time((secs + nsecs / 1e9) * x)
  end
  
  def _div(x as Int) as Time or
          (x as Float) as Time
    return self * (1 / x)
  end
  
  def _hash() as Int
    return Hash((secs, nsecs))
  end
  
  -- Total number of seconds (Int). The sign is the same as of the time value.
  private const secs as Int
  -- Nanooseconds (integer between -10**9 and 10**9, not inclusive). The sign 
  -- is the same as of the time value.
  private const nsecs as Int
  
  private def nonNegative() as Boolean
    return secs >= 0 and nsecs >= 0
  end
end


private def NormalizeTime(d as Int, h as Int, m as Int, s as Float) as 
                                                              (Int, Int)
  -- Integral part of total number of seconds.
  var secs = Int(d * 86400 + h * 3600 + m * 60 + Int(Trunc(s)))
  -- Absolute value of the fractional part of s, in nanoseconds.
  var nsecs = Int((Abs(s) - Int(Abs(s))) * 1e9 + 0.5)
  
  -- Limit nanosecond range after rounding.
  if nsecs == 1000000000
    nsecs = 0
    if s >= 0
      secs += 1
    else
      secs -= 1
    end
  end
  
  if secs < 0 and s > 0 and nsecs > 0
    secs += 1
  end
  if s < 0 and secs > 0 and nsecs > 0
    secs -= 1
  end
  
  -- Calculate the final nanoseconds value.
  if nsecs != 0
    if secs < 0 and s > 0
      nsecs = -(10**9 - nsecs)
    elif secs < 0 or (secs == 0 and s < 0)
      nsecs = -nsecs
    elif secs > 0 and s < 0
      nsecs = 10**9 - nsecs
    end
  end
  
  return secs, nsecs
end


private class TimeFormatWrapper implements IDateTime
  const time as Time
  
  def year as Int
    raise ValueError()
  end
  
  def month as Int
    raise ValueError()
  end
  
  def weekday as Int
    raise ValueError()
  end
  
  def day as Int
    return self.time.day
  end
  
  def hour as Int
    return self.time.hour
  end
  
  def minute as Int
    return self.time.minute
  end
  
  def second as Float
    return self.time.second
  end
end
