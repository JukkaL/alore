module complex

-- A basic complex number class with static typing. This example illustrates
-- the following features:
--
--   * module definition
--   * class definition
--   * operator overloading (methods such as _eq and _add)
--
-- See also the example "complex2" for a more elaborate implementation of
-- complex numbers.

import math


-- Examples:
--   Complex(0.0, -2.0)                         (complex number -2.0j)
--   Complex(0.0, 2.0) + Complex(1.5, -0.5)     (complex addition)


class Complex
  const re as Float
  const im as Float
  
  -- Since we don't define a constructor, we get the default constructor 
  -- create(re, im).
  
  -- Absolute value.
  def abs() as Float
    return Sqrt(re**2 + im**2)
  end

  -- Complex conjugate.
  def conj() as Complex
    return Complex(re, -im)
  end

  -- Conversion to string; allows Str(complex).
  def _str() as Str
    if im >= 0
      return '({} + {}j)'.format(re, im)
    else
      return '({} - {}j)'.format(re, -im)
    end
  end

  -- The "==" operation.
  def _eq(n as Object) as Boolean
    if n is Complex
      var c = (n as Complex)    -- Downcast to Complex
      return re == c.re and im == c.im
    else
      return False
    end
  end

  -- The "+" operation.
  def _add(c as Complex) as Complex
    return Complex(re + c.re, im + c.im)
  end

  -- The "-" operation.
  def _sub(c as Complex) as Complex
    return Complex(re - c.re, im - c.im)
  end

  -- The "*" operation.
  def _mul(c as Complex) as Complex
    return Complex(re * c.re - im * c.im,
                   im * c.re + re * c.im)
  end

  -- The "/" operation.
  def _div(c as Complex) as Complex
    var d = c.re**2 + c.im**2
    return Complex((re * c.re + im * c.im) / d,
                   (im * c.re - re * c.im) / d)
  end
end
