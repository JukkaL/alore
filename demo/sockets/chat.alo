-- Usage: chat.alo                  (for server)
--        chat.alo SERVER-ADDR      (for client)
--
-- Simple socket-based chat client/server. Input from the client is displayed
-- on the server and vice versa. First start the server, then start the client
-- to create a connection.

import io, socket, serversocket, thread, sys


const Port = 9991


def Main(args)
  var socket

  if args == []
    WriteLn('Waiting for a connection on port {}...'.format(Port))
    socket = ServerSocket(Port).accept(Unbuffered)
    WriteLn('Connected. ({})'.format(socket.remoteAddress()))
  else
    WriteLn('Connecting to {}:{}...'.format(args[0], Port))
    socket = Socket(args[0], Port, Unbuffered)
    WriteLn("Connected.")
  end

  var eof = 'Control-D'
  if Platform == "windows"
    eof = 'Control-Z'
  end
  WriteLn('Enter some input; use {} to exit.'.format(eof))

  var cv = Condition()

  -- Use one thread for processing remote input and another for local input.
  Thread(def ()
           Listen(socket, cv)
         end)
  Thread(def ()
           ProcessInput(socket, cv)
         end)

  -- Wait until the user enters EOF or the remote closes the socket.
  var m = Mutex()
  m.lock()
  cv.wait(m)

  socket.close()
end


def ProcessInput(socket, cv)
  while not StdIn.eof()
    var s = ReadLn()
    socket.writeLn(s)
  end
  cv.signal()
end


def Listen(socket, cv)
  while not socket.eof()
    WriteLn('>> ', socket.readLn())
  end
  WriteLn('Connection closed by remote.')
  cv.signal()
end
