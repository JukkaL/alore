module testparser

import unittest


class LineContinuationSuite is Suite
  def testBinaryOperators()
    AssertEqual(1 + 
                2, 3)
    AssertEqual(2 * 
                3, 6)
    AssertEqual(2 - 
                3, -1)
    AssertEqual(1 / 
                2, 0.5)
    AssertEqual(5 div
                2, 2)
    AssertEqual(7 mod
                3, 1)
    AssertEqual(2 **
                3, 8)
    
    AssertEqual(1 == 
                3, False)
    AssertEqual(1 != 
                3, True)
    AssertEqual(1 < 
                3, True)
    AssertEqual(1 <=
                3, True)
    AssertEqual(1 >    
                3, False)
    AssertEqual(1 >=
                3, False)
                
    AssertEqual(1 is
                Int, True)
    AssertEqual(1 in
                (2, 3), False)
    AssertEqual(1 to
                2, 1 to 2)
    AssertEqual(1 :
                2, 1 : 2)
                
    AssertEqual(True and
                False, False)
    AssertEqual(False or
                True, True)
  end
  
  def testPunctuators()
    AssertEqual((
                 1, 2), (1, 2))
    AssertEqual([
                 1, 2], [1, 2])
    AssertEqual([1,
                 2], [1, 2])
  end
  
  def testAssignment()
    var a =
      1
    AssertEqual(a, 1)
    
    a +=
      1
    AssertEqual(a, 2)
    
    a *= 
      3
    AssertEqual(a, 6)
    
    a -=     
      4
    AssertEqual(a, 2)
    
    a **=
      3
    AssertEqual(a, 8)
    
    a /= 
      2    
    AssertEqual(a, 4.0)
  end
  
  def testMultipleNewlines()
    var a =    1   +      -- Comment
    
                          -- Comment
                          
                 3
    AssertEqual(a, 4)
  end
  
  def testSemicolonAfterGt()
    -- The > operator has special behavior, since it is often at line end in
    -- annotations. Therefore ignoring the line break is done in the parser
    -- and not the lexer, which results in slightly unintuitive behavior,
    -- as also semicolons are ignored after the operator.
    AssertEqual(2 >; 1, True)
    AssertEqual(2 > ; ; 3, False)
  end
end
