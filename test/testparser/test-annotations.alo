module testparser

-- This file contains test cases for parsing type annotations. The tested
-- functionality is included directly within this file.
--
-- All parse error test cases are included in CompileErrorSuite.
--
-- IDEA: Provide separate test cases for an implementation that simply ignores
--       type annotations.
--
-- FIX: Maybe load (some of) the tested code dynamically and only when not
--      doing runtime type checking. This file will produce runtime type
--      errors if the implementation does proper runtime type checking.

import unittest


class AnnotationsSuite is Suite
  def testClassAnnotation()
    AssertEqual(Ann1().f(1), 6)
    AssertEqual(Ann2().f(2), 7)
    AssertType(Ann2, Ann2())
  end

  def testFunctionAnnotation()
    AssertEqual(F(44), 45)
  end

  def testAnonFunctionAnnotation()
    var f = def (x as def ()) as Int; return x - 2; end
    var g = def (x) as def (); return x - 2; end
    AssertEqual(f(5), 3)
  end

  def testPairConstructorInDefaultArgumentValue()
    var f = def (x = 1 : 2) as Object; return x; end
    AssertEqual(f(), 1 : 2)
  end

  def testGetterAnnotations()
    var a = Ann2()
    AssertEqual(a.p, "x")
  end

  def testSetterAnnotations()
    var a = Ann2()
    a.p = 13
    AssertEqual(a.x, 13)
  end

  def testVarDefAnnotations()
    var a = 1 as def ()
    AssertEqual(a, 1)

    var b, c = (1 as Int), [5 as Int] as (def (), ())
    AssertEqual(b, 1)
    AssertEqual(c, [5])

    var d as def ()
    AssertEqual(d, nil)
    d = 4
    AssertEqual(d, 4)

    var e, f as ((), def ())
    AssertEqual((e, f), (nil, nil))
    e, f = 1, 2
    AssertEqual((e, f), (1, 2))
  end

  def testVarDefWithAnonFunction()
    var a = def (x)
              var a2 as Int
            end as Str
    var b = def (x = def ()
                       var b2 as Int
                      end)
              var b3 as Int
            end as Int
    var c = (def (x = def ()
                       var b2 as Int
                      end)
              var b3 as Str
             end as Function) as Int
  end

  def testConstAnnotations()
    AssertType(Constant, C1)
    AssertEqual(C2, 3)
    AssertType(Constant, C3)
    AssertType(Constant, C4)
    AssertEqual((C5, C6), (nil, 3))
  end

  -- Initializer with various expression in it: and, or, array constructor
  -- etc.
  def testInitializer()
    var a = (False or True) and True as Int
    AssertEqual(a, True)
    var b = 1, (2, 3), 3 + 5 as Int
    AssertEqual(b, (1, (2, 3), 8))
  end

  def testMethodAnnotations()
    AssertEqual(Ann1().g(), 77)
  end

  def testForLoopAnnotations()
    for x as def () in 1, 2, 3
    end
  end

  def testComplexFunctionSignature()
    var f = def (x, y = def () as Int; end as Int, *z) as Int
              return x, y
            end as Int
    var a, b = f(1)
    AssertEqual(a, 1)
  end

  def testInlineAnnotationsInInitialization()
    var a = [1, 2, 3] as <def ()> + [4]
    AssertEqual(a, [1, 2, 3, 4])

    var aa = (1, 2) as <Int, Int>
    AssertEqual(aa, (1, 2))

    var b = a.find(2) as <def ()>
    AssertEqual(b, 1)

    AssertEqual(I, [3, 3])
  end

  def testInlineAnnotationsInStatements()
    var a

    -- Assignment
    a = 3 as <def()> * 4
    AssertEqual(a, 12)
    AssertEqual(I2, [3, 1])

    -- Return
    AssertEqual(def ()
                  return 5 as <def()> * 2
                end(), 10)

    -- If
    var b
    if 1 as <def()> < 2
      b = 2
    end
    AssertEqual(b, 2)

    -- While
    b = 0
    while b as <def()> < 2
      b += 3
    end
    AssertEqual(b, 3)

    -- For
    b = 0
    for x in (1, 2, 3) as <def ()>
      b += x
    end
    AssertEqual(b, 6)
  end

  def testInlineAnnotationsInDefaultArgs()
    -- Anonymous function
    var f = def (x = [1, 2].find(1) as <def ()>)
              return x
            end
    AssertEqual(f(), 0)

    -- Global function
    AssertEqual(F3(), 3)

    -- Method
    AssertEqual(Ann1().h(), 8)
  end

  def testComplexInlineAnnotation()
    var a = [1, 2, 3] as <Map<Map<Int, Str>, (Int, Str)>> + [4]
    AssertEqual(a, [1, 2, 3, 4])
    var b = [1, 2] as <(((A,),),)> + [3]
    AssertEqual(b, [1, 2, 3])
  end

  def testGenericFunctionAnnotation()
    AssertEqual(FG(3), 10)
  end

  def testIntersectionTypeAnnotation()
    AssertEqual(Isect1(4), 7)
    AssertEqual(Isect2(5, 6), 11)
    AssertEqual(Isect3(5), 9)
    AssertEqual(Isect4(5), 10)
    AssertEqual(Isect5(3, 4), 8)
    AssertEqual(Isect6(6, 4), 2)
    AssertEqual(Isect7(5), 30)
  end

  def testIntersectionTypeAnnotationWithVaryingArgCounts()
    AssertEqual(IsectWithVaryingCounts(), 6)
    AssertEqual(IsectWithVaryingCounts(4), 8)
  end

  def testLineContinuationAfterAs()
    AssertEqual(Cont(4), 4)
  end

  def testFunctionWithAnnotationAndAnonFunction()
    AssertEqual(FGanon('x'), 'x')
  end
end


private class Ann1<T>
  def f(x as def ()) as Int
    return 5 + (x as dynamic)
  end

  def g() as def()
    return 77 as dynamic
  end

  def h(x = (1 + 2 as dynamic) as def ())
    return 5 + (x as dynamic)
  end

  def j(x = 5 as <def()> + 2)
    return x
  end
end


private class Ann2<T is def ()> is Ann1<Map<T, def ()>>
  var x

  def p as def ()
    return "x" as dynamic
  end

  def p = n as def ()
    x = n
  end
end


private def F(x as def ()) as def ()
  return (x as dynamic) + 1 as dynamic
end


private const N = 3

private const C1 as Constant
private const C2 = N as def (Int, Str)
private const C3, C4 as (Constant, Constant)
private const C5, C6 = nil, 3 as (def (), Int)


private var I = [N, N] as <def ()>
private var I2
I2 = [N] as <def ()> + [1]


private def F3(x = (1, 3) as <def()>[1])
  return x
end


private def FG<T is Array<Int>, S is (((def (),),),)>(x as def ()) as def ()
  return (x as dynamic) + 7 as dynamic
end


private def Isect1(x as Int) or
                  (x as Float)
  return x + 3 as dynamic
end


private def Isect2(x as Int, y as (Array<Array<Int>>, Int)) or
                  (x as def (), y as def ())
  return (x as dynamic) + y as dynamic
end


private def Isect3(x as Int) as def (Array<Int>) or
                  (x as Float) as def (Array<Int>)
  return x + 4 as dynamic
end

private def Isect4<T is def(), S is def(Array<Int>)>(x as Int) or
                  <T is def(), S is def(Array<Int>)>(x as Float)
  return x + 5 as dynamic
end

private def Isect5(a as Int, b = nil as Int) or
                  (a as Float, b= as def (Array<Int>))
  return (a as dynamic) + b + 1 as dynamic
end

private def Isect6(a as Int, *b as Float) or
                  (a as Float, *b as Int)
  return a - b[0] as dynamic
end

private def Isect7(a as Int) or
                  (a as Float) or
                  (a as Str)
  return a * 6 as dynamic
end


-- Function with intersection type that has different number of accepted
-- arguments in different intersection items. Checking calls to functions
-- (and types) like this was broken initially.
private def IsectWithVaryingCounts(a = nil as Int) or
                                  (a       as Str)
  if a == nil
    return 6 as dynamic
  else
    return a * 2 as dynamic
  end
end


-- Line continuation after "as".
private def Cont(a) as
  Int
  return a
end


-- Function with an annotation + anonymous function that accesses variables
-- defined in the outer scope.
private def FGanon<T>(s)
  return def ()
           return s
         end()
end
