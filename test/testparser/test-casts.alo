module testparser

-- Test cases for parsing cast expressions. 
--
-- See also runtime::CastsSuite.

import unittest


class ParseCastsSuite is Suite
  def testCastInInitialization()
    var a = 1 as ()
    AssertRaises(CastError, def (); var b = (1 as Float) as (); end)
  end
  
  def testCastInRvalue()
    var a
    AssertRaises(CastError, def (); a = 1 as Float; end)
  end
  
  def testCastInDefaultArgExpression()
    AssertEqual(m1(3), 3)
    AssertEqual(m2(3), 3)
    AssertRaises(CastError, def (); m2(3.0); end)
  end
  
  def testCastInMultipleInitialization()
    var a, b = 1, 2 as (Str, Str)
    AssertEqual((a, b), (1, 2))
    var c, d = (1 as Int), [2.0 as Float]
    AssertEqual((c, d), (1, [2.0]))
  end
  
  def testCastInMultipleAssignment()
    var a, b
    a, b = 1 as Int, 2.0 as Float
    AssertEqual((a, b), (1, 2.0))
    AssertRaises(CastError, def (); a, b = 1 as Int, 2.0 as Int; end)
  end
  
  def testCastInLvalue()
    var a = [4]
    a[0 as Int] = 22
    AssertRaises(CastError, def (); a[0 as Float] = 22; end)    
    
    a[0 as Int], a[0 as Int] = 22, 22
    AssertRaises(CastError, def (); a[0 as Float], a[0] = 22, 22; end)    
    AssertRaises(CastError, def (); a[0], a[0 as Float] = 22, 22; end)
  end
  
  def testPrecedence()
    AssertEqual([] as Array.length(), 0)
    AssertEqual(2.0 : 1 as Pair, 2.0 : 1)
    
    var r = 1 to 5
    AssertEqual(r.start as Int, 1)
    AssertEqual(1.0 + 1 as Float, 2.0)
  end
  
  def testCastInStatements()
    AssertRaises(CastError, def ()
                              if 1 as Float
                              end
                            end)
    AssertRaises(CastError, def (); return 1 as Float; end)
    AssertRaises(CastError, def ()
                              while 1 as Float
                              end
                            end)
    AssertRaises(CastError, def ()
                              for a in 1 as Float
                              end
                            end)
  end
  
  -- "as" declaras the type of an argument.
  private def m1(x, y = x as Int) as Int
    return y
  end
  -- "as" is used both as a cast and as a declaration.
  private def m2(x, y = (x as Int) as Int) as Int
    return y
  end
end
