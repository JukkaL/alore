-- io module test cases

module libs

import unittest
import io
import __testc
import iohelpers


class IOSuite3 is Suite
  def testStreamReadLine()
    TestReadLine("foo")
    for sep in LineSeparators
      for i in 1 to NumNewlineStr + 1
        TestReadLine(GetNewlineStr(i, sep))
        for j in 3, 9
          TestReadLine(GetStr(j), GetNewlineStr(i, sep))
          TestReadLine(GetNewlineStr(i, sep), GetStr(j))
        end
      end
    end

    TestReadLine(CR, LF)
  end

  def testStreamWrite()
    for i in 1 to NumStr + 1
      TestWrite([GetStr(i)])
    end
    for i in 1 to NumStr + 1
      for j in 1 to NumStr + 1
        TestWrite([GetStr(i)], [GetStr(j)])
        TestWrite((GetStr(i), GetStr(j)))
      end
    end
  end

  def testStreamRead()
    for i in 2 to NumStr + 1
      if i != 6
        TestRead(GetStr(i))
      end
    end
    for i in 2 to NumStr + 1
      for j in 2 to NumStr + 1
        if i != 6 and j != 6
          TestRead(GetStr(i), GetStr(j))
        end
      end
    end
    TestRead(GetStr(9), GetStr(4), GetStr(9), GetStr(4))
  end

  def testStreamReadAll()
    for i in 2 to NumStr + 1
      if i != 6
        TestReadAll(GetStr(i))
      end
    end

    for i in 2 to NumStr + 1
      for j in 2 to NumStr + 1
        if i != 6 and j != 6
          TestReadAll(GetStr(i), GetStr(j))
        end
      end
    end
  end

  -- Class that implements stream reading with customized return values.
  -- FIX test returning invalid stuff from _read
  -- FIX test raising an exception in _write
  -- FIX mixing read and readline
end


private def TestWrite(*a)
  -- Test write.
  for m in OutputModes
    var o = WriteStream(*m)
    var s = ""
    for x in a
      o.write(*x)
      for y in x
        s += Str(y)
      end
    end
    o.flush()
    Assert(o.s == s)
  end

  -- Test writeLn.
  for m in OutputModes
    var o = WriteStream(*m)
    var s = ""
    for x in a
      o.writeLn(*x)
      for y in x
        s += Str(y)
      end
      s += Newline
    end
    o.flush()
    Assert(o.s == s)
  end
end


private class WriteStream is Stream
  def create(*m)
    super.create(*m)
  end

  def _write(*aa)
    for x in aa
      s += x
    end
  end

  var s = ""
end


private def TestRead(*a)
  -- Build the whole string from fragments.
  var s = ""
  for x in a
    s += x
  end

  -- First read a single character, then all but the last, then the last
  -- character.
  for m in InputModes
    var r = ReadStream(a, *m)
    var s2 = r.read(1)
    Assert(s2 == s[0])
    if s.length() > 2
      s2 = r.read(s.length() - 2)
      Assert(s2 == s[1:-1])
    end
    if s.length() > 1
      s2 = r.read(1)
      Assert(s2 == s[-1])
    end
    Assert(r.eof())
  end

  -- Read the whole contents of the stream at once.
  for m in InputModes
    var r = ReadStream(a, *m)
    var s2 = r.read(s.length() + 1)
    Assert(s == s2)
    Assert(r.eof())
  end
end


private def TestReadLine(*a)
  var s = ""
  for x in a
    s += x
  end

  for m in InputModes
    var r = ReadStream(a, *m)

    var i = 0
    while i < s.length()
      if m[1] != Unbuffered
        Assert(not r.eof())
      end

      var lin = r.readLn()

      -- Figure out what should have been returned.
      var i0 = i
      while i < s.length() and s[i] != CR and s[i] != LF
	i = i + 1
      end

      if lin != s[i0:i]
        Write("<")
        WriteEsc(lin)
        WriteLn(">")
        Write("<")
        WriteEsc(s[i0:i])
        WriteLn(">")
      end

      Assert(lin == s[i0:i])

      -- Skip line separator.
      if i < s.length()
	if s[i] == CR and i < s.length() - 1 and s[i + 1] == LF
	  i += 2
	else
	  i += 1
	end
      end
    end
    Assert(r.eof())

    -- Try readLn() at end of file.
    var f = 0
    try
      f = r.readLn()
    except IoError
      f = 1
    end
    Assert(f == 1)
  end
end


private def TestReadAll(*a)
  var s = ""
  for x in a
    s += x
  end
  for m in InputModes
    -- Read the whole stream in one operation.
    var r = ReadStream(a, *m)
    var s2 = r.read()
    Assert(s == s2)
    AssertRaises(IoError, def (); r.eof(); end)

    -- Read all but the first character of the stream in one operation.
    r = ReadStream(a, *m)
    Assert(r.read(1) == s[0])
    s2 = r.read()
    Assert(s2 == s[1:])
  end
end


private class ReadStream is Stream
  def create(aa, *m)
    super.create(*m)
    a = [nil] * aa.length()
    for i in 0 to a.length()
      a[i] = aa[i]
    end
    ind = 0
  end

  def _read(l)
    if ind >= a.length()
      return nil
    elif l < a[ind].length()
      var s = a[ind][:l]
      a[ind] = a[ind][l:]
      return s
    else
      ind += 1
      return a[ind - 1]
    end
  end

  private var a
  private var ind
end
