module libs

import unittest
import set


-- Test cases for the std::Map class.
class StdMapSuite is Suite
  -- Test basic indexing and length calculation.
  def testBasics()
    var m = Map()
    Assert(m.length() == 0)
    m["foo"] = 2
    Assert(m.length() == 1)
    Assert(m["foo"] == 2)
    m[37] = "bar"
    Assert(m.length() == 2)
    Assert(m[37] == "bar")
    Assert(m["foo"] == 2)
    m["foo"] = 3
    Assert(m.length() == 2)
    Assert(m["foo"] == 3)
  end
  
  -- Test initialization at construction.
  def testCreate()
    var m = Map(1 : "foo", 2 : "bar")
    Assert(m.length() == 2)
    Assert(m[1] == "foo")
    Assert(m[2] == "bar")
    
    m = Map(1 : 2, 1 : 3)
    Assert(m.length() == 1)
    Assert(m[1] == 3)
  end
  
  -- Test the get method.
  def testGet()
    var m = Map(12 : "foo", 37 : "bar")
    AssertEqual(m.get(13, 99), 99)
    AssertEqual(m.get(12, 99), "foo")
  end
  
  -- Test the hasKey method.
  def testHasKey()
    var m = Map(12 : "foo", 37 : "bar")
    Assert(m.hasKey(12))
    Assert(m.hasKey(37))
    Assert(not m.hasKey(11))
    Assert(not m.hasKey("foo"))
    Assert(not m.hasKey(""))
    m["foo"] = 999
    Assert(m.hasKey("foo"))
  end
  
  -- Test removing items from Map.
  def testRemove()
    var m = Map(12 : "foo", 37 : "bar")
    Assert(m.length() == 2)
    m.remove(12)
    Assert(not m.hasKey(12))
    Assert(m.length() == 1)
    m.remove(37)
    Assert(not m.hasKey(37))
    Assert(m.length() == 0)
    m[37] = "hup"
    Assert(m.length() == 1)
    Assert(m[37] == "hup")
  end
  
  -- Test growing the hash table and emptying it after growing.
  def testResize()
    var m = Map()
    for i in 1 to 1001
      m[i * 7 - 300] = i * 3 + 1
      Assert(m.length() == i)
    end
    for i in 1 to 1001
      Assert(m[i * 7 - 300] == i * 3 + 1)
    end
    for i in 1 to 1001
      m.remove(i * 7 - 300)
      Assert(not m.hasKey(i * 7 - 300))
      Assert(m.length() == 1000 - i)
    end
    for i in 1 to 1001
      Assert(not m.hasKey(i * 7 - 300))
    end
  end
  
  -- Test iterating Map objects.
  def testIteration()
    TestMapEnum()
    TestMapEnum(1 : 2)
    TestMapEnum(1 : 2, 2 : 3, 4 : 7)
    TestMapEnum(1 : 2, 17 : 3, 33 : 7)
    var l = []
    for i in 1 to 101
      l.append(i * 7 - 50 : i + 2)
    end
    TestMapEnum(*l)
  end
  
  -- Test manually calling the iterator methods.
  def testIterationMethods()
    var m = Map(1 : "a", 5 : "e", 3 : "c")
    var a = []
    var e = m.iterator()
    Assert(e.hasNext())
    Assert(e.hasNext())
    Assert(e.hasNext())
    Assert(e.hasNext())
    Assert(e.hasNext())
    var i = e.next()
    Assert(i is Tuple)
    AssertEqual(i.length(), 2)
    a.append(i)
    Assert(e.hasNext())
    Assert(e.hasNext())
    a.append(e.next())
    a.append(e.next())
    Assert(not e.hasNext())
    Assert(not e.hasNext())
    AssertRaises(ValueError, e.next, [])
    AssertEqual(Sort(a), [(1, "a"), (3, "c"), (5, "e")])
  end
  
  -- Test comparing map objects for equality.
  def testEquality()
    var m = Map()
    var m2 = Map()
    Assert(m == m)
    Assert(m2 == m2)
    Assert(m != m2)
  end
  
  -- Test raising exceptions on index errors.
  def testIndexErrors()
    var nerr = 0
    var m = Map(1 : 3, 6 : 2)
    try
      var x = m[2]
    except KeyError
      nerr += 1
    end
    try
      m.remove(2)
    except KeyError
      nerr += 10
    end
    Assert(nerr == 11)
  end
  
  -- Test the items method.
  def testItems()
    AssertEqual(Map().items(), [])
    AssertEqual(Map(1 : 2).items(), [(1, 2)])
    
    var m = Map(1 : "foo", "bar" : 3, [3, 4] : 5, True : False)
    AssertType(Array, m.items())
    AssertEqual(Set(m.items()), Set([(1, "foo"), ("bar", 3), ([3, 4], 5),
                                     (True, False)]))
    m.remove(1)
    AssertEqual(Set(m.items()), Set([("bar", 3), ([3, 4], 5), (True, False)]))
  end
  
  -- Test the keys method.
  def testKeys()
    var m = Map(1 : "foo", "bar" : 3, [3, 4] : 5, True : False)
    m.remove(1)
    AssertEqual(Set(m.keys()), Set(["bar", [3, 4], True]))
  end
  
  -- Test the values method.
  def testValues()
    var m = Map(1 : "foo", "bar" : 3, [3, 4] : 5, True : False)
    m.remove(1)
    AssertEqual(Set(m.values()), Set([3, 5, False]))
  end
  
  -- Test converting Map objects to strings.
  def testConversionToStr()
    AssertEqual(Str(Map()), "Map()")
    AssertEqual(Str(Map(1 : "foo")), "Map(1 : 'foo')")
    
    var s = Str(Map(1 : 2, 2 : 3))
    Assert(s == "Map(1 : 2, 2 : 3)" or s == "Map(2 : 3, 1 : 2)")
  end
  
  -- Test user-defined types as keys.
  def testUserDefinedKeys()
    var m = Map()
    m[KeyClass(1, 2, False)] = "foo"
    Assert(m.hasKey(KeyClass(1, 2, False)))
    Assert(not m.hasKey(KeyClass(1, 1, False)))
  end
  
  -- Test returning long integer as hash value.
  def testLongIntHash()
    var m = Map()
    m[KeyClass(2**100, 3, False)] = "bar"
    Assert(m.hasKey(KeyClass(2**100, 3, False)))
    Assert(not m.hasKey(KeyClass(2**101, 3, False)))
  end
  
  -- Test raising an exception in an overloaded equality operator.
  def testCompareException()
    var m = Map()
    var err = False
    
    m[KeyClass(1, 2, True)] = 3
    try
      var k = m[KeyClass(1, 2, True)]
    except InterruptException
      err = True
    end
    Assert(err)
  end
  
  -- Test raising an exception in the _hash method.
  def testHashException()
    var m = Map()
    var err = 0
    
    try
      var k = m[KeyClass(1, "a", False)]
    except ExitException
      err += 1
    end
    
    try
      m[KeyClass(1, "a", False)] = 3
    except ExitException
      err += 1
    end
    
    try
      var k = m.hasKey(KeyClass(1, "a", False))
    except ExitException
      err += 1
    end
    
    try
      m.remove(KeyClass(1, "a", False))
    except ExitException
      err += 1
    end
    
    Assert(err == 4)
  end
  
  def testSubTypeWithoutSuperCreate()
    var m = MapSubType()
    m["foo"] = "kissa"
    AssertEqual(m["foo"], "kissa")
  end
  
  def testNilItems()
    var m1 = Map(nil : 1)
    AssertEqual(m1.keys(), [nil])
    AssertEqual(m1[nil], 1)
    AssertEqual(Str(m1), "Map(nil : 1)")
    var m2 = Map(1 : nil)
    AssertEqual(m2[1], nil)
  end
end


private def TestMapEnum(*items)
  var m = Map(*items)
  var l = []
  for key, value in m
    l.append(key : value)
  end
  Assert(l.length() == items.length())
  for i in items
    Assert(i in l)
  end
end


private class KeyClass
  const a
  const b
  const exception
  
  def _eq(x)
    if exception
      raise InterruptException()
    end
    return a == x.a and b == x.b
  end
  
  def _hash()
    if b is Str
      raise ExitException(2)
    end
    return a * b
  end
end


private class MapSubType is Map
  def create()
  end
end