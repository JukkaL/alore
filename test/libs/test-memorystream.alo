module libs

import unittest
import memorystream


-- Test cases for the memstream module.
--
-- NOTE: Assume that block size is 512 characters.
class MemoryStreamSuite is Suite
  -- Test creating an empty MemoryStream.
  def testCreate()
    var s = MemoryStream()
    AssertEqual(s.contents(), "")
  end
  
  -- Test writing a simple character.
  def testSimpleWrite()
    var s = MemoryStream()
    s.write("x")
    AssertEqual(s.contents(), "x")
  end
  
  -- Test multiple writes.
  def testMultipleWrites()
    var s = MemoryStream()
    s.writeLn("foo bar")
    s.write("hello")
    AssertEqual(s.contents(), "foo bar" + Newline + "hello")
  end
  
  -- Test flush.
  def testFlush()
    var s = MemoryStream()
    s.write("foo")
    s.flush()
    s.writeLn(" bar")
    s.flush()
    s.write("hello")
    AssertEqual(s.contents(), "foo bar" + Newline + "hello")
  end
  
  -- Test writing after querying contents.
  def testWritesAfterContents()
    var s = MemoryStream()
    s.writeLn("foo bar")
    AssertEqual(s.contents(), "foo bar" + Newline)
    s.write("hello")
    AssertEqual(s.contents(), "foo bar" + Newline + "hello")
  end
  
  -- Test writing a Unicode string.
  def testUnicode()
    var s = MemoryStream()
    s.write("\u1234")
    s.flush()
    s.write("x")
    AssertEqual(s.contents(), "\u1234x")
  end
  
  -- Test creating a large MemoryStream.
  def testAppendLarge()
    var s = MemoryStream()
    var n = 12345
    for i in 0 to n
      s.write("1234567")
      s.write("abcd")
    end
    AssertEqual(s.contents(), "1234567abcd" * n)
  end
  
  -- Test closing a MemoryStream.
  def testClose()
    var s = MemoryStream()
    s.write("foobar")
    s.close()
    AssertRaises(IoError, def ()
                           s.readLn()
                         end)
    AssertRaises(IoError, def ()
                           s.write("x")
                         end)
    AssertEqual(s.contents(), "foobar")
    -- Multiple calls to close are allowed.
    s.close()
  end
  
  -- Test reading from an initialized MemoryStream.
  def testRead()
    var s = MemoryStream("foo")
    AssertEqual(s.read(1), "f")
    AssertEqual(s.read(2), "oo")
    var s2 = MemoryStream("foo")
    AssertEqual(s2.read(4), "foo")
  end
  
  -- Test reading a line at a time.
  def testReadLn()
    var s = MemoryStream("foo" + CR + LF + "bar" + LF + "x")
    AssertEqual(s.readLn(), "foo")
    AssertEqual(s.readLn(), "bar")
    AssertEqual(s.readLn(), "x")
    var s2 = MemoryStream("foo")
    AssertEqual(s2.readLn(), "foo")
  end
  
  -- Test read().
  def testReadAll()
    var data = "1234567abcd" * 12345
    var s = MemoryStream(data)
    AssertEqual(s.read(), data)
    s = MemoryStream()
    s.write("foo" * 100)
    s.write("bar" * 100)
    s.seek(0)
    AssertEqual(s.read(), "foo" * 100 + "bar" * 100)
    -- read() closes the stream.
    AssertRaises(IoError, def (); s.eof(); end)
  end
  
  -- Test checking for the end of stream.
  def testEof()
    var s = MemoryStream("foo")
    Assert(not s.eof())
    s.read(3)
    Assert(s.eof())
    var s2 = MemoryStream()
    Assert(s2.eof())
    s2.write("foo")
    Assert(s2.eof())
  end
  
  -- Test reading at the end of stream.
  def testReadAtEof()
    var s = MemoryStream()
    s.write("foo")
    AssertRaises(IoError, def (); s.readLn(); end)
  end
  
  -- Test seeking and reading after writing.
  def testWriteSeekAndRead()
    var s = MemoryStream()
    s.write("foo ")
    s.flush()
    s.write("hello")
    s.seek(0)
    AssertEqual(s.read(), "foo hello")
  end
  
  -- Test seeking within the stream.
  def testSeek()
    var s = MemoryStream()
    s.write("foo")
    s.flush()
    s.write("x" * 512)
    s.seek(1)
    AssertEqual(s.read(512), "oo" + 510 * "x")
    s.seek(514)
    AssertEqual(s.read(), "x")
  end
  
  -- Test querying the size of the stream after appending.
  def testSize()
    var s = MemoryStream()
    AssertEqual(s.size(), 0)
    s.write("foo")
    AssertEqual(s.size(), 3)
    s.flush()
    s.write("bar")
    s.contents()
    AssertEqual(s.size(), 6)
  end
  
  -- Test overwriting initialized stream contents.
  def testInitAndWrite()
    var s = MemoryStream("fooz")
    AssertEqual(s.contents(), "fooz")
    s.write("bar")
    AssertEqual(s.contents(), "barz")
    AssertEqual(s.size(), 4)
  end
  
  -- Test overwriting initialized stream contents and appending.
  def testInitAndWrite2()
    var s = MemoryStream("fooz")
    AssertEqual(s.contents(), "fooz")
    s.write("b")
    AssertEqual(s.contents(), "booz")
    s.write("ar")
    AssertEqual(s.contents(), "barz")
    s.write("y")
    AssertEqual(s.contents(), "bary")
    s.write("z")
    AssertEqual(s.contents(), "baryz")
    AssertEqual(s.size(), 5)
  end
  
  -- Test writing multiple blocks at once in random access mode.
  def testInitAndWrite3()
    var d = "abcde" * 1024
    var s = MemoryStream(d)
    s.write("b")
    AssertEqual(s.contents(), "b" + d[1:])
    s.write("A" * (511 + 512 + 1))
    AssertEqual(s.contents(), "b" + 1024 * "A" + d[1025:])
    AssertEqual(s.size(), d.length())
  end
  
  -- Test growing the size of stream in random access mode and verifying the
  -- size afterwards.
  def testInitAndWrite4()
    var d = "abcde"
    var s = MemoryStream(d)
    s.write("x" * 511)
    s.flush()
    s.write("A" * (512 + 512 + 511))
    AssertEqual(s.contents(), "x" * 511 + "A" * (512 + 512 + 511))
    AssertEqual(s.contents().length(), s.size())
  end
  
  -- Test querying the position in the stream.
  def testPos()
    var d = MemoryStream("hello")
    AssertEqual(d.pos(), 0)
    d.read(1)
    AssertEqual(d.pos(), 1)
    d.write("x")
    AssertEqual(d.pos(), 2)
    d.write(250 * "abcd")
    AssertEqual(d.pos(), 1002)
  end
  
  -- Test reading in different contexts related to block boundaries.
  def testReadComplex()
    var d = ("ab" + 510 * "x") + ("." + 510 * "y" + ".") + "fg" * 10
    var s = MemoryStream()
    s.write(d[:100])
    s.flush()
    s.write(d[100:])
    s.seek(0)
    AssertEqual(s.read(2000), d)
    s.seek(1)
    AssertEqual(s.read(511), d[1:512])
    s.seek(511)
    AssertEqual(s.read(2), d[511:513])
    s.seek(511)
    AssertEqual(s.read(1 + 512), d[511:1024])
    s.seek(511)
    AssertEqual(s.read(12 + 512), d[511:1035])
    s.seek(0)
    AssertEqual(s.read(1024), d[:1024])
  end
  
  def testSeekErrors()
    var s = MemoryStream("foobar")
    s.seek(6)
    AssertRaises(IoError, def (); s.seek(-1); end)
    AssertRaises(IoError, def (); s.seek(7); end)
    AssertRaises(IoError, def (); s.seek(2**100); end)
  end
  
  def testReadErrors()
    var s = MemoryStream("foobar")
    AssertRaises(IoError, def (); s._read(-1); end)
  end
  
  def testSpecialCases()
    var d = "foobar" * 1000
    var s = MemoryStream()
    s._write(d)
    s._write("")
    s._write("")
    s._write("")
    AssertEqual(s.contents(), d)
    AssertEqual(s.size(), 6000)
    AssertEqual(s.pos(), 6000)
    
    var s2 = MemoryStream(d)
    s2._write("")
    AssertEqual(s2.pos(), 0)
    AssertEqual(s2.contents(), d)
    AssertEqual(s2._read(0), "")
    AssertEqual(s2.contents(), d)
    AssertEqual(s2.pos(), 0)
  end
  
  def testMixedReadAndWrite()
    var d = "1234567890"
    var s = MemoryStream(d)
    s.write("abc")
    AssertEqual(s.read(4), "4567")
    s.write("d")
    AssertEqual(s.contents(), "abc4567d90")    
    
    var s2 = MemoryStream(d)
    s2.write("abc")
    AssertEqual(s2.pos(), 3)
    AssertEqual(s2.read(4), "4567")
    AssertEqual(s2.pos(), 7)
    s2.write("d")
    AssertEqual(s2.pos(), 8)
    AssertEqual(s2.contents(), "abc4567d90")
  end
  
  -- TODO add testSubStrings
end
