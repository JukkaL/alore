-- Test cases for the argparse module: help generation.

module libs

import unittest
import argparse


class ArgparseHelpSuite is Suite
  def testBasic()
    assertHelp(["-x"],
               ["-x" : "do stuff"],
               ["  -h, --help  show this help message and exit",
                "  -x          do stuff"])
  end
  
  def testLongOption()
    assertHelp(["--do-this"],
               ["--do-this" : "do stuff"],
               ["      --do-this  do stuff",
                "  -h, --help     show this help message and exit"])
  end
  
  def testShortAndLongOptions()
    assertHelp(["-x --exclude"],
               ["-x" : "do stuff"],
               ["  -h, --help     show this help message and exit",
                "  -x, --exclude  do stuff"])
  end
  
  def testMultipleShortAlternatives()
    assertHelp(["-x -a"],
               ["-x" : "do stuff"],
               ["  -h, --help  show this help message and exit",
                "  -x, -a      do stuff"])
  end
  
  def testMultipleLongAlternatives()
    assertHelp(["--fo-bar --xar"],
               ["--fo-bar" : "do stuff"],
               ["      --fo-bar, --xar  do stuff",
                "  -h, --help           show this help message and exit"])
  end
  
  def testShortOptionWithArguments()
    assertHelp(["-x N"],
               ["-x" : "do stuff"],
               ["  -h, --help  show this help message and exit",
                "  -x N        do stuff"])
  end
  
  def testLongOptionWithArguments()
    assertHelp(["--pow-wow NUM"],
               ["--pow-wow" : "do stuff"],
               ["  -h, --help         show this help message and exit",
                "      --pow-wow=NUM  do stuff"])
  end
  
  def testAliasedOptionWithArguments()
    assertHelp(["-x --exclude FILE"],
               ["-x" : "do stuff"],
               ["  -h, --help          show this help message and exit",
                "  -x, --exclude=FILE  do stuff"])
  end
  
  def testWrappingDescription()
    assertHelp(["-x"],
               ["-x" : "do stuff foo bar zar foo bar zar foo bar zar foo bar zar foo Bar zar Foo bar zar"],
   ["  -h, --help  show this help message and exit",
    "  -x          do stuff foo bar zar foo bar zar foo bar zar foo bar zar foo Bar",
    "              zar Foo bar zar"])
  end
  
  def testLongArgument()
    assertHelp(["-x --exclude-very-long-name-please FILE"],
               ["-x" : "do stuff and other things and more"],
               ["  -h, --help                 show this help message and exit",
                "  -x, --exclude-very-long-name-please=FILE  do stuff and other things and more"])
  end
  
  def testLongArgumentAndLongDescription()
    assertHelp(["-x --exclude-very-long-name-please FILE"],
               ["-x" : "do stuff and other things and more!"],
               ["  -h, --help                 show this help message and exit",
                "  -x, --exclude-very-long-name-please=FILE",
                "                             do stuff and other things and more!"])
    assertHelp(["-x --exclude-very-long-name-please FILE"],
               ["-x" : "do stuff and other things unrelated to the first"],
               ["  -h, --help                 show this help message and exit",
                "  -x, --exclude-very-long-name-please=FILE",
                "                             do stuff and other things unrelated to the first"])
  end

  def testSorting()
    assertHelp(["-x", "-a", "-y", "--hab"],
               ["-x" : "do stuff",
                "-a" : "do other stuff",
                "-y" : "do some stuff",
                "--hab" : "dunno"],
               ["  -a          do other stuff",
                "  -h, --help  show this help message and exit",
                "      --hab   dunno",
                "  -x          do stuff",
                "  -y          do some stuff"])
  end
  
  def testPositionals()
    assertHelp(["foo"],
               ["foo" : "do stuff"],
               ["Positional arguments:",
                "  foo         do stuff",
                "",
                "Optional arguments:",
                "  -h, --help  show this help message and exit"])
    assertHelp(["-x", "foo", "[bar]", "zar-this-is-very-long ..."],
               ["foo" : "do stuff",
                "bar" : "another",
                "-x" : "option",
                "zar-this-is-very-long" : "final one"],
               ["Positional arguments:",
                "  bar                    another",
                "  foo                    do stuff",
                "  zar-this-is-very-long  final one",
                "",
                "Optional arguments:",
                "  -h, --help             show this help message and exit",
                "  -x                     option"])
  end
  
  def testExplicitHelpForHelpOption()
    assertHelp(["-x"],
               ["-h" : "show help"],
               ["  -h, --help  show help"])
    assertHelp(["--help"],
               ["--help" : "show help"],
               ["      --help  show help"])
    assertHelp(["-h"],
               ["-h" : "show help"],
               ["  -h  show help"])
  end
  
  def testDescriptionAndEpilog()
    var parser = ArgumentParser()
    parser.description = ("This is it. " * 10).strip()
    parser.epilog = ("This is not it. " * 9).strip()
    parser.help = []
    
    var act = []
    parser.display = def (msg, target)
      act.append(msg)
    end
    parser.exit = def (n); end
    parser.showHelp()
    AssertEqual(act[1:],
      [
        "",
        "This is it. This is it. This is it. This is it. This is it. This is it. This is" + Newline +
        "it. This is it. This is it. This is it.",
        "",
        "Optional arguments:",
        "  -h, --help  show this help message and exit",
        "",
        "This is not it. This is not it. This is not it. This is not it. This is not it." + Newline +
        "This is not it. This is not it. This is not it. This is not it."])
  end
  
  private def assertHelp(desc, help, result)
    var parser = ArgumentParser(*desc)
    parser.help = help
    var act = []
    parser.display = def (msg, target)
      act.append(msg)
    end
    parser.exit = def (n); end
    parser.showHelp()
    act = act[2:] -- Remove usage
    if act[0] == "Optional arguments:"
      act = act[1:]
    end
    act = Newline.join(act).split(Newline)
    if act != result
      for i in 0 to Min(act.length(), result.length())
        Print(act[i])
        Print(result[i])
      end
    end
    AssertEqual(act, result)
  end
end