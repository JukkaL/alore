module libs

import unittest
import reflect


class ReflectionSuite is Suite
  def testGetMember()
    -- Members of primitive types are tested elsewhere.
    -- IDEA: Test inherited members and C types.
    var r = Refl()
    AssertEqual(GetMember(r, "x"), 1)
    AssertEqual(GetMember(r, "y"), 2)
    AssertEqual(GetMember(r, "getx"), 3)
    AssertEqual(GetMember(r, "foo")(5), 6)
    AssertEqual(GetMember(r, "_eq")(r), True)
    AssertRaises(MemberError, def (); GetMember(r, "X"); end)
  end
  
  def testHasMember()
    -- IDEA: Test that it does not call getters.
    -- IDEA: Test inherited members and C types.
    var r = Refl()
    Assert(HasMember(r, "x"))
    Assert(HasMember(r, "y"))
    Assert(HasMember(r, "setx"))
    Assert(HasMember(r, "getx"))
    Assert(HasMember(r, "foo"))
    Assert(HasMember(r, "_eq"))
    Assert(not HasMember(r, "X"))
  end
  
  def testSetMember()
    -- IDEA: Test inherited members and C types.
    var r = Refl()
    SetMember(r, "x", 4)
    AssertEqual(r.x, 4)
    SetMember(r, "setx", 6)
    AssertEqual(r.x, 7)
    AssertRaises(MemberError, def (); SetMember(r, "y", 1); end)
    AssertRaises(MemberError, def (); SetMember(r, "getx", 1); end)
    AssertRaises(MemberError, def (); SetMember(r, "foo", 1); end)
  end
  
  def testTypeOf()
    Assert(TypeOf(1) == Int)
    Assert(TypeOf(100000000000000000000000000) == Int)
    
    Assert(TypeOf("") == Str)
    Assert(TypeOf("abc") == Str)
    Assert(TypeOf(Chr(2000)) == Str)
    Assert(TypeOf("12345678901234567890"[4:15]) == Str)
    
    Assert(TypeOf([1, 2]) == Array)
    Assert(TypeOf((1, 2)) == Tuple)
    
    Assert(TypeOf(1.0) == Float)
    
    Assert(TypeOf(Ord) == Function)
    Assert(TypeOf(VerifyInts) == Function)
    Assert(TypeOf(NoStrConv().foo) == Function)
    
    Assert(TypeOf(True) == Boolean)
    Assert(TypeOf(False) == Boolean)
    
    Assert(TypeOf(MyConst) == Constant)
    
    Assert(TypeOf(1 to 2) == Range)
    
    Assert(TypeOf(1 : 2) == Pair)
    
    Assert(TypeOf(Int) == Type)
    Assert(TypeOf(NoStrConv) == Type)
    
    Assert(TypeOf(NoStrConv()) == NoStrConv)
    
    AssertRaises(ValueError, def (); TypeOf(nil); end)
  end
end


class Refl
  var x = 1
  const y = 2
  
  def setx
    return "x"
  end
  
  def setx = new
    self.x = new + 1
  end
  
  def getx
    return self.x + 2
  end
  
  def foo(x)
    return x + 1
  end
end
