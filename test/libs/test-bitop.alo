module libs

-- bitop module test cases

import unittest
import bitop


class BitopSuite is Suite
  def testAnd()
    AssertEqual(And(0, 0), 0)
    AssertEqual(And(0, 1), 0)
    AssertEqual(And(1, 0), 0)
    AssertEqual(And(1, 1), 1)
    AssertEqual(And(1234, 567890), 82)
    AssertEqual(And(-1234, 567890), 567810)
    AssertEqual(And(-1234, -567890), -569042)
  end

  def testLongAnd()
    AssertEqual(And(2**1000, 0), 0)
    AssertEqual(And(0, 2**1000), 0)

    AssertEqual(And(2**1000 + 1, 1), 1)
    AssertEqual(And(1, 2**1000 + 1), 1)

    AssertEqual(And(2**1000, 2**1000), 2**1000)

    AssertEqual(And(2**1000 + 2**200, 2**200), 2**200)
    AssertEqual(And(2**200, 2**1000 + 2**200), 2**200)

    for i in 20 to 70
      AssertEqual(And(2**i - 1, 2**(i - 1) - 1), 2**(i - 1) - 1)
      AssertEqual(And(-2**i, -2**(i - 1)), -2**i)
    end
  end

  def testOr()
    AssertEqual(Or(0, 0), 0)
    AssertEqual(Or(1, 0), 1)
    AssertEqual(Or(0, 1), 1)
    AssertEqual(Or(1, 1), 1)

    AssertEqual(Or(1234, 567890), 569042)

    AssertEqual(Or(-100, 245), -3)
  end

  def testLongOr()
    AssertEqual(Or(2**1000, 2**100), 2**1000 + 2**100)
    AssertEqual(Or(2**100, 2**1000), 2**1000 + 2**100)

    AssertEqual(Or(2**1000, 2**1000), 2**1000)

    AssertEqual(Or(2**100, 1234), 2**100 + 1234)
    AssertEqual(Or(1234, 2**100), 2**100 + 1234)

    for i in 20 to 70
      AssertEqual(Or(2**i - 1, 2**(i - 1) - 1), 2**i - 1)
      AssertEqual(Or(-2**i, -2**(i - 1)), -2**(i - 1))
    end
  end

  def testXor()
    AssertEqual(Xor(0, 0), 0)
    AssertEqual(Xor(1, 0), 1)
    AssertEqual(Xor(0, 1), 1)
    AssertEqual(Xor(1, 1), 0)

    AssertEqual(Xor(1234, 567890), 568960)

    AssertEqual(Xor(-1234, 567890), -568964)
    AssertEqual(Xor(567890, -1234), -568964)
  end

  def testLongXor()
    AssertEqual(Xor(2**1000, 2**100), 2**1000 + 2**100)
    AssertEqual(Xor(2**100, 2**1000), 2**1000 + 2**100)

    AssertEqual(Xor(2**500 + 1234, 2**500), 1234)
    AssertEqual(Xor(2**500, 2**500 + 1234), 1234)

    AssertEqual(Xor(2**200 + 4, 12), 2**200 + 8)
    AssertEqual(Xor(12, 2**200 + 4), 2**200 + 8)

    for i in 20 to 70
      AssertEqual(Xor(2**i - 1, 2**i), 2**(i + 1) - 1)
    end
  end

  def testNeg()
    AssertEqual(Neg(0), -1)
    AssertEqual(Neg(-1), 0)
    AssertEqual(Neg(1), -2)

    AssertEqual(Neg(567890), -567891)
  end

  def testLongNeg()
    AssertEqual(Neg(2**500), -2**500 - 1)
    AssertEqual(Neg(2**300 + 2**50 + 123), -2**300 - 2**50 - 123 - 1)

    for i in 20 to 70
      AssertEqual(Neg(2**i - 1), -2**i)
      AssertEqual(Neg(-2**i), 2**i - 1)
    end
  end

  def testShl()
    AssertEqual(Shl(0, 0), 0)
    AssertEqual(Shl(1, 0), 1)
    AssertEqual(Shl(0, 1000), 0)

    AssertEqual(Shl(1, 2), 4)
    AssertEqual(Shl(567890, 5), 18172480)
    AssertEqual(Shl(-567890, 5), -18172480)

    AssertRaises(ValueError, Shl, (4, -1))
    AssertRaises(ValueError, Shl, (4, -2**100))
  end

  def testLongShl()
    AssertEqual(Shl(1, 100), 2**100)
    AssertEqual(Shl(123456789012345678901234567890, 230),
                123456789012345678901234567890 * 2**230)

    for i in 20 to 70
      AssertEqual(Shl(2**i - 1, 1), (2**i - 1) * 2)
      AssertEqual(Shl(2**i, 1), 2**(i + 1))

      AssertEqual(Shl(-2**i, 1), -2**(i + 1))
    end
  end

  def testShr()
    AssertEqual(Shr(0, 0), 0)
    AssertEqual(Shr(1, 0), 1)
    AssertEqual(Shr(0, 1000), 0)
    AssertEqual(Shr(1, 2**1000), 0)

    AssertEqual(Shr(4, 2), 1)

    AssertEqual(Shr(567890, 5), 17746)
    AssertEqual(Shr(-567890, 5), -17747)

    AssertEqual(Shr(2**300, 2**200), 0)

    AssertRaises(ValueError, Shl, (4, -1))
    AssertRaises(ValueError, Shl, (4, -2**100))
  end

  def testLongShr()
    AssertEqual(Shr(2**100, 100), 1)
    AssertEqual(Shr(2**1000 + 2**250, 100), 2**900 + 2**150)
    AssertEqual(Shr(123456789012345678901234567890, 5),
                3858024656635802465663580246)

    for i in 20 to 70
      AssertEqual(Shr(2**i - 1, 1), 2**(i - 1) - 1)
      AssertEqual(Shr(2**i, 1), 2**(i - 1))

      AssertEqual(Shr(-2**i, 1), -2**(i - 1))
    end
  end

  def testExceptions()
    for op in And, Or, Xor, Shl, Shr
      AssertRaises(TypeError, "Int expected (but Str found)",
                   def (); op(1, "x"); end)
      AssertRaises(TypeError, "Int expected (but Float found)",
                   def (); op(1.1, 1); end)
    end
    AssertRaises(TypeError, "Int expected (but nil found)",
                 def (); Neg(nil); end)
  end
end