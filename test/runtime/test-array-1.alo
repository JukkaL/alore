module runtime

-- Array test cases

import unittest
import reflect


class ArraySuite is Suite
  def testBasics()
    var a = []
    Assert(a.length() == 0)
    
    a = [2]
    Assert(a.length() == 1)
    Assert(a[0] == 2)
    
    a = [87]
    Assert(a.length() == 1)
    Assert(a[0] == 87)
    
    a = [4, 5]
    Assert(a.length() == 2)
    Assert(a[0] == 4)
    Assert(a[1] == 5)
    
    a = [41, 51]
    Assert(a.length() == 2)
    Assert(a[0] == 41)
    Assert(a[1] == 51)
    
    a = [7, 51, [2, 3], 3, 4]
    Assert(a.length() == 5)
    Assert(a[0] == 7)
    Assert(a[2].length() == 2)
    Assert(a[4] == 4)
    
    a = Array()
    Assert(a.length() == 0)
    
    AssertEqual(Array(), [])
    AssertEqual([nil] * 1, [nil])
    
    AssertEqual(["x"] * 0, [])
    AssertEqual(["x"] * 2, ("x", "x"))
  end
  
  def testArrayFromIterable()
    AssertEqual(Array(""), [])    
    AssertEqual(Array("foo"), ["f", "o", "o"])
    
    AssertEqual(Array([]), [])
    AssertEqual(Array([1]), [1])
    AssertEqual(Array([1, 2, 3]), [1, 2, 3])
    
    AssertEqual(Array(0 to 0), [])
    AssertEqual(Array(0 to 4), [0, 1, 2, 3])
  end
  
  def testNegativeIndex()
    var a = [5, 7, 9]
    AssertEqual(a[-1], 9)
    AssertEqual(a[-2], 7)
    AssertEqual(a[-3], 5)
    
    a[-1] = 11
    a[-3] = 13
    AssertEqual(a[0], 13)
    AssertEqual(a[2], 11)
  end
  
  def testEquality()
    var a = []
    var b = []
    var c = [1]
    
    Assert(a == b)
    Assert(a == a)
    VerifyNot(a == c)
    VerifyNot(c == a)
    
    Assert(a != c)
    Assert(c != a)
    VerifyNot(a != a)
    VerifyNot(a != b)
    
    var d = [1.0]
    var e = [2]
    
    Assert(c == c)
    Assert(c == d)
    VerifyNot(c != d)
    Assert(c != e)
    VerifyNot(c == e)
    
    var aa = [1, "a", -2]
    var bb = [1, "a", -2]
    var cc = [2, "a", -2]
    var dd = [1, "b", -2]
    var ee = [1, "a", 2]
    var ff = [2, "c", 3]
    var gg = [1, "a"]
    
    Assert(aa == aa)
    Assert(aa == bb)
    Assert(aa != cc)
    Assert(aa != dd)
    Assert(aa != ee)
    Assert(aa != ff)
    Assert(aa != gg)
    VerifyNot(aa == cc)
    
    var s = ArraySubType()
    s.append("x")
    s.append(3)
    Assert(s == s)
    Assert(s == ["x", 3])
    Assert(s != ["x", 4])
    Assert(["x", 3] == s)
    Assert(["x", 4] != s)
  end
  
  def testRecursiveEquality()
    var a = [[[1, 2], 3], [4, 5]]
    var b = [[[1, 2], 3], [4, 5]]
    var c = [[[1, 0], 3], [4, 5]]
    var d = [[[1], 3], [4, 5]]
    var e = [[[1, 2], 3], [4]]
    var f = [[[1, 2], 3], 4, 5]
    Assert(a == a)
    Assert(a == b)
    Assert(a != c)
    Assert(a != d)
    Assert(a != e)
    Assert(a != f)
    
    var nerr = 1
    
    var x = [1, 2]
    var y = [1, x]
    x[1] = y
    try
      Assert(x == y)
    except ValueError
      nerr += 1
    end
    Assert(nerr == 2)
    
    var z = []
    for i in 0 to 10
      z = [z, z]
    end
    try
      Assert(z == z)
    except ValueError
      nerr += 1
    end
    Assert(nerr == 3)
  end
  
  def testOrdering()
    var a = []
    var b1 = [1]
    var b2 = [2]
    var c1 = [1, 1]
    var c2 = [1, 2]
    var c3 = [2, 1]
    
    Assert(a <= a)
    VerifyNot(a > a)
    Assert(a >= a)
    VerifyNot(a < a)
    
    Assert(a <= b1)
    Assert(a <= c1)
    Assert(b1 <= b2)
    Assert(b1 <= c1)
    Assert(b1 <= c3)
    Assert(c3 <= c3)
    VerifyNot(c2 <= c1)
    
    Assert(b1 >= a)
    Assert(b2 >= b1)
    Assert(c1 >= b1)
    Assert(c3 >= c3)
    VerifyNot(c1 >= c2)
    
    Assert(a < b1)
    Assert(b1 < b2)
    Assert(b1 < c1)
    Assert(c1 < c2)
    VerifyNot(b2 < b1)
    
    Assert(b1 > a)
    Assert(c1 > b1)
    Assert(c2 > c1)
    VerifyNot(c3 < c2)
    
    var s = ArraySubType()
    s.append("x")
    s.append(3)
    Assert(s <= s)
    Assert(s >= s)
    Assert(s < ["x", 4])
    Assert(s > ["x", 2])
    Assert(["x", 2] < s)
    Assert(["x", 4] > s)
  end
  
  def testRecursiveOrdering()
    var a = [[1, 2], [[3, 4], 5]]
    var b = [[2, 2], [[3, 4]]]
    var c = [[1, 2], [[4, 4], 5]]
    Assert(a < b)
    Assert(a < c)
    Assert(c < b)
    VerifyNot(b < a)
    
    Assert(b > a)
    Assert(c > a)
    Assert(b > c)
    VerifyNot(a > b)
    
    Assert(a <= a)
    Assert(a <= b)
    VerifyNot(b <= a)
    
    Assert(c >= c)
    Assert(c >= a)
    VerifyNot(c >= b)
  end
  
  def testInOperator()
    var a = []
    var b = [3]
    var c = ["foo", "bar"]
    var d = [5, 6, 7, Comp()]
    
    Assert(not (1 in a))
    Assert(not a in a)
    VerifyNot(1 in a)
    VerifyNot(a in a)
    
    Assert(3 in b)
    Assert(not 4 in b)
    VerifyNot(4 in b)
    VerifyNot(not 3 in b)
    
    Assert(Comp() in b)
    Assert(not Comp() in a)
    
    Assert("foo" in c)
    Assert("bar" in c)
    Assert(not "zar" in c)
    
    Assert(7 in d)
    Assert(3 in d)
    VerifyNot(99 in d)
  end
  
  def testSubArray()
    var a = []
    var b = [1]
    var c = [1, 2, [3, 4], 5, 6, 7]
    
    AssertEqual(a[0:0], [])
    Assert(b[0:1] == [1])
    Assert(c[0:6] == [1, 2, [3, 4], 5, 6, 7])
    Assert(c[1:3] == [2, [3, 4]])
    Assert(c[2:3] == [[3, 4]])
    Assert(c[2:1] == [])
    Assert(c[100:110] == [])
    
    var d = b[0:1]
    d[0] = 2
    Assert(b == [1])
  
    -- Index clipping
    AssertEqual(b[0:2], [1])
    
    var nerr = 0
    try
      var x = b[0:"a"]
    except ValueError
      nerr += 1
    end
    try
      var x = b[0.0:1]
    except ValueError
      nerr += 1
    end
    Assert(nerr == 2)
  end
  
  def testSubArrayNegativeIndex()
    var a = [3, 4, 5, 6, 7]
    AssertEqual(a[0:-1], [3, 4, 5, 6])
    AssertEqual(a[2:-2], [5])
    AssertEqual(a[-3:-1], [5, 6])
    AssertEqual(a[-5:1], [3])
    AssertEqual(a[0:-100], [])
    AssertEqual(a[-100:-2], [3, 4, 5])
    AssertEqual(a[-500:-100], [])
  end
  
  def testSubArrayNil()
    var a = [3, 4, 5, 6, 7]
    AssertEqual(a[0:], [3, 4, 5, 6, 7])
    AssertEqual(a[1:], [4, 5, 6, 7])
    AssertEqual(a[4:nil], [7])
    AssertEqual(a[:0], [])
    AssertEqual(a[:1], [3])
    AssertEqual(a[nil:100], [3, 4, 5, 6, 7])
  end
  
  def testConcat()
    Assert([] + [] == [])
    Assert([2] + [] == [2])
    Assert([] + [5] == [5])
    Assert([6, "a"] + [8, [9, 99], 10] == [6, "a", 8, [9, 99], 10])
    
    var a = [1, [2, 3]]
    var b = a + []
    b[0] = 2
    Assert(a[0] == 1)
    b[1][0] = 4
    Assert(a[1][0] == 4)
  end
  
  def testMultiply()
    AssertEqual([1] * 1, [1])
    AssertEqual([1] * 3, [1, 1, 1])
    AssertEqual([] * 200000000, [])
    AssertEqual([1, 2, 3] * 0, [])
    AssertEqual([1, "x", 3] * 1, [1, "x", 3])
    AssertEqual([1, "x", 3] * 2, [1, "x", 3, 1, "x", 3])
  end
  
  -- Test some uses of creating arrays using bracketed expressions.
  def testBracketConstructor()
    AssertEqual([[[(1 + 2) * (2 + 3)]]], [[[15]]])
    AssertEqual([1,], [1])
    AssertEqual([1 + 2, [3 * 4], [[1], [2]]], [3, [12], [[1], [2]]])
  end
  
  -- Test multiple expression separated by commas as lvalues.
  def testMultiAssignment()
    var a, b = [1, 2]
    AssertEqual(a, 1)
    AssertEqual(b, 2)
    
    var ss = ArraySubType2()
    ss.append(7)
    ss.append(13)
    a, b = ss
    AssertEqual(a, 7)
    AssertEqual(b, 13)
  end
  
  -- Test bracketed expressions as lvalues.
  def testBracketMultiAssignment()
    var i, j
    
    [i] = ["foo"]
    AssertEqual(i, "foo")
    
    [m] = [12]
    AssertEqual(m, 12)
    
    j = [nil]
    [j[0]] = [5]
    AssertEqual(j, [5])
    
    [j[2 * 3 - 1 * 6], i, m] = [2, 3, 4]
    AssertEqual(j, [2])
    AssertEqual(i, 3)
    AssertEqual(m, 4)
  end
  
  private var m
  
  -- Test the append method.
  def testAppend()
    -- Start with an empty array.
    var l = []
    for i in 0 to 100
      l.append(i)
      Assert(l.length() == i + 1)
      Assert(l[i] == i)
      Assert(l[0] == 0)
    end
    
    -- Start with a non-empty array.
    l = [1, 2, 3, 4, 5, 6, 7, 8]
    l.append(2)
    AssertEqual(l, [1, 2, 3, 4, 5, 6, 7, 8, 2])
  end
  
  -- Test the extend method.
  def testExtend()
    var a = []
    a.extend([])
    AssertEqual(a, [])
    
    a.extend([1])
    AssertEqual(a, [1])
    
    a.extend([2])
    AssertEqual(a, [1, 2])
    
    a.extend([3, 4, 5, 6, 7])
    AssertEqual(a, [1, 2, 3, 4, 5, 6, 7])
    
    var b = [nil]
    for i in 0 to 100
      b.extend([i])
    end
  end
  
  -- Test the extend method with a long array.
  def testExtendLongArray()
    var a = [1, 2, 3] * 1000
    a.extend([nil])
    AssertEqual(a, [1, 2, 3] * 1000 + [nil])
    
    a.extend([4, 5, 6] * 5000)
    AssertEqual(a, [1, 2, 3] * 1000 + [nil] + [4, 5, 6] * 5000)
  end
  
  -- Test the extend method with a non-Array sequence argument.
  def testExtendWithSequence()
    var a = []
    a.extend("")
    AssertEqual(a, [])
    
    a.extend("a")
    AssertEqual(a, ["a"])
    
    a.extend("foobar")
    AssertEqual(a, ["a", "f", "o", "o", "b", "a", "r"])
    
    a.extend("xyz" * 100)
    AssertEqual(a.length(), 307)
    AssertEqual("".join(a), "afoobar" + "xyz" * 100)
  end
  
  -- Test the extend method with an invalid argument.
  def testExtendErrors()
    AssertRaises(MemberError, def (); [].extend(1); end)
  end
  
  -- Test the insertAt method.
  def testInsertAt()
    var l = []
    l.insertAt(0, 3)
    Assert(l == [3])
    l.insertAt(0, 4)
    Assert(l == [4, 3])
    l.insertAt(0, 5)
    l.insertAt(3, 2)
    l.insertAt(1, 11)
    Assert(l == [5, 11, 4, 3, 2])
    
    l.insertAt(-1, 66)
    AssertEqual(l, [5, 11, 4, 3, 66, 2])
    l.insertAt(-6, 55)
    AssertEqual(l, [55, 5, 11, 4, 3, 66, 2])
    
    l = []
    for i in 0 to 100
      l.insertAt(0, i)
    end
    Assert(l.length() == 100)
    for i in 0 to 100
      Assert(l[i] == 99 - i)
    end
    
    -- FIX invalid index
  end
  
  -- Test the removeAt method.
  def testRemoveAt()
    var l = [1, 2, 3, 4]
    AssertEqual(l.removeAt(0), 1)
    Assert(l == [2, 3, 4])
    l.removeAt(1)
    Assert(l == [2, 4])
    l.removeAt(1)
    Assert(l == [2])
    l.removeAt(0)
    Assert(l == [])
    
    l = [2, 4, 6]
    l.removeAt(-3)
    AssertEqual(l, [4, 6])
    AssertEqual(l.removeAt(-1), 6)
    AssertEqual(l, [4])
  
    -- FIX invalid index
  end
  
  -- Test the remove method.
  def testRemove()
    for orig, removed, new in ([1],       1, [] ),
                              ([1],       2, [1]),
                              ([1, 2],    1, [2]),
                              ([2, 1],    1, [2]),
                              ([1, 1],    1, [] ),
                              ([1, 2, 1], 1, [2]),
                              ([2, 1, 3], 1, [2, 3]),
                              ([1, 2, 3], 4, [1, 2, 3]),
                              ([(1, 2), [1, 2], 1], [1, 2], [1])
      orig.remove(removed)
      AssertEqual(orig, new)
    end
    
    var a = [1] * 1000
    a.remove(1)
    AssertEqual(a, [])
    
    var b = [2] * 1000
    b.remove(1)
    AssertEqual(b, [2] * 1000)
    
    var c = [1, 2, 3] * 1000
    c.remove(1)
    AssertEqual(c, [2, 3] * 1000)
  end
  
  def testFind()
    var a = [5, 8, 6]
    for i in 0 to a.length()
      AssertEqual(a.find(a[i]), i)
    end
    AssertEqual([5, 8, 5].find(5), 0)
    AssertEqual([5, 8].find(6), -1)
  end
  
  def testIndex()
    var a = [5, 8, 6]
    for i in 0 to a.length()
      AssertEqual(a.index(a[i]), i)
    end
    AssertEqual([5, 8, 5].index(5), 0)
    AssertRaises(ValueError, def (); [5, 8].index(6); end)
  end
  
  def testCount()
    AssertEqual([6, 8, 7, 8].count(8), 2)
    AssertEqual([6, 8, 7, 8].count(5), 0)
  end
    
  -- Test raising exceptions on index errors.
  def testIndexErrors()
    var l
  
    l = []
    AssertIndexError(l, -1)
    AssertIndexError(l, 0)
    AssertIndexError(l, 1)
    
    l = [1]
    AssertIndexError(l, -100)
    AssertIndexError(l, -2)
    AssertIndexError(l, 1)
    AssertIndexError(l, 2)
    AssertIndexError(l, 200)
    
    -- FIX sublists
  end
  
  -- Test iterating Array objects.
  def testIteration()
    var l = []
    for i in []
      l.append(i)
    end
    Assert(l.length() == 0)
    
    for i in [22]
      l.append(i)
    end
    AssertEqual(l, [22])
    
    for i in [2, 3, 4, 5, 6, 7, 8, 9, 10]
      l.append(i)
    end
    AssertEqual(l, [22, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    
    l = []
    var l2 = [1, 2]
    for i in l2
      for j in l2
        l.append([i, j])
      end
    end
    AssertEqual(l, [[1, 1], [1, 2], [2, 1], [2, 2]])
  end
  
  -- Test copy.
  def testCopy()
    Assert([].copy() == [])
    var a = [1, 2]
    var b = a.copy()
    Assert(a == b)
    a[0] = 3
    Assert(a != b)
  end
  
  def testMembers()
    var a = [2, 3]
    for m in "length", "_add", "_get", "_set", "_eq", "_lt", "_gt", "_in", 
             "_str", "_hash", "iterator"
      AssertEqual(HasMember(a, m), True)
    end
    AssertEqual(HasMember(a, "foo"), False)
    
    AssertEqual(a.length(), 2)
    AssertEqual(a.find(2), 0)
    AssertEqual(a.find(3), 1)
    AssertEqual(a.count(3), 1)
    AssertEqual(a.count(1), 0)
    
    var b = [2, 3]
    b.append(0)
    b.removeAt(2)
    AssertEqual(b.count(0), 0)
    AssertEqual(b.count(nil), 0)
    
    var a2 = [1, 2, ["zup", 2], ["zup", 3], ["zup", 2]]
    AssertEqual(a2.count(["zup", 2]), 2)
    
    AssertEqual(a._add([4, 5]), [2, 3, 4, 5])
    AssertEqual(a._get(1), 3)
    AssertEqual(a._get(-1), 3)
    AssertEqual(a._get(0:2), [2, 3])
    AssertEqual(a._get(nil:1), [2])
    AssertEqual(a._get(1:nil), [3])
    a._set(1, 4)
    AssertEqual(a._get(1), 4)
    a._set(1, 3)
    AssertEqual(a._eq([2, 3]), True)
    AssertEqual(a._eq([2, 4]), False)
    AssertEqual(a._lt([2, 4]), True)
    AssertEqual(a._lt([2, 3]), False)
    AssertEqual(a._gt([2, 3]), False)
    AssertEqual(a._gt([2, 2]), True)
    AssertEqual(a._in(3), True)
    AssertEqual(a._in(4), False)
    AssertEqual(a._str(), "[2, 3]")
    AssertEqual(a._hash(), Hash(a))
    var e = a.iterator()
    Assert(e is Iterator)
    AssertEqual(e.next(), 2)
    AssertEqual(e.next(), 3)
    AssertEqual(e.hasNext(), False)
    
    AssertRaises(IndexError, a._get, [2])
    AssertRaises(IndexError, a._set, [2, 1])
    
    var m
    m = a.length
    AssertEqual(m(), 2)
    AssertEqual(Repr(m), "length of Array")
    m = a._get
    AssertEqual(m(1), 3)
    
    m = GetMember(a, "length")
    AssertEqual(m(), 2)
  end
  
  def testInterfaces()
    var a = []
    Assert(a is Iterable)
    Assert(a is Comparable)
    Assert(a is Sequence)
    Assert(a is Multipliable)
  end
  
  def testInheritance()
    var a1 = ArraySubType()
    Assert(a1 is ArraySubType)
    Assert(a1 is Array)
    AssertEqual(a1.length(), 0)
    
    var a2 = ArraySubType()
    a2.append("a")
    a2.append("b")
    AssertEqual(a2[0], "a")
    AssertEqual(a2[1], "b")
    AssertEqual(a2.length(), 2)
    AssertEqual(a2, ["a", "b"])
  end
    
  def testSubTypeSubArray()
    var a4 = ArraySubType()
    a4.append(5)
    a4.append(nil)
    a4.append(nil)
    AssertEqual(a4[0:2], [5, nil])
  end
  
  def testSubTypeComparison()
    AssertEqual(["0", "1", "2"], ConcatArray(3))
    Assert(["0", "1", "1"] < ConcatArray(3))
    Assert(["0", "1", "3"] > ConcatArray(3))
  end
  
  def testConcatWithNonArrays()
    AssertEqual([1, 2] + ConcatArray(3), [1, 2, "0", "1", "2"])
    AssertRaises(TypeError, def (); [1, 2] + ErrConcat(); end)
  end
  
  def testSubTypeIn()
    var a = ArraySubType()
    a.append(5)
    Assert(5 in a)
  end
  
  def testSubTypeWithoutSuperCreate()
    var a = ArraySubType3()
    a.append(3)
    AssertEqual(a[0], 3)
  end
end


private class Comp
  var m = 3
  
  def _eq(x)
    return m == x
  end
end


private class ArraySubType is Array
end


private class ArraySubType2 is Array
  def length()
    return super.length() - 1
  end

  def _get(x)
    return super._get(x) + 1
  end
end


private class ArraySubType3 is Array
  def create()
  end
end


-- Perform indexing operations and verify that indexing errors are generated.
def AssertIndexError(l, i)
  var nerr = 0
  try
    var x = l[i]
  except IndexError
    nerr += 1
  end
  try
    l[i] = 0
  except IndexError
    nerr += 10
  end
  Assert(nerr == 11)
end


private class ErrConcat
  def _add(x)
    return 5
  end
end


private class ConcatArray is Array
  def create(n)
    for i in 0 to n
      append(nil)
    end
  end

  def _get(x)
    return Str(x)
  end
end