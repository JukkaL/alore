module runtime

import unittest
import helpers
import reflect


class SymbolSuite is Suite
  def testHasMember()
    var f = FooClass()
    Assert(HasMember(f, "variable"))
    Assert(HasMember(f, "constant"))
    Assert(HasMember(f, "property"))
    Assert(HasMember(f, "method"))
    Assert(HasMember(f, "overriden"))
    Assert(HasMember(f, "baseVar"))
    Assert(not HasMember(f, "BaseVar"))
    Assert(not HasMember(f, "x"))
    AssertRaises(TypeError, HasMember, (f, True))
  end
  
  def testGetMember()
    var f = FooClass()
    Assert(GetMember(f, "variable") == f.variable)
    Assert(GetMember(f, "constant") == f.constant)
    Assert(GetMember(f, "property") == f.property)
    Assert(GetMember(f, "method") is Function)
    Assert(GetMember(f, "method")() == f.method())
    Assert(GetMember(f, "overriden")() == f.overriden())
    Assert(GetMember(f, "baseVar") == f.baseVar)
    AssertRaises(ValueError, GetMember, [f, "create"])
    
    var nerr = 0
    try
      GetMember(f, "Variable")
    except MemberError
      nerr += 1
    end
    Assert(nerr == 1)
    
    try
      GetMember(f, 12)
    except TypeError
      nerr += 1
    end
    Assert(nerr == 2)
    
    try
      GetMember(12, "variable")
    except MemberError
      nerr += 1
    end
    Assert(nerr == 3)
  end
  
  def testTestSetMember()
    var f = FooClass()
    
    SetMember(f, "variable", 2)
    Assert(f.variable == 2)
    
    Assert(f.settable == 3)
    SetMember(f, "setter", 7)
    Assert(f.settable == 8)
    
    SetMember(f, "baseVar", 57)
    Assert(f.baseVar == 57)
    
    var nerr = 0
    try
      SetMember(f, "Variable", 0)
    except MemberError
      nerr += 1
    end
    Assert(nerr == 1)
    
    try
      SetMember(f, "constant", 0)
    except MemberError
      nerr += 1
    end
    Assert(nerr == 2)
    
    try
      SetMember(f, "method", 0)
    except MemberError
      nerr += 1
    end
    Assert(nerr == 3)
  end
end


private class BaseClass
  var baseVar = 55
  
  def baseMethod()
    return 66
  end
  
  def overriden()
    return 33
  end
end


private class FooClass is BaseClass
  def create()
  end

  var variable = 12
  const constant = 13
  
  def property
    return 14
  end
  
  var settable = 3
  def setter
    return settable
  end
  def setter = n
    settable = n + 1
  end

  def method()
    return 15
  end
  
  def overriden()
    return 44
  end
end
