module runtime

-- Test suite for statements of the form "expr += expr", "expr *= 2", etc.
--
-- Test cases for compile errors are defined in file "data/compile-errors.txt".

import unittest


private const Five = 5
private const GlobalArray = [6, 7]
private var OpAssignVar


class OperatorAssignmentSuite is Suite
  -- Test all operations at least once. Only trivial cases are tested.
  def testAllOps()
    var i = 5
    i += 1
    AssertEqual(i, 6)
    i -= 1
    AssertEqual(i, 5)
    i += 2
    AssertEqual(i, 7)
    i -= 2
    AssertEqual(i, 5)
    i *= 2
    AssertEqual(i, 10)
    i **= 2
    AssertEqual(i, 100)
    i /= 10
    AssertEqual(i, 10)
    i /= 4
    AssertEqual(i, 2.5)
  end
  
  private var six = 6
  var seven = 7
  
  -- Test operations with local variable as the lvalue.
  def testLvarTarget()
    var i = 5
    i += (1 + 2) + (3 + 4)
    AssertEqual(i, 15)
    
    var j = 6
    i = 10
    i -= j
    AssertEqual(i, 4)
    
    i *= Five
    AssertEqual(i, 20)
    
    i -= six
    AssertEqual(i, 14)
    
    var o = self
    i += o.seven
    AssertEqual(i, 21)
    
    var a = [9]
    i -= a[3 - 3]
    AssertEqual(i, 12)
  end
  
  -- Test global variable as the target of an operator assignment.
  def testGvarTarget()
    OpAssignVar = 2
    OpAssignVar += 55
    AssertEqual(OpAssignVar, 57)
    OpAssignVar *= 2
    AssertEqual(OpAssignVar, 114)
  end

  -- Test exceptions raised during operator assignment.
  def testErrors()
    AssertRaises(TypeError, def ()
                              var i = 0
                              var a = [9]
                              i += a != nil
                            end)
  end
  
  -- Test array item as the target of an operator assignment.
  def testArrayTarget()
    -- Simplest case, array and index and operand are local variables.
    var a = [0, 3]
    var i = 0
    var j = 4
    a[i] += j
    AssertEqual(a, [4, 3])
    
    -- Operand is an integer literal.
    a[i] *= 2
    AssertEqual(a, [8, 3])
    
    -- Operand is an expression.
    a[i] += (1 + 2) + (3 + 4)
    AssertEqual(a, [18, 3])
    
    -- Index and operand are expressions.
    a[6 - 5] += (1 + 1) + (2 + 3)
    AssertEqual(a, [18, 10])
    
    -- Array is a global variable.
    GlobalArray[5 - 5] += (1 + 1) + (2 + 3)
    AssertEqual(GlobalArray, [13, 7])
    
    -- Array is a public member.
    publicArray = [4]
    publicArray[0] += 2 + 3
    AssertEqual(publicArray, [9])
    
    -- Array is a private member.
    privArray = [11, 6]
    privArray[1] += 3 + 1
    AssertEqual(privArray, [11, 10])
    
    -- Array is a complex expression.
    a = [[5, 6], [7, 8]]
    a["x".length()][[6, 0][3 - 2]] -= 5 * 6
    AssertEqual(a, [[5, 6], [-23, 8]])
  end
  
  -- Test member as the target of an operator assignment.
  def testMemberTarget()
    -- Target is a public member variable accessed using self.
    pubVar = 3
    pubVar += 5
    AssertEqual(pubVar, 8)
    
    -- Target is a private member variable accessed using self.
    privVar = 5
    privVar += 8
    AssertEqual(privVar, 13)
    
    -- Target is a public member variable accessed using a variable.
    var o = self
    o.pubVar += 10
    AssertEqual(pubVar, 18)
    
    -- Target is a private property.
    _prop = 5
    prop += 6
    AssertEqual(_prop, 14)
  end
  
  -- Test exposed local variable as the target of an operator assignment.
  def testExposedTarget()
    var x = 3
    var y = "ab"
    var f = def ()
      x *= 4
      y += "c"
      AssertEqual(y, "abc")
      var z = 2
      z += x
      AssertEqual(z, 14)
    end
    f()
    AssertEqual(x, 12)
    AssertEqual(y, "abc")
  end
  
  -- Test concatenating arrays using += and checking that it is different
  -- from appending to an array.
  def testArrayAdd()
    var a = [5]
    var b = a
    b += [6, 7]
    AssertEqual(b, [5, 6, 7])
    b[1] = 1
    AssertEqual(a, [5])
  end
  
  -- Test a few different target types.
  def testDifferentTypes()
    var a = "foo"
    a += "bar"
    AssertEqual(a, "foobar")
    a = 4.0
    a *= 2.5
    AssertEqual(a, 10.0)
  end
  
  -- Test that line break after operator assingment is ignored.
  def testLineContinuation()
    var i = 2
    i +=
      1 -- 3
    i -=
      1 -- 2
    i *=
      2 -- 4
    i **=
      2 -- 16
    i /=
      2 -- 8.0
    AssertEqual(i, 8)
  end
  
  -- Member variables needed by a test case.
  var publicArray
  private var privArray
  
  var pubVar
  private var privVar
  
  var _prop
  
  private def prop
    return _prop + 1
  end
  
  private def prop = new
    _prop = new + 2
  end
end
