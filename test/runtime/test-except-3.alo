module runtime

-- Try / finally / except statements

import unittest
import __testc


-- Finally statement and break
class ExceptSuite3 is Suite
  def testT1()
    var i = 0
  
    try
      while True
        break
        Fail()
      end
      i += 1
    finally
      i += 1
    end
  
    Assert(i == 2)
  
    while True
      i = 0
      try
        try
          i += 1
          break
          Fail()
        finally
          i += 1
        end
        Fail()
      finally
        i += 1
      end
      Fail()
    end
  
    Assert(i == 3)
  
    while True
      i = 0
      try
        try
          i += 1
          raise A()
        except A
          i += 1
          raise B()
        end
      finally
        break
      end
      try
        Fail()
      finally
        Fail()
      end
    end
  
    Assert(i == 2)
  
    Ok()
  end
  
  -- Finally statement and return with a return value
  def testT3()
    var depth = ContextDepth()
    var i = FuncRetVal()
    Assert(i == 13)
  
    Assert(g3 == 4)
    Assert(ContextDepth() == depth)
  
    Ok()
  end
  
  -- Several try..except..finally statements in the same function
  def testT4()
    var i = 0
  
    try
      i += 1
      try
        try
          i += 1
        except A
          Fail()
        end
      finally
        i += 1
      end
      try
        try
          try
            i +=1
          except A
            Fail()
          end
        finally
          i += 1
        end
  
        try
          i += 1
          raise A()
          try
            try
      	      Fail()
            except A
              Fail()
            end
          finally
            Fail()
          end
        finally
          i += 1
        end
  
        Fail()
        try
          try
            Fail()
          except A
            Fail()
          end
        finally
          Fail()
        end
      finally
        i += 1
      end
  
      Fail()
      try
        try
          Fail()
        except A
          Fail()
        end
      finally
        Fail()
      end
    except A
      i += 1
    end
  
    Assert(i == 9)
  
    Ok()
  end
  
  -- Test finally (and except) statements within finally statement.
  def testT5()
    var i = 0
   
    try
      i += 1
      try
        i += 1
        raise A()
        Fail()
      finally
        i += 1
        try
          i += 1
          try
            raise B()
            Fail()
          finally
            i += 1
          end
          Fail()
        except B
          i += 1
        end
      end
      Fail()
    except A
      i +=1
    end
  
    Assert(i == 7)
  
    i = 0
    try
      i += 1
      try
        i += 1
        raise A()
        Fail()
      finally
        i += 1
        try
          i += 1
          try
            raise B()
            Fail()
          finally
            i += 1
          end
          Fail()
        except A
          Fail()
        end
        Fail()
      end
      Fail()
    except B
      i +=1
    end
  
    Assert(i == 6)
  
    i = 0
    while True
      try
        i += 1
        try
          i += 1
          raise A()
          Fail()
        finally
          i += 1
          try
            try
              i += 1
              try
                break
                Fail()
              finally
                i += 1
              end
              Fail()
            except A
              Fail()
            end
          finally
            i += 1
          end
          Fail()
        end
        Fail()
      --except B
      --  Fail()
      finally
        i += 1
      end
      Fail()
    end
  
    Assert(i == 7)
  
    Ok()
  end
  
  -- Test except statements within except statements.
  def testT6()
    var depth = ContextDepth()
    var i = 0
  
    try
      try
        try
          try
            raise B()
          finally
            i += 1
          end
        except A
          Fail()
          try
            try
              Fail()
            except B
              Fail()
            end
          finally
            Fail()
          end
        except B
          i += 1
          try
            try
              raise A()
              Fail()
            except A
              raise B()
            end
          finally
            i += 1
          end
        except B
          Fail()
        end
      finally
        i += 1
      end
      Fail()
    except B
      i += 1
    end
  
    Assert(i == 5)
    Assert(ContextDepth() == depth)
  
    Ok()
  end
  
  -- Test break from within except-statement, no finally.
  def testT7()
    var i = 0
  
    while True
      try
        while True
          try
            try
              i += 1
              break
              Fail()
            except A
              Fail()
            end
          finally
            i += 1
          end
        end
        break
        try
          Fail()
        finally
          Fail()
        end
      except A
        Fail()
      end
      Fail()
    end
  
    Ok()
  end
  
  -- Test return from within except-statement, no finally.
  def testT8()
    AssertEqual(nil, FuncRetExceptNoRetVal())
    
    var i = FuncRetExceptRetVal()
    Assert(i == 17)
  
    Ok()
  end
  
  -- Test break within two try statements, the outermost having a finally
  -- statement.
  def testBreakInTwoDeepTry()
    var i = 0
    0 + 0 + 0 -- Put some stuff in the stack
    while True
      try
        try
          break
        except ValueError
          Fail()
        end
        Fail()
      finally
        i += 1
      end
      Fail()
    end
    Assert(i == 1)
  end
  
  -- Test return within two try statements, the outermost having a finally
  -- statement.
  def testReturnInTwoDeepTry()
    var a = [0]
    Assert(returnFromFinally(a) == 2)
    Assert(a[0] == 1)
    returnFromFinally2(a)
    Assert(a[0] == 2)
  end
  
  -- Helper method for testReturnInTwoDeepTry.
  def returnFromFinally(a)
    0 + 0 + 0 -- Put some stuff in the stack
    while True
      try
        try
          return 2
        except ValueError
          Fail()
        end
        Fail()
      finally
        a[0] += 1
      end
      Fail()
    end
    Fail()
  end
  
  -- Helper method for testReturnInTwoDeepTry.
  def returnFromFinally2(a)
    0 + 0 + 0 -- Put some stuff in the stack
    while True
      try
        try
          return
        except ValueError
          Fail()
        end
        Fail()
      finally
        a[0] += 1
      end
      Fail()
    end
    Fail()
  end
end


private var g2 = 0
private var g3 = 0
  

private def FuncNoRetVal()
  try
    g2 += 1
    try
      g2 += 1
      if 2 > 1
        return
      end
      Fail()
    finally
      g2 += 1
    end
    try
      Fail()
    finally
      Fail()
    end
  finally
    g2 += 1
  end
  Fail()
end


private def FuncRetVal()
  try
    g3 += 1
    try
      g3 += 1
      if 2 > 1
        return 13
      end
      Fail()
    finally
      g3 += 1
    end
    try
      Fail()
    finally
      Fail()
    end
  finally
    g3 += 1
  end
  Fail()
end


private def FuncRetExceptNoRetVal()
  try
    try
      if 0 == 1
        return
      end
    finally
    end
    return
    Fail()
    try
      return 4
    finally
      return 3
    end
  except TypeError
    Fail()
  end
  Fail()
end


private def FuncRetExceptRetVal()
  try
    try
      if 0 == 1
        return
      end
    finally
      return 17
    end
    Fail()
  except ValueError
    Fail()
  end
  Fail()
end
