module runtime

-- Misc call tests

import unittest
import helpers


class CallSuite6 is Suite
  -- Test calling methods with varargs.
  def testMethodVarArgs()
    var i = TestClass()
    var j = 0
    
    while j < 1000
      j += 1
  
      var a4 = (1, 2, 3, 4)
      VerifyArrays(i.Method4(1, 2, 3, 4), a4)
      VerifyArrays(i.Method4(1, 2, 3, 4, *[]), a4)
      VerifyArrays(i.Method4(1, 2, *(3, 4)), a4)
      VerifyArrays(i.Method4(*(1, 2, 3, 4)), a4)
  
      VerifyArrays(i.Method12(1), (1, 3))
      VerifyArrays(i.Method12(1, 2), (1, 2))
      VerifyArrays(i.Method12(1, 2, *[]), (1, 2))
      VerifyArrays(i.Method12(1, *[2]), (1, 2))
      VerifyArrays(i.Method12(*(1, 2)), (1, 2))
  
      VerifyArrays(i.Method12v(1), (1, 3))
      VerifyArrays(i.Method12v(1, 2), (1, 2))
      VerifyArrays(i.Method12v(1, 2, 3, 4, 5), (1, 2, 3, 4, 5))
      VerifyArrays(i.Method12v(*(1, 2, 3, 4, 5)), (1, 2, 3, 4, 5))
      VerifyArrays(i.Method12v(1, *(2, 3, 4, 5)), (1, 2, 3, 4, 5))
      VerifyArrays(i.Method12v(1, 2, 3, *(4, 5, 6)), (1, 2, 3, 4, 5, 6))
    end
  end
  
  -- Test calling with * and an Array subclass.
  def testVarArgsWithArraySubClass()
    var c = ArraySubType2()
    c.append(1)
    c.append(2)
    c.append(3)
  
    VerifyArrays(TestClass().Method4(5, *c), (5, 1, 2, 3))
    VerifyArrays(F3(*c), (1, 2, 3))
  
    var i = ConstructorTest(*c)
    Assert(i.i == 1 and i.j == 2 and i.k == 3)
  
    var m = TestClass().Method4
    VerifyArrays(m(5, *c), (5, 1, 2, 3))
  end
  
  def testReturn()
    -- IDEA: Perhaps more test cases to test different possibilities of
    -- exceptions.
    Assert(FuncRet() == 7)
    FuncRet()
  
    AssertEqual(FuncNoRet(), nil)
  end
end


private class TestClass
  var hmm = 7

  def Method4(a1, a2, a3, a4)
    Assert(hmm == 7)
    return (a1, a2, a3, a4)
  end

  def Method12(a1, a2 = 3)
    Assert(hmm == 7)
    return (a1, a2)
  end

  def Method12v(a1, a2 = 3, *a)
    Assert(hmm == 7)
    return CreateArray(a1, a2, *a)
  end
end


private def F3(a, b, c)
  return (a, b, c)
end


private class ConstructorTest
  var i, j, k

  def create(a, b, c)
    i = a
    j = b
    k = c
  end
end


private def FuncRet()
  return 7
end


private def FuncNoRet()
end


