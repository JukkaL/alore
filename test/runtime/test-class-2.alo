module runtime

-- Classes and instances

import unittest
import helpers


-- Test simple constructors and self
class ClassSuite2 is Suite
  def testCreate()
    var i = ConstructorClass1(2, 3)
    i.Test()
    var j = ConstructorClass2(5)
    Assert(j.hm == 5)
    Ok()
  end
  
  def testBoundMethods()
    var i = BoundMethodTest()
  
    var m = i.MethodNoArgs
    Assert(m() == 8)
  
    m = i.MethodArgs
    Assert(m(2) == 12)
  
    m = i.GetPub()
    Assert(m() == 8)
  
    m = i.GetPriv1()
    Assert(m() == 10)
  
    m = i.GetPriv2()
    Assert(m(1, 2, 3) == 11)
  
    Ok()
  end
  
  -- Test calling member variables.
  def testMemberVarCall()
    var i = MemberVarCallTest()
  
    i.pub = Minus
    Assert(i.pub(4, 3) == 1)
  
    i.pub = Simple
    var s = i.pub(7)
    Assert(s.h == 7)
  
    i.pub = CallableClass()
    Assert(i.pub(3, 5) == 9)
  
    i.pub = DummyMethodClass().RetPlus
    Assert(i.pub(5, 8) == 20)
  
    -- FIX: C function..
  
    i.Test()
  
    Ok()
  end
  
  -- Test inheritance and overriding.
  def testInheritance()
    var i1 = Inherited1(3, 4)
    Assert(i1.hmm == 4)
    Assert(i1.DoSomething(7) == 7 + 4 + 3)
  
    var i2 = Inherited2()
    Assert(i2.k == 3)
    Assert(i2.hmm == nil)
    Assert(i2.pr == nil)
  
    var i3 = Inherited3(1, 2)
    Assert(i3.pk == 87)
    Assert(i3.Priv() == 88)
    Assert(i3.DoSomething(5) == 1 + 5 + 1 + 3)
    Assert(i3.GetPk2() == 44)
  
    Ok()
  end
  
  -- Test inheriting and overriding getters/setters.
  def testInheritanceWithAccessors()
    var i1 = InheritedM1()
  
    i1.v1 = 2
    Assert(i1.v1 == 4)
  
    i1.v2 = 3
    Assert(i1.v2 == 6)
  
    i1.v3 = 4
    AssertEqual(i1.v3, 8)
  
    i1.v4 = 5
    Assert(i1.v4 == 14)
    
    Assert(i1.v5 == 66)
    i1.v5 = 77
    Assert(i1.v5 == 78)
    
    i1.v6 = 28
    Assert(i1.v6 == 30)
  
    Ok()
  end
  
  def testDefaultConstructors()
    var o1 = DefCreate(11)
    Assert(o1.m1 == 11)
    
    var o2 = DefCreate2()
    Assert(o2.m1 == 3)
    
    var o3 = DefCreate3(22, 44)
    Assert(o3.m2 == 22)
    Assert(o3.m4 == 44)
  end
end


private class ConstructorClass1
  var hmm = 13
  var blah

  var another = self

  private var hmm2 = Return17()

  const whoah = 443

  const pop

  def create(a, b = 3)
    pop = b
    self.blah = 44
    Assert(hmm == 13)
    --Verify(another == self) --FIX
    Assert(hmm2 == 17)
    Assert(whoah == 443)
    Assert(self.whoah == whoah)
    Assert(pop == b)
    Assert(self.blah == 44)
    Assert(Return17() == 17)
  end

  def Test()
    Assert(hmm == 13)
    --Verify(another == self) --FIX
    Assert(whoah == 443)
    Assert(Return17() == 17)
  end

  private def Return17()
    return 17
  end
end


private class ConstructorClass2
  var hm

  def create(n)
    if n > 0
      hm = n
      return
    end
    hm = 0
  end
end


private class BoundMethodTest
  var h = 7

  def MethodNoArgs()
    return h + 1
  end

  def MethodArgs(a, b = 3)
    return h + a + b
  end

  private def PrivNoArgs()
    return h + 3
  end

  private def PrivArgs(*args)
    VerifyArrays(args, (1, 2, 3))
    return h + 4
  end

  def GetPub()
    return MethodNoArgs
  end

  def GetPriv1()
    return PrivNoArgs
  end

  def GetPriv2()
    return PrivArgs
  end
end


private class MemberVarCallTest
  var pub
  private var pri
  
  def create()
  end

  def Test()
    pub = Minus
    Assert(pub(7, 4) == 3)

    pub = Simple
    var s = pub(8)
    Assert(s.h == 8)

    pub = CallableClass()
    Assert(pub(4, 5) == 10)

    pub = DummyMethodClass().RetPlus
    Assert(pub(5, 7) == 19)

    -- FIX: C function..

    pri = Minus
    Assert(pri(7, 3) == 4)

    pri = Simple
    s = pri(4)
    Assert(s.h == 4)

    pri = CallableClass()
    Assert(pri(3, 5) == 9)

    pri = DummyMethodClass().RetPlus
    Assert(pri(5, 6) == 18)

    -- FIX: C function..
  end
end


private def Minus(a, b)
  return a - b
end


private class Simple
  var h

  def create(a)
    h = a
  end
end


private class CallableClass
  var h = 1

  def _call(a, b)
    return a + b + h
  end
end


private class DummyMethodClass
   var h = 7

  def RetPlus(a, b)
    return a + b + h
  end
end


private class InheritBase
  var k = 1 + 2

  var hmm

  var pr

  def create(a, b)
    hmm = a
    pr = b
    pk = 3
    pk2 = 5
  end

  def DoSomething(a)
    return Priv(a)
  end

  private def Priv(a)
    return a + hmm + pk
  end

  private var pk
  private var pk2
end


private class Inherited1 is InheritBase
  def create(a, b)
    super.create(b, a)
  end
end


private class Inherited2 is InheritBase
  def create()
  end
end


private class Inherited3 is InheritBase
  var pk = 87

  def Priv()
    return pk + 1
  end

  def DoSomething(a)
    return super.DoSomething(a) + 1
  end

  def create(a, b)
    super.create(a, b)
  end

  private var pk2 = 44

  def GetPk2()
    return pk2
  end
end


private class InheritBase2Base
  var v2
  var v3
  var v4
end

 
private class InheritBase2 is InheritBase2Base
  def create()
  end

  var v1

  def v2
    return super.v2 + 1
  end

  def v3 = n
    super.v3 = n + 2
  end

  def v4
    return super.v4 + 3
  end
  def v4 = n
    super.v4 = n + 4
  end
  
  def v5
    return _foo
  end
  
  def v5 = new
    _foo = new
  end
  
  var _foo = 66
  
  var v6
end


private class InheritedM1 is InheritBase2
  def v1
    return super.v1 + 1
  end
  def v1 = n
    super.v1 = n + 1
  end

  def v2
    return super.v2 + 1
  end
  def v2 = n
    super.v2 = n + 1
  end

  def v3
    return super.v3 + 1
  end
  def v3 = n
    super.v3 = n + 1
  end

  def v4
    return super.v4 + 1
  end
  def v4 = n
    super.v4 = n + 1
  end
  
  def v5 = n
    super.v5 = n + 1
  end
  
  def v6 = n
    super.v6 = n + 2
  end
end


private class InheritedM2 is InheritBase2
  -- FIX: do something..
end


private class DefCreate
  var m1
end


private class DefCreate2
  var m1 = 3
end


private class DefCreate3
  var m1 = 1
  var m2
  private const m3 = 3
  const m4
end
