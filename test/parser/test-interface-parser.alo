module parser

import unittest


class InterfaceParserSuite is Suite
  def testSimpleInterfaceAnnotation()
    AssertType(Type, If1a)
  end
  
  def testAnnotatedInterfaceMethods()
    AssertType(Type, If2)
  end
  
  def testAnnotatedInterfaceAccessors()
    AssertType(Type, If3)
  end
end


interface If1a<def ()>
end


-- FIX: test this
--interface If1b is If1a : def ()
--end


interface If2
  def f() as def ()
  def g(x=, *y) as def ()
  def h(abc as def (), d)
end


interface If3
  def x as def ()
  def x = y as def ()
end


interface GetIf
  def a
end

class GetCl1 implements GetIf
  def a
  end
end

class Getcl2 implements GetIf
  const a
end

class GetCl3 implements GetIf
  var a
end


interface GetSetIf
  def a
  def a = x
end

class SetCl1 implements GetSetIf
  def a
  end
  def a = x
  end
end

class SetCl2 implements GetSetIf
  var a
end


interface SimpleIf
  def a()
  def b
  def b = x
end

class SimpleBase
  def a()
  end
  var b
end

class SimpleCl is SimpleBase implements SimpleIf
end


interface LargeIf
  def a
  def b
  def c
  def d
  def e
  def f
  def g
end

class LargeCl implements LargeIf
  const f, e, d, c, b, a
  def g
  end
end
