module parser

-- This file contains test cases for parsing type annotations for a 
-- dynamically-typed implementation that simply ignores type annotations. The 
-- tested functionality is included directly within this file.
--
-- All parse error test cases are included in CompileErrorSuite. 
--
-- FIX: Load the tested code dynamically, since this file cannot be compiled 
--      by an implementation that does proper type checking.

import unittest


class AnnotationsSuite is Suite
  def testClassAnnotation()
    AssertEqual(Ann1().f(1), 6)
    AssertEqual(Ann2().f(2), 7)
    AssertType(Ann2, Ann2())
  end
  
  def testFunctionAnnotation()
    AssertEqual(F(44), 45)
  end
  
  def testAnonFunctionAnnotation()
    var f = def (x as def ()) as foo; return x - 2; end
    var g = def (x) as def (); return x - 2; end
    AssertEqual(f(5), 3)
  end
  
  def testPairConstructorInDefaultArgumentValue()
    var f = def (x = 1 : 2) as Object; return x; end
    AssertEqual(f(), 1 : 2)
  end
  
  def testGetterAnnotations()
    var a = Ann2()
    AssertEqual(a.p, "x")
  end
  
  def testSetterAnnotations()
    var a = Ann2()
    a.p = 13
    AssertEqual(a.x, 13)
  end
  
  def testVarDefAnnotations()
    var a = 1 as def ()
    AssertEqual(a, 1)
    
    var b, c = (1 as Int), [5 as Int] as def ()
    AssertEqual(b, 1)
    AssertEqual(c, [5])
    
    var d as def ()
    AssertEqual(d, nil)
    d = 4
    AssertEqual(d, 4)
    
    var e, f as def ()
    AssertEqual((e, f), (nil, nil))
    e, f = 1, 2
    AssertEqual((e, f), (1, 2))
  end
  
  def testVarDefWithAnonFunction()
    var a = def (x)
              var a2 as yy
            end as zz
    var b = def (x = def ()
                       var b2 as xx
                      end)
              var b3 as yy
            end as zz
    var c = (def (x = def ()
                       var b2 as xx
                      end)
              var b3 as yy
             end as Function) as zz
  end
  
  def testConstAnnotations()
    AssertType(Constant, C1)
    AssertEqual(C2, 1)
    AssertType(Constant, C3)
    AssertType(Constant, C4)
    AssertEqual((C5, C6), (2, 3))
  end
  
  -- Initializer with various expression in it: and, or, array constructor
  -- etc.
  def testInitializer()
    var a = (False or True) and True as Int
    AssertEqual(a, True)
    var b = 1, (2, 3), 3 + 5 as Int
    AssertEqual(b, (1, (2, 3), 8))
  end
  
  def testMethodAnnotations()
    AssertEqual(Ann1().g(), 77)
  end
  
  def testForLoopAnnotations()
    for x as def () in 1, 2, 3
    end
  end
  
  def testComplexFunctionSignature()
    var f = def (x, y = def () as X; end as 1, *z) as Z
              return x, y
            end as xxx
    var a, b = f(1)
    AssertEqual(a, 1)
  end
  
  def testInlineAnnotationsInInitialization()
    var a = [1, 2, 3] as <def ()> + [4]
    AssertEqual(a, [1, 2, 3, 4])
    
    var aa = (1, 2) as <Int, Int>
    AssertEqual(aa, (1, 2))
    
    var b = a.find(2) as <def ()>
    AssertEqual(b, 1)
    
    AssertEqual(I, 2)
  end
  
  def testInlineAnnotationsInStatements()
    var a
    
    -- Assignment
    a = 3 as <def()> * 4
    AssertEqual(a, 12)
    AssertEqual(I2, 4)
    
    -- Return
    AssertEqual(def ()
                  return 5 as <def()> * 2
                end(), 10)

    -- If
    var b
    if 1 as <def()> < 2
      b = 2
    end
    AssertEqual(b, 2)
    
    -- While
    b = 0
    while b as <def()> < 2
      b += 3
    end
    AssertEqual(b, 3)
    
    -- For
    b = 0
    for x in (1, 2, 3) as <def ()>
      b += x
    end
    AssertEqual(b, 6)
  end
  
  def testInlineAnnotationsInDefaultArgs()
    -- Anonymous function
    var f = def (x = [1, 2].find(1) as <def ()>)
              return x
            end
    AssertEqual(f(), 0)
    
    -- Global function
    AssertEqual(F3(), 3)
    
    -- Method
    AssertEqual(Ann1().h(), 8)
  end
  
  def testComplexInlineAnnotation()
    var a = [1, 2, 3] as <Array<Map<Int, Str>, (Int, Str)>> + [4]
    AssertEqual(a, [1, 2, 3, 4])
    var b = [1, 2] as <((([[[A]]])))> + [3]
    AssertEqual(b, [1, 2, 3])
  end
  
  def testGenericFunctionAnnotation()
    AssertEqual(FG(3), 10)
  end
  
  def testIntersectionTypeAnnotation()
    AssertEqual(Isect1(4), 7)
    AssertEqual(Isect2(5, 6), 11)
    AssertEqual(Isect3(5), 9)
    AssertEqual(Isect4(5), 10)
    AssertEqual(Isect5(3, 4), 8)
    AssertEqual(Isect6(6, 4), 2)
    AssertEqual(Isect7(6), 12)
  end
  
  def testLineContinuationAfterAs()
    AssertEqual(Cont(4), 4)
  end
  
  def testFunctionWithAnnotationAndAnonFunction()
    AssertEqual(FGanon('x'), 'x')
  end
end


private class Ann1<T>
  def f(x as def ()) as y
    return 5 + x
  end
  
  def g() as def()
    return 77
  end
  
  def h(x = (1 + 2) as def ())
    return 5 + x
  end
  
  def j(x = 5 as <def()> + 2)
    return x
  end
end


private class Ann2<def ()> is Ann1<def ()>
  var x

  def p as def ()
    return "x"
  end
  
  def p = n as def ()
    x = n
  end
end


private def F(x as def ()) as def ()
  return x + 1
end


private const C1 as def ()
private const C2 = 1 as def (a, b)
private const C3, C4 as def ()
private const C5, C6 = 2, 3 as def ()


private var I = [1, 1].count(1) as <def ()>
private var I2
I2 = 5 as <def> - 1


private def F3(x = (1, 3) as <def()>[1])
  return x
end


private def FG<A<X>, (((def ())))>(x as def ()) as def ()
  return x + 7
end


private def Isect1(x as X) or
                  (x as Y)
  return x + 3
end


private def Isect2(x as X, y as (Array<<>>)) or
                  (x as def (), y as def ())
  return x + y
end


private def Isect3(x as X) as def (<>) or
                  (x as Y) as def (<>)
  return x + 4
end

private def Isect4<def(), def(<>)>(x as X) or
                  <def(), def(<>)>(x as Y)
  return x + 5
end

private def Isect5(a as X, b = 1 as Y) or
                  (a as Y, b= as def (<>))
  return a + b + 1
end

private def Isect6(a as X, *b as Y) or
                  (a as Y, *b as Z)
  return a - b[0]
end

private def Isect7(a as X) or
                  (a as Y) or
                  (a as Z)
  return a + 6
end


-- Line continuation after "as".
private def Cont(a) as
  X
  return a
end


-- Function with an annotation + anonymous function that accesses variables
-- defined in the outer scope.
private def FGanon<T>(s)
  return def ()
           return s
         end()
end
